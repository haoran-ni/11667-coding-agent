[
    {
        "generated": "```python\n# Import the required libraries\nimport wikipedia\nfrom collections import defaultdict\n\n# Function to categorize articles\ndef categorize_articles(articles):\n    # Initialize a dictionary to store categories\n    categories = defaultdict(list)\n\n    # Iterate over each article\n    for article in articles:\n        try:\n            # Get the page content\n            page = wikipedia.page(article)\n\n            # Get the categories from the page\n            page_categories = page.categories\n\n            # Add the categories to the dictionary\n            for category in page_categories:\n                categories[category].append(article)\n\n        except wikipedia.exceptions.PageError:\n            # Handle the case where the article is not found\n            print(f\"Article '{article}' not found.\")\n\n    # Return the categories\n    return categories\n\n# Example usage\narticles = [\"Python_(programming_language)\", \"Wikipedia:List_of_programming_languages\"]\ncategories = categorize_articles(articles)\n\n# Print the categories\nfor category, articles in categories.items():\n    print(f\"Category: {category}\")\n    print(f\"Articles: {', '.join(articles)}\")\n    print()\n```",
        "target": "```python\nimport wikipedia\n\narticles = ['Advanced Dungeons & Dragons',\n            'The Legend of Zelda',\n            'Mario Kart']\n\nfor article in articles:\n page = wikipedia.page(title=article)\n print(article, page.categories)\n\n# Output:\n# Advanced Dungeons & Dragons ['Books about games', 'Dungeons & Dragons', 'Role-playing game books']\n# The Legend of Zelda ['1986 video games', 'Action-adventure games', 'High fantasy video games', 'Nintendo franchises', 'The Legend of Zelda']\n# Mario Kart ['1992 video games', 'Kart racing video games', 'Mario Kart', 'Nintendo franchises', 'Racing video games', 'Video games developed in Japan']\n```\n"
    },
    {
        "generated": "```python\ndef list_intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(list_intersection(list1, list2))  # Output: [4, 5]\n```",
        "target": "```python\ndef intersection(list1, list2):\n    intersection = [value for value in list1 if value in list2]\n    return intersection\n\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\nresult = intersection(list1, list2)\nprint(result) # prints [4,5]\n```\n"
    },
    {
        "generated": "```python\n# Import necessary libraries\nimport pandas as pd\nfrom tabulate import tabulate\n\n# Define a function to generate the report\ndef generate_report(data, table_name):\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Calculate summaries for each column\n    summaries = df.describe()\n\n    # Create a table to display the summaries\n    table = tabulate(summaries, headers='keys', tablefmt='psql')\n\n    # Print the table\n    print(f\"Report for {table_name}:\")\n    print(table)\n\n# Example usage\ndata = {\n    'A': [1, 2, 3, 4, 5],\n    'B': [2, 4, 6, 8, 10],\n    'C': [1, 1, 1, 1, 1]\n}\ngenerate_report(data, 'Sales Data')\n```",
        "target": "```python\nimport pandas as pd \n\n# Load data from the orders table \norders = pd.read_csv('orders.csv')\n\n# Generate summary statistics for the orders table \nsummary_stats = orders.describe()\n\n# Generate a report containing summary statistics \nreport = open('report.html', 'w') \nreport.write(summary_stats.to_html()) \nreport.close()\n```\n"
    },
    {
        "generated": "```python\n# For even numbers from 0 to 100\nfor num in range(101):\n    if num % 2 == 0:\n        print(num)\n```",
        "target": "```python\nfor i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)\n```\n"
    },
    {
        "generated": "```python\ndef common_elements(lists):\n    set_of_elements = set()\n    for lst in lists:\n        set_of_elements.update(set(lst))\n    return [element for element in set_of_elements if all(element in lst for lst in lists)]\n\n# Example usage:\nlists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(common_elements(lists))\n```",
        "target": "```python\ndef get_common_elements(list_of_lists): \n    commons = []\n    for i in range(len(list_of_lists)): \n        commons = list(set(commons).intersection(list_of_lists[i]))\n    return commons\n```\n"
    },
    {
        "generated": "```python\ndef multiply(a, b):\n    if b == 0:\n        return 0\n    elif b < 0:\n        return -multiply(a, -b)\n    else:\n        return a + multiply(a, b - 1)\n\na = 5\nb = 3\n\nresult = multiply(a, b)\nprint(\"Result: \", result)\n```",
        "target": "```python\ndef multiply(x, y):\n\tif y == 0:\n\t\treturn 0\n\telse:\n\t\treturn x + multiply(x, y - 1)\n```\n"
    },
    {
        "generated": "```python\n# Merge two sorted lists and create a new sorted list\ndef merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = j = 0\n\n    # Merge smaller elements first\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    # If there are remaining elements in either list, append them to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n\n    return merged_list\n\n\n# Example usage:\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\n\nmerged_list = merge_sorted_lists(list1, list2)\nprint(merged_list)\n```",
        "target": "```python\nlist_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\ndef merge_sorted_lists(list_a, list_b):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i+=1\n        else:\n            merged_list.append(list_b[j])\n            j+=1\n    while i < len(list_a):\n        merged_list.append(list_a[i])\n        i+=1\n    while j < len(list_b):\n        merged_list.append(list_b[j])\n        j+=1\n    return merged_list\n```\n"
    },
    {
        "generated": "```python\n# def compare_strings(str1, str2):\n#     if str1 > str2:\n#         return str1\n#     elif str1 < str2:\n#         return str2\n#     else:\n#         return \"Strings are equal\"\n\n# def compare_strings(str1, str2):\n#     if str1 == str2:\n#         return \"Strings are equal\"\n#     elif str1 > str2:\n#         return str1\n#     else:\n#         return str2\n\n# def compare_strings(str1, str2):\n#     if str1 > str2:\n#         return str1\n#     elif str1 < str2:\n#         return str2\n#     else:\n#         return \"Strings are equal\"\n\ndef compare_strings(str1, str2):\n    if str1 > str2:\n        return str1\n    elif str1 < str2:\n        return str2\n    else:\n        return \"Strings are equal\"\n\n# Test the function\nprint(compare_strings(\"apple\", \"banana\"))\nprint(compare_strings(\"apple\", \"apple\"))\nprint(compare_strings(\"banana\", \"banana\"))\n```",
        "target": "```python\ndef compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                return False\n    return True\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\n\ndef fibonacci_optimized(n):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b\n\ndef fibonacci_matrix(n):\n    if n < 2:\n        return n\n    M = [[1, 1], [1, 0]]\n    x = n % 2\n    y = n // 2\n    for _ in range(y):\n        M[1][0], M[1][1] = M[0][0], M[0][1]\n        M[0] = [M[0][0] + M[1][0], M[0][1] + M[1][1]]\n    return M[0][0]\n\ndef fibonacci_optimized_matrix(n):\n    if n < 2:\n        return n\n    M = [[1, 1], [1, 0]]\n    x = n % 2\n    y = n // 2\n    for _ in range(y):\n        M[1][0], M[1][1] = M[0][0], M[0][1]\n        M[0] = [M[0][0] + M[1][0], M[0][1] + M[1][1]]\n    return M[1][0]\n```",
        "target": "```python\ndef fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n if n in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n if n > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10))\n```\n"
    },
    {
        "generated": "```python\n# Calculate simple interest\ndef calculate_simple_interest(principal, rate, time):\n    # Convert rate from percentage to a decimal\n    rate = rate / 100\n    \n    # Calculate the simple interest\n    simple_interest = principal * rate * time\n    \n    return simple_interest\n\n# Main program\nif __name__ == \"__main__\":\n    principal = float(input(\"Enter the principal amount: \"))\n    rate = float(input(\"Enter the rate of interest (in %): \"))\n    time = float(input(\"Enter the duration (in years): \"))\n    \n    simple_interest = calculate_simple_interest(principal, rate, time)\n    \n    print(f\"The simple interest is: {simple_interest}\")\n```",
        "target": "```python\ndef calculateSimpleInterest(principal, rate, duration):\n    if rate != 0:\n        interest = (principal * rate * duration) / 100\n    else:\n        interest = 0\n    return interest\n```\n"
    },
    {
        "generated": "```python\ndef char_frequency(input_string):\n    frequency = {}\n    for char in input_string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n\n# Example usage:\ninput_string = \"Hello123\"\nresult = char_frequency(input_string)\nprint(result)\n```",
        "target": "```python\ndef count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n```\n"
    },
    {
        "generated": "```python\ndef validate_string(s, allowed_chars):\n    for char in s:\n        if char not in allowed_chars:\n            return False\n    return True\n\n# Test the function\ns = input(\"Enter a string: \")\nallowed_chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\nprint(validate_string(s, allowed_chars))\n```",
        "target": "```python\nimport re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')\n```\n"
    },
    {
        "generated": "```python\ndef find_closest_pair(arr):\n    if len(arr) < 2:\n        return None\n\n    arr.sort()\n    min_diff = float('inf')\n    closest_pair = (arr[0], arr[1])\n\n    for i in range(1, len(arr) - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (arr[i], arr[i + 1])\n\n    return closest_pair\n\n# Example usage:\narr = [1, 5, 3, 19, 18, 25]\nresult = find_closest_pair(arr)\nprint(result)\n```",
        "target": "```python\nimport sys\n\ndef find_closest_pair(arr):\n    # Variables\n    min_distance = sys.maxsize\n    closest_pair = [-1, -1]\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Get second number\n        for j in range(i + 1, len(arr)):\n            # Calculate the distance between the two values\n            distance = abs(arr[i] - arr[j])\n            # Check if it is the minimum distance\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair[0] = arr[i]\n                closest_pair[1] = arr[j]\n    \n    return closest_pair\n\n# example\narr = [3, 5, 8, 7, 1, 12]\nclosest_pair = find_closest_pair(arr)\nprint('Closest pair:', closest_pair)  # Output is [1, 3]\n```\n"
    },
    {
        "generated": "```python\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n    def __eq__(self, other):\n        if not isinstance(other, Point):\n            return False\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def move(self, dx, dy):\n        self.x += dx\n        self.y += dy\n\n    def distance_to(self, other):\n        return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5\n```",
        "target": "```python\nclass Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\nif __name__ == '__main__':\n  point = Point(2, 3)\n  print(point.x, point.y)\n```\n"
    },
    {
        "generated": "```python\ndef create_dict_from_list(input_list):\n    return {i: element for i, element in enumerate(input_list)}\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5]\nresult = create_dict_from_list(input_list)\nprint(result)\n```",
        "target": "```python\ndef create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)\n```\n"
    },
    {
        "generated": "```python\ndef generate_multiplication_table(size):\n    for i in range(1, size + 1):\n        for j in range(1, size + 1):\n            print(f\"{i} * {j} = {i * j}\", end='\\t')\n        print()\n\nsize = int(input(\"Enter the size of the multiplication table: \"))\ngenerate_multiplication_table(size)\n```",
        "target": "```python\ndef multiplication_table(n):\n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(str(i*j).rjust(4), end=\" \")\n   print()\n\nmultiplication_table(5)\n\n# Output:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n```\n"
    },
    {
        "generated": "```python\n# def compute_sum(lst):\n#     return lst[2] + lst[6]\n#\n# # Test the function\n# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(compute_sum(numbers))\n```",
        "target": "```python\ndef sum_elements(list):\n    Sum = list[2] + list[6]\n    return Sum\nprint(sum_elements(list))\n```\n"
    },
    {
        "generated": "```python\n# Import the Flask library\nfrom flask import Flask, jsonify, request\n\n# Create a new instance of the Flask class\napp = Flask(__name__)\n\n# Define a route for the root URL\n@app.route('/', methods=['GET'])\ndef index():\n    # Return a simple message\n    return jsonify({\"message\": \"Welcome to the API\"})\n\n# Define a route for a specific resource\n@app.route('/users', methods=['GET'])\ndef get_users():\n    # Simulate retrieving users from a database\n    users = [\n        {\"id\": 1, \"name\": \"John Doe\", \"age\": 30},\n        {\"id\": 2, \"name\": \"Jane Doe\", \"age\": 25}\n    ]\n    return jsonify(users)\n\n# Define a route to create a new user\n@app.route('/users', methods=['POST'])\ndef create_user():\n    # Get the new user data from the request body\n    new_user = request.json\n    # Simulate creating a new user in the database\n    users = [\n        {\"id\": 1, \"name\": \"John Doe\", \"age\": 30},\n        {\"id\": 2, \"name\": \"Jane Doe\", \"age\": 25},\n        {\"id\": 3, \"name\": new_user['name'], \"age\": new_user['age']}\n    ]\n    return jsonify({\"message\": \"User created successfully\"})\n\n# Run the Flask application\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\n# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_password():\n    # Define the characters for each type\n    upper_case = string.ascii_uppercase\n    lower_case = string.ascii_lowercase\n    numbers = string.digits\n    special_chars = string.punctuation\n\n    # Randomly select one character from each type\n    password = [\n        random.choice(upper_case),\n        random.choice(lower_case),\n        random.choice(numbers),\n        random.choice(special_chars),\n    ]\n\n    # Fill the rest of the password with random characters from all types\n    all_chars = upper_case + lower_case + numbers + special_chars\n    for _ in range(4):\n        password.append(random.choice(all_chars))\n\n    # Shuffle the password to avoid the first characters always being in the same character type order\n    random.shuffle(password)\n\n    # Join the characters into a single string\n    return ''.join(password)\n\n# Generate and print a random password\nprint(generate_password())\n```",
        "target": "```python\nimport string\nimport random\n\nchars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n\ndef generate_password(size=8, chars=chars):\n return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n```\n"
    },
    {
        "generated": "```python\ndef delete_duplicates(s):\n    return ''.join(c for i, c in enumerate(s) if s[i+1:]!= s[i+1:s.index(c)+1])\n\n# Test the function\nprint(delete_duplicates(\"Hello, World!\"))\n```",
        "target": "```python\ndef deleteDuplicates(string): \n    result = \"\"\n    for i in string: \n        if i not in result: \n            result = result + i\n    return result\n\nprint(\"The output string is: \", deleteDuplicates(string))\n```\n"
    },
    {
        "generated": "```python\n# def create_lookup_table(keys, values):\n#     lookup_table = {}\n#     for key, value in zip(keys, values):\n#         lookup_table[key] = value\n#     return lookup_table\n\n# def get_value_from_table(table, key):\n#     return table.get(key, None)\n\n# def main():\n#     keys = ['a', 'b', 'c']\n#     values = [1, 2, 3]\n#     lookup_table = create_lookup_table(keys, values)\n#     print(get_value_from_table(lookup_table, 'a'))\n#     print(get_value_from_table(lookup_table, 'd'))\n\n# if __name__ == \"__main__\":\n#     main()\n```",
        "target": "```python\nlookup_table = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# In-memory store for posts\nposts = []\n\n# Route to add a new post\n@app.route('/add-post', methods=['POST'])\ndef add_post():\n    data = request.json\n    if 'title' in data and 'content' in data:\n        post = {\n            'id': len(posts) + 1,\n            'title': data['title'],\n            'content': data['content']\n        }\n        posts.append(post)\n        return jsonify(post), 201\n    else:\n        return jsonify({'error': 'Missing required fields'}), 400\n\n# Route to get all posts\n@app.route('/get-posts', methods=['GET'])\ndef get_posts():\n    return jsonify(posts)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Create a post\n@app.route('/post', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n 'title': data['title'],\n 'content': data['content'],\n 'author': data['author'],\n }\n # store post in database\n return jsonify(post)\n\nif __name__ == '__main__':\n app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_random_list():\n    return [random.randint(0, 10) for _ in range(25)]\n\nrandom_list = generate_random_list()\nprint(random_list)\n```",
        "target": "```python\nimport random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence\n\n# Test the function\nn = 10\nprint(fibonacci(n))\n```",
        "target": "```python\ndef fibonacci_seq(n):\n    if n < 0:\n        raise ValueError(\"Index must be a positive integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c\n\nfib_7 = fibonacci_seq(7)\nprint(fib_7)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    fib_series = [0, 1]\n    while len(fib_series) < n:\n        fib_series.append(fib_series[-1] + fib_series[-2])\n    return fib_series\n\n# Test the function\nprint(fibonacci(10))\n```",
        "target": "```python\ndef fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34\n```\n"
    },
    {
        "generated": "```python\nclass NameGreeter:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        if len(self.name) < 3:\n            return f\"Hello, {self.name}!\"\n        elif len(self.name) < 6:\n            return f\"Hi, {self.name}!\"\n        else:\n            return f\"Hello, {self.name}!\"\n\n# Example usage:\nname = input(\"Please enter your name: \")\ngreeting = NameGreeter(name)\nprint(greeting.greet())\n```",
        "target": "```python\nclass NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\"\n```\n"
    },
    {
        "generated": "```python\ndef detect_string(big_string, target_string):\n    \"\"\"\n    Detects the occurrence of a given string in another large string.\n    \n    Args:\n    big_string (str): The large string to search in.\n    target_string (str): The string to search for.\n    \n    Returns:\n    bool: True if the target string is found, False otherwise.\n    \"\"\"\n    return target_string in big_string\n\n# Example usage\nbig_string = \"This is a large string where the target string might be found.\"\ntarget_string = \"found\"\n\nresult = detect_string(big_string, target_string)\nprint(f\"Target string '{target_string}' found: {result}\")\n```",
        "target": "```python\ndef str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")\n```\n"
    },
    {
        "generated": "```python\ndef calculate_medians(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        median = numbers[length // 2]\n    return [median for _ in range(length)]\n```",
        "target": "```python\ndef get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1/2)-1] + tuple_l[int(l_1/2)])/2\n        else:\n            median = tuple_l[int((l_1-1)/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]\n```\n"
    },
    {
        "generated": "```python\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    def __str__(self):\n        return f\"'{self.title}' by {self.author}, published in {self.year}\"\n```",
        "target": "```python\nclass Book:\n  \n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n \n def __str__(self):\n  return f\"{self.title} by {self.author} ({self.year})\"\n```\n"
    },
    {
        "generated": "```python\nclass Car:\n    def __init__(self, brand, horsepower, color):\n        self.brand = brand\n        self.horsepower = horsepower\n        self.color = color\n\n    def __str__(self):\n        return f\"Brand: {self.brand}, Horsepower: {self.horsepower}, Color: {self.color}\"\n```",
        "target": "```python\nclass Car:\n def __init__(self, brand, horsepower, color):\n self.brand = brand\n self.horsepower = horsepower\n self.color = color\n\n def get_brand(self):\n return self.brand\n\n def set_brand(self, brand):\n self.brand = brand\n\n def get_horsepower(self):\n return self.horsepower\n\n def set_horsepower(self, horsepower):\n self.horsepower = horsepower\n\n def get_color(self):\n return self.color\n\n def set_color(self, color):\n self.color = color\n```\n"
    },
    {
        "generated": "```python\ndef min_index(arr, target):\n    try:\n        return arr.index(target)\n    except ValueError:\n        return -1\n\n# Test the function\nnumbers = [5, 2, 8, 1, 9]\ntarget_num = 8\nprint(min_index(numbers, target_num))\n```",
        "target": "```python\narr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)\n```\n"
    },
    {
        "generated": "```python\n# student_names = ['John', 'Anna', 'Peter', 'Linda']\n# student_marks = [85, 90, 78, 92]\nstudent_names = ['John', 'Anna', 'Peter', 'Linda']\nstudent_marks = [85, 90, 78, 92]\n\nstudents_dict = dict(zip(student_names, student_marks))\nprint(students_dict)\n```",
        "target": "```python\nstudent_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}\n```\n"
    },
    {
        "generated": "```python\ndef average(a, b):\n    return (a + b) / 2\n\ndef main():\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n    result = average(num1, num2)\n    print(f\"The average of {num1} and {num2} is {result}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nx = [45, 65]\ntotal = 0\nfor i in range(len(x)):\n  total += x[i]\n  average = total / len(x)\n\nprint(\"Average of the numbers is:\", average)\n```\n"
    },
    {
        "generated": "```python\ndef get_permutations(s):\n    if len(s) == 1:\n        return [s]\n    permutations = []\n    for i, char in enumerate(s):\n        rest = s[:i] + s[i+1:]\n        for perm in get_permutations(rest):\n            permutations.append(char + perm)\n    return permutations\n\n# Test the function\nprint(get_permutations('abc'))\n```",
        "target": "```python\ndef find_permutations(s): \n\tres = [] \n\tfind_permutations_recur(s, \"\", res) \n\treturn res \n\ndef find_permutations_recur(str, prefix, res): \n\tn = len(str)\n\tif n == 0:\n\t\tres.append(prefix) \n\t\treturn\n\n\tfor i in range(n):\n\t\tremaining = str[0:i] + str[i+1:] \n\t\tfind_permutations_recur(remaining, prefix + str[i], res)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    fib_series = [0, 1]\n    while len(fib_series) < n:\n        fib_series.append(fib_series[-1] + fib_series[-2])\n    return fib_series\n\ndef main():\n    num_terms = int(input(\"Enter the number of terms: \"))\n    fib_series = fibonacci(num_terms)\n    print(\"Fibonacci Series up to\", num_terms, \"terms:\")\n    print(fib_series)\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\ndef Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)  \n\n# Driver Code\nprint(\"Fibonacci series:\") \nfor i in range(10): \n    print(Fibonacci(i), end=\" \")\n```\n"
    },
    {
        "generated": "```python\ndef reverse_array(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5]\nprint(\"Original list: \", numbers)\nreverse_array(numbers)\nprint(\"Reversed list: \", numbers)\n```",
        "target": "```python\ndef reverse_in_place(arr):\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr\n\narr = [1, 2, 3, 4]\nprint(reverse_in_place(arr))\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nfrom scipy.stats import fisher_snedecor\n\n# Generate a realization from the FisherSnedecor distribution\nrealization = np.random.fisher_snedecor(1, 2)\n\n# Generate a sample from the FisherSnedecor distribution\nsample = np.random.fisher_snedecor(100, 2)\n\n# Compute the PDF of the FisherSnedecor distribution\npdf = fisher_snedecor.pdf(realization, 1, 2)\n\n# Compute the CDF of the FisherSnedecor distribution\ncdf = fisher_snedecor.cdf(realization, 1, 2)\n\n# Compute the mean of the FisherSnedecor distribution\nmean = fisher_snedecor.mean(1, 2)\n\n# Compute the standard deviation of the FisherSnedecor distribution\nstd_dev = fisher_snedecor.std(1, 2)\n\n# Compute the skewness of the FisherSnedecor distribution\nskewness = fisher_snedecor.skew(1, 2)\n\n# Compute the kurtosis of the FisherSnedecor distribution\nkurtosis = fisher_snedecor.kurt(1, 2)\n\n# Compute the covariance of the FisherSnedecor distribution\ncovariance = fisher_snedecor.cov(1, 2)\n\n# Compute the parameters of the FisherSnedecor distribution\nparams = fisher_snedecor.stats(1, 2)\n\n# Print the results\nprint(f\"Realization: {realization}\")\nprint(f\"Sample: {sample}\")\nprint(f\"PDF: {pdf}\")\nprint(f\"CDF: {cdf}\")\nprint(f\"Mean: {mean}\")\nprint(f\"Standard Deviation: {std_dev}\")\nprint(f\"Skewness: {skewness}\")\nprint(f\"Kurtosis: {kurtosis}\")\nprint(f\"Covariance: {covariance}\")\nprint(f\"Parameters: {params}\")\n```",
        "target": "```python\n#! /usr/bin/env python\n\nfrom __future__ import print_function\nfrom openturns import *\nfrom cmath import *\n\nTESTPREAMBLE()\nRandomGenerator.SetSeed(0)\n\ntry:\n    # Instanciate one distribution object\n    distribution = FisherSnedecor(5.5, 10.5)\n    print(\"Distribution \", repr(distribution))\n    print(\"Distribution \", distribution)\n\n    # Is this distribution elliptical ?\n    print(\"Elliptical = \", distribution.isElliptical())\n\n    # Is this distribution continuous ?\n    print(\"Continuous = \", distribution.isContinuous())\n\n    # Test for realization of distribution\n    oneRealization = distribution.getRealization()\n    print(\"oneRealization=\", repr(oneRealization))\n\n    # Test for sampling\n    size = 10000\n    oneSample = distribution.getSample(size)\n    print(\"oneSample first=\", repr(\n        oneSample[0]), \" last=\", repr(oneSample[size - 1]))\n    print(\"mean=\", repr(oneSample.computeMean()))\n    print(\"covariance=\", repr(oneSample.computeCovariance()))\n\n    size = 100\n    for i in range(2):\n        msg = ''\n        if FittingTest.Kolmogorov(distribution.getSample(size), distribution).getBinaryQualityMeasure():\n            msg = \"accepted\"\n        else:\n            msg = \"rejected\"\n        print(\n            \"Kolmogorov test for the generator, sample size=\", size, \" is\", msg)\n        size *= 10\n\n    # Define a point\n    point = NumericalPoint(distribution.getDimension(), 1.0)\n    print(\"Point= \", repr(point))\n\n    # Show PDF and CDF of point\n    eps = 1e-5\n\n    # derivative of PDF with regards its arguments\n    DDF = distribution.computeDDF(point)\n    # print \"ddf     =\" , repr(DDF)\n    # by the finite difference technique\n    # print \"ddf (FD)=\" ,repr(NumericalPoint(1, (distribution.computePDF(\n    # point + NumericalPoint(1, eps) ) - distribution.computePDF( point  +\n    # NumericalPoint(1, -eps) )) / (2.0 * eps)))\n\n    # PDF value\n    LPDF = distribution.computeLogPDF(point)\n    print(\"log pdf=%.6f\" % LPDF)\n    PDF = distribution.computePDF(point)\n    print(\"pdf     =%.6f\" % PDF)\n    # by the finite difference technique from CDF\n    print(\"pdf (FD)=%.6f\" % ((distribution.computeCDF(point + NumericalPoint(1, eps)) -\n                              distribution.computeCDF(point + NumericalPoint(1, -eps))) / (2.0 * eps)))\n\n    # derivative of the PDF with regards the parameters of the distribution\n    CDF = distribution.computeCDF(point)\n    print(\"cdf=%.6f\" % CDF)\n    CCDF = distribution.computeComplementaryCDF(point)\n    print(\"ccdf=%.6f\" % CCDF)\n    CF = distribution.computeCharacteristicFunction(point[0])\n    print(\"characteristic function=(%.6f+%.6fj)\" % (CF.real, CF.imag))\n    ## PDFgr = distribution.computePDFGradient( point )\n    # print \"pdf gradient     =\" , repr(PDFgr)\n    # by the finite difference technique\n    ## PDFgrFD = NumericalPoint(2)\n    ## PDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computePDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computePDF(point)) / (2.0 * eps)\n    ## PDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computePDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computePDF(point)) / (2.0 * eps)\n    # print \"pdf gradient (FD)=\" , repr(PDFgrFD)\n\n    # derivative of the PDF with regards the parameters of the distribution\n    ## CDFgr = distribution.computeCDFGradient( point )\n    # print \"cdf gradient     =\" , repr(CDFgr)\n    ## CDFgrFD = NumericalPoint(2)\n    ## CDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computeCDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computeCDF(point)) / (2.0 * eps)\n    ## CDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computeCDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computeCDF(point)) / (2.0 * eps)\n    # print \"cdf gradient (FD)=\",  repr(CDFgrFD)\n\n    # quantile\n    quantile = distribution.computeQuantile(0.95)\n    print(\"quantile=\", repr(quantile))\n    print(\"cdf(quantile)=%.6f\" % distribution.computeCDF(quantile))\n    mean = distribution.getMean()\n    print(\"mean=\", repr(mean))\n    standardDeviation = distribution.getStandardDeviation()\n    print(\"standard deviation=\", repr(standardDeviation))\n    skewness = distribution.getSkewness()\n    print(\"skewness=\", repr(skewness))\n    kurtosis = distribution.getKurtosis()\n    print(\"kurtosis=\", repr(kurtosis))\n    covariance = distribution.getCovariance()\n    print(\"covariance=\", repr(covariance))\n    parameters = distribution.getParametersCollection()\n    print(\"parameters=\", repr(parameters))\n    for i in range(6):\n        print(\"standard moment n=\", i, \" value=\",\n              distribution.getStandardMoment(i))\n    print(\"Standard representative=\", distribution.getStandardRepresentative())\n\nexcept:\n    import sys\n    print(\"t_FisherSnedecor_std.py\", sys.exc_info()[0], sys.exc_info()[1])\n\n```\n"
    },
    {
        "generated": "```python\ndef caesar_cipher(text, shift):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\ndef main():\n    text = input(\"Enter the string to encrypt: \")\n    shift = int(input(\"Enter the secret key: \"))\n    encrypted_text = caesar_cipher(text, shift)\n    print(f\"Encrypted text: {encrypted_text}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport base64\n\ndef encrypt(key, string):\n    enc = []\n    for i in range(len(string)):\n        key_c = key[i % len(key)]\n        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)\n        enc.append(enc_c)\n    return base64.urlsafe_b64encode(\"\".join(enc).encode()).decode()\n\nencrypted_string = encrypt(secret_key, string)\nprint(encrypted_string)\n```\n"
    },
    {
        "generated": "```python\ndef greatest_of_three(a, b, c):\n    return max(a, b, c)\n\na = 10\nb = 20\nc = 30\n\nprint(\"The greatest of\", a, \", \", b, \", and\", c, \"is\", greatest_of_three(a, b, c))\n```",
        "target": "```python\ndef get_max(x, y, z):\n    if (x > y) and (x > z):\n        maximum = x\n    elif (y > x) and (y > z):\n        maximum = y\n    else:\n        maximum = z\n\n    return maximum\n\nresult = get_max(2, 4, 3)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nclass Node:\n    def __init__(self, value, priority):\n        self.value = value\n        self.priority = priority\n\nclass PriorityQueue:\n    def __init__(self):\n        self.queue = []\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def insert(self, value, priority):\n        new_node = Node(value, priority)\n        self.queue.append(new_node)\n\n    def extract_min(self):\n        if self.is_empty():\n            return None\n        min_node = self.queue[0]\n        min_index = 0\n        for i in range(1, len(self.queue)):\n            if self.queue[i].priority < min_node.priority:\n                min_node = self.queue[i]\n                min_index = i\n        self.queue.pop(min_index)\n        return min_node.value\n\n    def print_queue(self):\n        for node in self.queue:\n            print(f\"Value: {node.value}, Priority: {node.priority}\")\n\n# Example usage\npq = PriorityQueue()\npq.insert(\"Task 1\", 3)\npq.insert(\"Task 2\", 1)\npq.insert(\"Task 3\", 2)\n\nwhile not pq.is_empty():\n    print(pq.extract_min())\n```",
        "target": "```python\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def is_empty(self):\n        return len(self.queue) == []\n    \n    def insert(self, data):\n        self.queue.append(data)\n    \n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n```\n"
    },
    {
        "generated": "```python\ndef is_armstrong(n):\n    return n == sum(int(digit) ** len(str(n)) for digit in str(n))\n\n# Test the function\nfor i in range(1, 1000):\n    if is_armstrong(i):\n        print(i)\n```",
        "target": "```python\ndef is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** order\n        temp //= 10\n\n    if sum == num:\n        return True\n    else:\n        return False\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef build_web_spider(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all links on the page\n    links = [a.get('href') for a in soup.find_all('a') if a.get('href')]\n\n    # Extract all images on the page\n    images = [img.get('src') for img in soup.find_all('img') if img.get('src')]\n\n    # Extract all paragraphs on the page\n    paragraphs = [p.text for p in soup.find_all('p')]\n\n    # Print the extracted data\n    print(\"Links:\")\n    for link in links:\n        print(link)\n\n    print(\"\\nImages:\")\n    for image in images:\n        print(image)\n\n    print(\"\\nParagraphs:\")\n    for paragraph in paragraphs:\n        print(paragraph)\n\n# Usage\nurl = \"http://example.com\"\nbuild_web_spider(url)\n```",
        "target": "```python\nimport requests\nimport re\n\nurl = \"https://www.example.com\"\nr  = requests.get(url)\ndata = r.text\n\n# Find all the links on the page\nlinks = re.findall(r'<a class=\"linkClass\" href=\"(.*?)\">', data)\n\n# Print the links\nfor link in links:\n    full_url = url + link\n    print(full_url)\n```\n"
    },
    {
        "generated": "```python\nfrom statistics import mean, median, mode\nfrom typing import Union\n\ndef calculate_statistics(array: list, mode_type: str ='mean') -> Union[float, int, list]:\n    \"\"\"\n    Calculate the mean, median and mode of a given array.\n\n    Args:\n    array (list): The input array.\n    mode_type (str, optional): The type of statistics to calculate. Defaults to'mean'.\n\n    Returns:\n    Union[float, int, list]: The calculated statistics.\n    \"\"\"\n    \n    # Check if the input is a list\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the input list is empty\n    if len(array) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Calculate the mean\n    mean_value = mean(array)\n    \n    # Calculate the median\n    median_value = median(array)\n    \n    # Calculate the mode\n    mode_value = mode(array)\n    \n    # Return the calculated statistics\n    if mode_type =='mean':\n        return mean_value\n    elif mode_type =='median':\n        return median_value\n    elif mode_type =='mode':\n        return mode_value\n    else:\n        raise ValueError(\"Invalid mode type. Please choose'mean','median', or'mode'.\")\n\n# Example usage\narray = [1, 2, 2, 3, 3, 3]\nprint(calculate_statistics(array, mode_type='mode'))\nprint(calculate_statistics(array, mode_type='mean'))\nprint(calculate_statistics(array, mode_type='median'))\n```",
        "target": "```python\ndef calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum / len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n else:\n median = arr[int(len(arr) / 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]\n```\n"
    },
    {
        "generated": "```python\ndef bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1] :\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\ndef selection_sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i-1\n        while j >= 0 and key < lst[j]:\n            lst[j + 1] = lst[j]\n            j -= 1\n        lst[j + 1] = key\n    return lst\n\ndef merge_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    mid = len(lst) // 2\n    left_half = merge_sort(lst[:mid])\n    right_half = merge_sort(lst[mid:])\n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] <= right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n    merged += left[left_index:]\n    merged += right[right_index:]\n    return merged\n\ndef quick_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    pivot = lst[0]\n    less = [x for x in lst[1:] if x <= pivot]\n    greater = [x for x in lst[1:] if x > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\ndef radix_sort(lst):\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n      buckets = [list() for _ in range(RADIX)]\n      for i in lst:\n        tmp = int((i / placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range(RADIX):\n        buck = buckets[b]\n        for i in buck:\n          lst[a] = i\n          a += 1\n      placement = placement * RADIX\n    return lst\n\ndef optimized_sort(lst, sort_type):\n    if sort_type == 'bubble':\n        return bubble_sort(lst)\n    elif sort_type =='selection':\n        return selection_sort(lst)\n    elif sort_type == 'insertion':\n        return insertion_sort(lst)\n    elif sort_type =='merge':\n        return merge_sort(lst)\n    elif sort_type == 'quick':\n        return quick_sort(lst)\n    elif sort_type == 'radix':\n        return radix_sort(lst)\n    else:\n        raise ValueError(\"Invalid sort type\")\n\n# Example usage:\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nprint(optimized_sort(numbers,'merge'))\n```",
        "target": "```python\ndef sort_list(arr):\n    # Insertion sort algorithm\n    for i in range(1, len(arr)):\n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr[j+1] = key \n    return arr\n\nsorted_arr = sort_list([3, 9, 1, 4, 5])\n```\n"
    },
    {
        "generated": "```python\n# lst = [1, 2, 3, 4, 5]  # example input\n# print(lst.pop())  # example output\n```",
        "target": "```python\ndef remove_last_element(lst):\n    last_index = len(lst) - 1\n    del lst[last_index]\n\nexample_list = [3, 1, 5, 7, 4, 8, 2]\nremove_last_element(example_list)\nprint(example_list) \n# Output: [3, 1, 5, 7, 4, 8]\n```\n"
    },
    {
        "generated": "```python\ndef find_pairs(numbers, target):\n    num_set = set(numbers)\n    pairs = set()\n    for num in num_set:\n        complement = target - num\n        if complement in num_set and complement!= num:\n            pairs.add((min(num, complement), max(num, complement)))\n        elif complement == num:\n            pairs.add((complement, num))\n    return list(pairs)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 10\nprint(find_pairs(numbers, target))\n```",
        "target": "```python\ndef two_sum(arr, target):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == target):\n                result.append((arr[i], arr[j]))\n    return result\n\nresult = two_sum([8, 3, 10, 5], 13)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nfrom collections import Counter\n\ndef most_frequent_chars(input_str):\n    # Remove spaces and convert to lower case\n    cleaned_str = input_str.replace(\" \", \"\").lower()\n    \n    # Count the frequency of each character\n    char_count = Counter(cleaned_str)\n    \n    # Find the most common character\n    most_common = char_count.most_common(1)\n    \n    return most_common\n\n# Test the function\ninput_str = input(\"Enter a string: \")\nresult = most_frequent_chars(input_str)\n\nif result:\n    print(f\"The most frequently occurring character is: {result[0][0]} with a frequency of {result[0][1]}\")\nelse:\n    print(\"No characters found.\")\n```",
        "target": "```python\nstring = \"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\"\n\n# Create an empty dictionary  \nfreq = {} \n  \n# Loop through the string and populate the dictionary  \nfor i in string:\n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Get the most frequently occurring character \nmax_freq = 0\nfor key, value in freq.items(): \n    if value > max_freq: \n        max_freq = value \n        max_char = key\n\n# Print the most frequent character  \nprint(\"The most frequent character is '\" + max_char + \"' and it occurred \" + str(max_freq) + \" times.\")\n```\n"
    },
    {
        "generated": "```python\ndef reverse_list(input_list):\n    return input_list[::-1]\n\n# Test the function\ninput_list = [1, 2, 3, 4, 5]\nprint(reverse_list(input_list))\n```",
        "target": "```python\nlst.reverse()\nprint(lst)  #output: [5,4,3,2,1]\n```\n"
    },
    {
        "generated": "```python\n# [squares for square in range(1, 6)]\n```",
        "target": "```python\nlst=[x**2 for x in range(1,6)]\n```\n"
    },
    {
        "generated": "```python\ndef print_pascal_triangle(n):\n    triangle = [[1 for _ in range(i+1)] for i in range(n)]\n    for i in range(2, n):\n        for j in range(1, i):\n            triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j]\n    for row in triangle:\n        print(' '.join(str(num) for num in row))\n\n# Example usage\nn = 10\nprint_pascal_triangle(n)\n```",
        "target": "```python\ndef pascal_triangle(n): \n    # Two empty lists to store the previous and current row \n    prev_row = []     \n    curr_row = []     \n  \n    # Looping through the rows \n    for i in range(n): \n          \n        # Reseting the curr_row for each row \n        curr_row = [] \n          \n        # Looping through columns \n        for j in range(i + 1): \n              \n            # Handling edges of the pascal's triangle \n            if j == 0 or j == i:  \n                curr_row.append(1) \n            else: \n                curr_row.append(prev_row[j] + prev_row[j - 1])  \n          \n        # Printing the current row  \n        print(curr_row)  \n          \n        # Setting the current row as the previous row before moving to the next row. \n        prev_row = curr_row  \n        \n\n# call the pascal triangle function \nn = 5\npascal_triangle(n)\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_random_string(length):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n\nprint(generate_random_string(5))\n```",
        "target": "```python\nimport string\nimport random\n\ndef generate_random_string(length=5):\n  letters = string.ascii_letters + string.digits\n  return ''.join(random.choice(letters) for _ in range(length))\n```\n"
    },
    {
        "generated": "```python\n# Define a function to check if a number is prime\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function to generate prime numbers up to a given limit\ndef generate_primes(limit):\n    \"\"\"Generate prime numbers up to a given limit.\"\"\"\n    primes = []\n    for num in range(2, limit + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n# Example usage: generate prime numbers up to 100\nlimit = 100\nprimes = generate_primes(limit)\nprint(primes)\n```",
        "target": "```python\ndef longest_increasing_subsequence(nums):\n    # Dynamic programming approach \n    # to maintain a list of increasing subsequences \n    # with their respective lengths \n    subseq_lengths = [1 for _ in range(len(nums))] \n      \n    # Traverse through pairs of numbers to find sequences \n    for i in range(1, len(nums)): \n        for j in range(0, i): \n            if nums[i] > nums[j] and subseq_lengths[i] < subseq_lengths[j] + 1: \n                subseq_lengths[i] = subseq_lengths[j]+1\n  \n    # Return the maximum length of increasing subsequence\n    return max(subseq_lengths)\n```\n"
    },
    {
        "generated": "```python\ndef flatten_array(array):\n    return [item for sublist in array for item in sublist]\n\n# Test the function\nprint(flatten_array([[1, 2, 3], [4, 5, 6]]))  # Output: [1, 2, 3, 4, 5, 6]\n```",
        "target": "```python\ndef flatten(arr):\n  flat_list = []\n  for sublist in arr:\n    for item in sublist:\n      flat_list.append(item)\n  return flat_list\n\nflatten(array)\n```\n"
    },
    {
        "generated": "```python\n# Create a dictionary mapping month names to their corresponding number of days\nmonth_days = {\n    'January': 31,\n    'February': 28,\n    'March': 31,\n    'April': 30,\n    'May': 31,\n    'June': 30,\n    'July': 31,\n    'August': 31,\n    'September': 30,\n    'October': 31,\n    'November': 30,\n    'December': 31\n}\n\n# Function to get the number of days in a month\ndef get_days_in_month(month):\n    return month_days[month.title()]\n\n# Main program\ndef main():\n    month = input(\"Enter the month: \")\n    days_in_month = get_days_in_month(month)\n    print(f\"The number of days in {month} is: {days_in_month}\")\n\n# Run the main program\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\ndef num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))\n```\n"
    },
    {
        "generated": "```python\nimport datetime\n\n# code\nnow = datetime.datetime.now()\nprint(\"Current Date and Time: \", now)\n```",
        "target": "```python\nimport datetime\n\nnow = datetime.datetime.now()\nprint(now)\n```\n"
    },
    {
        "generated": "```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\n# Test the function\nnumbers = [6, 9, 3, 1, 8, 4, 2, 5, 7]\nprint(quicksort(numbers))\n```",
        "target": "```python\ndef quickSort(arr): \n\tif len(arr) <= 1:\n\treturn arr \n\telse: \n\t\tpivot = arr[0] \n\t\tlessThanPivot = [number for number in arr[1:] if number <= pivot] \n\t\tmoreThanPivot = [number for number in arr[1:] if number > pivot] \n\t\treturn quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n\narr = [3, 8, 6, 10, 11, 4] \nprint(quickSort(arr))\n```\n"
    },
    {
        "generated": "```python\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\ndef analyze_sentiment(sentence):\n    nltk.download('vader_lexicon')\n    sia = SentimentIntensityAnalyzer()\n    sentiment_scores = sia.polarity_scores(sentence)\n    compound_score = sentiment_scores['compound']\n    if compound_score >= 0.05:\n        return \"Positive\"\n    elif compound_score <= -0.05:\n        return \"Negative\"\n    else:\n        return \"Neutral\"\n\n# Example usage\nprint(analyze_sentiment(\"I love this product!\"))  # Positive\nprint(analyze_sentiment(\"This product is okay.\"))  # Neutral\nprint(analyze_sentiment(\"I hate this product!\"))  # Negative\n```",
        "target": "```python\nimport textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\"\n```\n"
    },
    {
        "generated": "```python\n# Importing necessary libraries\nimport random\n\n# Defining a class for the chatbot\nclass Chatbot:\n    def __init__(self):\n        self.greetings = [\"Hello\", \"Hi\", \"Hey\", \"Hey there\"]\n        self.responses = [\"How are you?\", \"What's up?\", \"I'm good, thanks!\", \"I'm just a chatbot, I don't have feelings.\"]\n        self.puns = [\"I'm punderful!\", \"I'm feline fine, thanks!\", \"I'm having a whale of a time!\", \"I'm bear-ly functioning today!\"]\n\n    # Method to handle greetings\n    def handle_greeting(self, message):\n        for greeting in self.greetings:\n            if greeting in message.lower():\n                return random.choice(self.responses)\n        return \"I didn't quite catch that. Can you please rephrase?\"\n\n    # Method to handle puns\n    def handle_pun(self, message):\n        for pun in self.puns:\n            if pun in message.lower():\n                return random.choice(self.puns)\n        return \"I didn't quite catch that. Can you please rephrase?\"\n\n    # Main loop to handle user input\n    def chat(self):\n        while True:\n            user_input = input(\"You: \")\n            if user_input.lower() == \"quit\":\n                break\n            response = self.handle_greeting(user_input)\n            if response == \"I didn't quite catch that. Can you please rephrase?\":\n                response = self.handle_pun(user_input)\n            print(\"Chatbot:\", response)\n\n# Creating an instance of the chatbot\nchatbot = Chatbot()\nchatbot.chat()\n```",
        "target": "```python\nimport re #importing library for regular expressions\n\nuser_input = \"\" #Initializing user_input\n\nwhile user_input != \"exit\": \n    user_input = input(\"Type your message: \")\n    if re.search(\"hi|hello\", user_input): #Using regural expressions to make the chatbot response to greetings\n        print(\"Hello, I am a chatbot. How can I help you?\")\n    else:\n        print(\"Sorry, I don't understand.\")\n```\n"
    },
    {
        "generated": "```python\ndef square_number(n):\n    return n ** 2\n\n# Test the function\nprint(square_number(5))  # Output: 25\n```",
        "target": "```python\ndef square(number):\n \u00a0 \u00a0return number * number\n```\n"
    },
    {
        "generated": "```python\nimport json\n\n# input dictionary\ninput_dict = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# convert dictionary to JSON string\njson_string = json.dumps(input_dict)\n\n# print the JSON string\nprint(json_string)\n```",
        "target": "```python\n{\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}\n```\n"
    },
    {
        "generated": "```python\ndef convert_for_to_while(code):\n    while_lines = []\n    for_lines = code.split('\\n')\n    for i, line in enumerate(for_lines):\n        if line.strip().startswith('for'):\n            var_name = line.split('=')[0].split('in')[-1].strip()\n            condition = line.split('=')[1].strip()\n            start_value = for_lines[i+1].split('=')[0].strip()\n            end_value = for_lines[i+2].split('=')[0].strip()\n            while_lines.append(f'while {condition} and {var_name} < {end_value}:')\n            while_lines.append(f'    # {line.strip()}\\n')\n            while_lines.append(f'    {var_name} += 1\\n')\n            while_lines.append(f'    # {for_lines[i+1].strip()}\\n')\n            while_lines.append(f'    # {for_lines[i+2].strip()}\\n')\n            while_lines.append(f'    # {code.split('\\n')[i+3].strip()}')\n        else:\n            while_lines.append(line)\n    return '\\n'.join(while_lines)\n\n# code\n```",
        "target": "```python\ni = 0 \nwhile i < 3: \n    print(i) \n    i += 1\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\nn = 15\nprint(fibonacci(n))\n```",
        "target": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\nfibonacci(15)\n```\n"
    },
    {
        "generated": "```python\nclass SumClass:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def calculate_sum(self):\n        return self.num1 + self.num2\n```",
        "target": "```python\nclass Summation:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2\n\ntotal = Summation(5, 10).get_sum()\nprint(total)\n```\n"
    },
    {
        "generated": "```python\ndef find_max(lst):\n    return max(lst)\n\n# Example usage:\nnumbers = [12, 45, 7, 23, 56, 89, 34]\nprint(find_max(numbers))\n```",
        "target": "```python\nmax_value = 0\n\nfor value in [1,5,2,3,8,9]:\n    if value > max_value:\n    max_value = value\n\nprint(max_value) # Output: 9\n```\n"
    },
    {
        "generated": "```python\ndef sort_numbers(numbers):\n    return sorted(numbers)\n\n# Example usage:\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nsorted_numbers = sort_numbers(numbers)\nprint(sorted_numbers)\n```",
        "target": "```python\ndef sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([2, 4, 5, 1, 3])\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nclass Car:\n    def __init__(self, make, model, year, color, mileage=0):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n\n    def drive(self, miles):\n        self.mileage += miles\n\n    def describe_car(self):\n        print(f\"This car is a {self.year} {self.color} {self.make} {self.model} with {self.mileage} miles.\")\n```",
        "target": "```python\nclass Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage\n```\n"
    },
    {
        "generated": "```python\ndef extract_words_starting_with_letter(text, letter):\n    words = text.split()\n    result = [word for word in words if word[0].lower() == letter.lower()]\n    return result\n\ntext = input(\"Enter the text: \")\nletter = input(\"Enter the letter: \")\nresult = extract_words_starting_with_letter(text, letter)\n\nprint(\"Words starting with the letter '{}':\".format(letter))\nfor word in result:\n    print(word)\n```",
        "target": "```python\n\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))\n```\n"
    },
    {
        "generated": "```python\ndef calculate_average_age(people):\n    ages = [person['age'] for person in people]\n    return sum(ages) / len(ages)\n\n# Example usage:\npeople = [\n    {'name': 'Alice', 'age': 25},\n    {'name': 'Bob', 'age': 30},\n    {'name': 'Charlie', 'age': 35}\n]\naverage_age = calculate_average_age(people)\nprint(f'The average age of the group is {average_age}')\n```",
        "target": "```python\ntotal_age = 0\n\nfor person in people:\n    total_age += int(person[1])\n\naverage_age = total_age / len(people)\n\nprint(f\"The average age of the group is {average_age}\")\n\n# Optimized version\n\ntotal_age = sum([int(person[1]) for person in people])\naverage_age = total_age / len(people)\n\nprint(f\"The average age of the group is {average_age}\")\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value)\n\n# Example usage:\nmin_value = 1\nmax_value = 100\nrandom_number = generate_random_number(min_value, max_value)\nprint(random_number)\n```",
        "target": "```python\nimport random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))\n```\n"
    },
    {
        "generated": "```python\n# def intersection(list1, list2):\n#     return [value for value in list1 if value in list2]\n\n# def intersection(list1, list2):\n#     return [value for value in list1 if value in list2]\n\n# def intersection(list1, list2):\n#     return [value for value in list1 if value in list2]\n\ndef intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    print(intersection(list1, list2))\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    print(intersection(list1, list2))\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in list2]\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    return [value for value in list1 if value in",
        "target": "```python\nlist1 = [2, 3, 4] \nlist2 = [3, 5, 6, 4]\n\n# create a set of elements in list1\ns1 = set(list1)\n\n# create a set of elements in list2\ns2 = set(list2)\n\n# find the intersection \nintersection = s1.intersection(s2)\n\n# print the intersection \nprint(intersection) \n# prints {3, 4}\n```\n"
    },
    {
        "generated": "```python\n# dict = {}\n# for i in range(10):\n#     dict[i] = i * 10\n# print(dict)\n```",
        "target": "```python\nmy_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six',\n           7:'seven', 8:'eight', 9:'nine', 10:'ten'}\n\nfor key, value in my_dict.items():\n   print(key, '->', value)\n```\n"
    },
    {
        "generated": "```python\n# Define a function to replace words with their first letter\ndef replace_words_with_first_letter(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Use list comprehension to replace each word with its first letter\n    replaced_words = [word[0] for word in words]\n    \n    # Join the replaced words back into a sentence\n    replaced_sentence =''.join(replaced_words)\n    \n    return replaced_sentence\n\n# Test the function with a sample sentence\nsentence = \"Hello World this is Python\"\nprint(replace_words_with_first_letter(sentence))\n```",
        "target": "```python\ndef replace_with_first_letter(sentence):\n    words = sentence.split()\n    result = [word[0] for word in words]\n    return ''.join(result)\n\nprint(replace_with_first_letter(\"Hello World\")) # Output: HW\n```\n"
    },
    {
        "generated": "```python\n# Import necessary libraries\nimport re\nfrom collections import Counter\n\n# Function to generate the dictionary of most frequently used words\ndef most_frequent_words(sentence):\n    # Convert the sentence to lower case and remove punctuation\n    sentence = re.sub(r'[^\\w\\s]', '', sentence.lower())\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Return the dictionary of word frequencies\n    return dict(word_counts)\n\n# Example usage\nsentence = \"This is a test sentence, and this is another test sentence.\"\nprint(most_frequent_words(sentence))\n```",
        "target": "```python\nfreq_words_dict = {\n    'python': 2,\n    'is': 1,\n    'an': 1,\n    'interpreted': 1,\n    'high-level': 1,\n    'general-purpose': 1,\n    'programming': 1,\n    'language': 1\n}\n```\n"
    },
    {
        "generated": "```python\nimport itertools\n\ndef print_permutations(s):\n    perms = [''.join(p) for p in itertools.permutations(s)]\n    for perm in perms:\n        print(perm)\n\n# Example usage:\nprint_permutations('abc')\n```",
        "target": "```python\ndef permutations(string): \n    if string == \"\": \n        return [''] \n          \n    prev_list = permutations(string[1:]) \n    next_list = [] \n    char = string[0] \n    for word in prev_list: \n        for j in range(len(word) + 1): \n            next_list.append(word[:j] + char + word[j:]) \n    return next_list \n\nstring = \"abc\"\nperm_list = permutations(string) \nprint (perm_list)\n```\n"
    },
    {
        "generated": "```python\nclass SmartSearchEngine:\n    def __init__(self, index):\n        self.index = index\n\n    def search(self, query):\n        # Tokenize the query\n        query_tokens = query.lower().split()\n\n        # Find the most relevant result\n        result = max(self.index, key=lambda x: sum(1 for token in query_tokens if token in x))\n\n        return result\n\nclass Index:\n    def __init__(self, documents):\n        self.documents = documents\n\n    def __getitem__(self, index):\n        return self.documents[index]\n\ndef load_documents(documents_path):\n    with open(documents_path, 'r') as file:\n        return file.read().split('\\n\\n')\n\ndef main():\n    documents = load_documents('documents.txt')\n    index = Index(documents)\n\n    query = input('Enter your query: ')\n    engine = SmartSearchEngine(index)\n    result = engine.search(query)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http://search-engine.com/api/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming')\n```\n"
    },
    {
        "generated": "```python\ndef unique_elements(input_list):\n    return list(set(input_list))\n\n# Test the function\ninput_list = [1, 2, 2, 3, 4, 4, 5, 6, 6]\nprint(unique_elements(input_list))\n```",
        "target": "```python\nlist_x = [1, 1, 2, 3, 4, 5, 5]\nunique_elements = set(list_x)\nprint(unique_elements) #output: {1, 2, 3, 4, 5}\n```\n"
    },
    {
        "generated": "```python\n# Import the pandas library for data manipulation\nimport pandas as pd\n\n# Define a function to print the top 5 values in a data set\ndef print_top_values(data):\n    # Sort the data in descending order\n    sorted_data = data.sort_values(by='value', ascending=False)\n    \n    # Select the top 5 values\n    top_5_values = sorted_data.head(5)\n    \n    # Print the top 5 values\n    print(top_5_values)\n\n# Read in the data set from the user\ndata = pd.read_csv(input(\"Enter the data set (comma-separated values): \"))\n\n# Print the top 5 values in the data set\nprint_top_values(data)\n```",
        "target": "```python\ndata = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]\n\ndef get_top_five_values(data):\n    sorted_data = sorted(data, reverse=True)\n    top_five_values = sorted_data[:5]\n    return top_five_values\n\ntop_five_values = get_top_five_values(data)\nprint(top_five_values)\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_rmse(list1, list2):\n    # Calculate the mean of the lists\n    mean1 = sum(list1) / len(list1)\n    mean2 = sum(list2) / len(list2)\n\n    # Calculate the squared differences\n    squared_diffs = [(a - b) ** 2 for a, b in zip(list1, list2)]\n\n    # Calculate the mean of the squared differences\n    mean_squared_diff = sum(squared_diffs) / len(squared_diffs)\n\n    # Calculate the root mean squared error\n    rmse = math.sqrt(mean_squared_diff)\n\n    return rmse\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]\nprint(calculate_rmse(list1, list2))\n```",
        "target": "```python\ndef rmse(A, B):\n   \"\"\" \n   Calculates the root mean square error between two given lists of numbers. \n   \"\"\"\n   RMSE = 0\n   for i,j in zip(A,B):\n       RMSE += (i-j)**2\n   return (RMSE/len(A))**(1/2)\n\n\nif __name__ == '__main__':\n   A = [2.2, 3.07, 3.68, 1.33] \n   B = [1.17, 2.47, 2.57, 0.0]\n   print(rmse(A, B))\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndef kmeans_clustering(data, k):\n    model = KMeans(n_clusters=k)\n    model.fit(data)\n    labels = model.labels_\n    return labels\n\n# Example usage\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndata = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nk = 2\n\nlabels = kmeans_clustering(data, k)\n\n# Visualize the clusters\nplt.scatter(data[:, 0], data[:, 1], c=labels)\nplt.show()\n```",
        "target": "```python\n# Import KMeans\nfrom sklearn.cluster import KMeans\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=3, random_state=0)\n\n# Train the model\nkmeans.fit(X)\n\n# Get the labels\nlabels = kmeans.labels_\n\n# Get the cluster centroids\ncentroids = kmeans.cluster_centers_\n```\n"
    },
    {
        "generated": "```python\nclass Node:\n    def __init__(self, value, next=None):\n        self.value = value\n        self.next = next\n\ndef contains_value(head, value):\n    current = head\n    while current:\n        if current.value == value:\n            return True\n        current = current.next\n    return False\n```",
        "target": "```python\ndef contains(head, value):\n current = head\n while current is not None:\n if current.data == value:\n return True\n current = current.next\n return False\n\nhead = Node(4)\nhead.next = Node(8)\nhead.next.next = Node(15)\nhead.next.next.next = Node(16)\nhead.next.next.next.next = Node(23)\nhead.next.next.next.next.next = Node(42) \n\nval = 15\n\nprint(contains(head, val))\n# Output : True\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\nfrom datetime import datetime\n\ndef generate_random_string(length):\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters_and_digits) for _ in range(length))\n\ndef generate_html_table(rows, cols):\n    html = \"<html><body><table>\"\n    for _ in range(rows):\n        html += \"<tr>\"\n        for _ in range(cols):\n            html += f\"<td>{generate_random_string(10)}</td>\"\n        html += \"</tr>\"\n    html += \"</table></body></html>\"\n    return html\n\nrows = 3\ncols = 2\nhtml_table = generate_html_table(rows, cols)\nprint(html_table)\n```",
        "target": "```python\nimport random\n\nHTML = '<html>\\n<head>\\n<title>Random Table</title>\\n</head>\\n<body>\\n<table>\\n'\n\nfor row_num in range(0,3):\n    HTML += ' <tr>\\n'\n    for column_num in range(0,2):\n        HTML += '  <td>{}</td>\\n'.format(random.randint(0, 10))\n    HTML += ' </tr>\\n'\n\nHTML += '</table>\\n</body>\\n</html>'\n\nprint(HTML)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"Input should be positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(1, int(input(\"Enter the value of n: \"))+1):\n    print(fibonacci(i))\n```",
        "target": "```python\ndef fibonacci_series(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci_series(n-1)+fibonacci_series(n-2) \n\nprint(fibonacci_series(10))\n```\n"
    },
    {
        "generated": "```python\ndef caesar_cipher(text, shift):\n    result = \"\"\n\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n\n    return result\n\n# Test the function\nprint(caesar_cipher(\"Hello, World!\", 3))\n```",
        "target": "```python\ndef caesar_cipher(input_string, shift):\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    output_string = ''\n\n    for char in input_string:\n        if char in alphabet:\n            char_index = alphabet.find(char)\n            new_char_index = char_index + shift\n            output_string += alphabet[new_char_index % len(alphabet)]\n        else:\n            output_string += char\n\n    return output_string\n```\n"
    },
    {
        "generated": "```python\nimport secrets\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(secrets.choice(characters) for i in range(length))\n    return password\n\nlength = int(input(\"Enter the length of the password: \"))\nprint(generate_password(length))\n```",
        "target": "```python\nimport random\nimport string\n\ndef generate_pass(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\npassword = generate_pass()\nprint(password)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_reviews(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    reviews = soup.find_all('div', class_='review')\n    review_texts = [review.get_text() for review in reviews]\n    return review_texts\n\nurl = 'https://example.com/reviews'  # replace with the actual URL\nreview_texts = scrape_reviews(url)\nfor review in review_texts:\n    print(review)\n```",
        "target": "```python\n\"\"\"\nScrape the text content from all reviews on a web page \n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_reviews(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'lxml')\n    reviews = soup.find_all('div', class_='review')\n    for review in reviews:\n        text = review.find('p').string\n        author = review.find('h4').string\n        print(text, author)\n\nif __name__ == '__main__':\n    fetch_reviews('example.com/reviews')\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport numpy as np\nimport operator\nimport itertools\n\ndef fitness(individual):\n    # Define the objective function\n    def func(x):\n        return sum(x)\n\n    # Calculate the fitness\n    score = func(individual)\n    return score\n\ndef mutate(individual):\n    # Perform mutation\n    index = random.randint(0, len(individual) - 1)\n    individual[index] = random.randint(0, 10)\n    return individual\n\ndef crossover(parent1, parent2):\n    # Perform crossover\n    child = parent1[:len(parent1)//2] + parent2[len(parent2)//2:]\n    return child\n\ndef genetic_algorithm(population_size, mutation_rate, generations):\n    # Initialize the population\n    population = [list(map(int, random.choices(range(11), k=len(range(11)))))) for _ in range(population_size)]\n\n    for _ in range(generations):\n        # Evaluate the fitness of each individual\n        scores = [fitness(individual) for individual in population]\n\n        # Select the fittest individuals\n        fittest = np.array(population)[np.argsort(scores)][-int(population_size/2):]\n\n        # Create a new population through crossover and mutation\n        new_population = []\n        while len(new_population) < population_size:\n            parent1 = random.choice(fittest)\n            parent2 = random.choice(fittest)\n            if parent1 == parent2:\n                parent2 = random.choice(fittest)\n            child = crossover(parent1, parent2)\n            child = mutate(child)\n            new_population.append(child)\n\n        # Replace the old population with the new one\n        population = new_population\n\n    # Return the fittest individual\n    scores = [fitness(individual) for individual in population]\n    return population[np.argsort(scores)][-1]\n\n# Example usage:\npopulation_size = 100\nmutation_rate = 0.01\ngenerations = 1000\nresult = genetic_algorithm(population_size, mutation_rate, generations)\nprint(result)\n```",
        "target": "```python\nimport random\nimport numpy as np\n\n# Define the cost function\ndef cost(x):\n return x**2\n \n# Initialize the population\npopulation_size = 20\npopulation = [random.randint(0, 100) for _ in range(population_size)]\n\n# Perform the optimization\nmax_generation = 100\nfor _ in range(max_generation):\n # Calculate the fitness\n fitness = [cost(x) for x in population]\n \n # Select the fittest individuals\n fittest_individuals = np.argsort(fitness)[::-1][:int(population_size/2)]\n \n # Generate the new population\n new_population = []\n for individual in fittest_individuals:\n  new_population.append(population[individual])\n  new_population.append(population[individual] + random.randint(-5, 5))\n population = new_population\n \n# Print the result\nprint(population)\n```\n"
    },
    {
        "generated": "```python\ndef has_unique_chars(s):\n    return len(s) == len(set(s))\n```",
        "target": "```python\ndef check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\n# Example usage:\nn = 10  # change this to generate a different number of Fibonacci numbers\nresult = fibonacci(n)\nprint(result)\n```",
        "target": "```python\ndef generate_fibonacci_sequence(N):\n    '''\n    This program takes in an integer N and returns the first N elements of the Fibonacci sequence\n    '''\n    \n    fibonacci_sequence = []\n    \n    if N < 1:\n        return fibonacci_sequence\n    elif N == 1:\n        fibonacci_sequence = [1]\n        return fibonacci_sequence\n    else:\n        fibonacci_sequence = [1,1]\n        for i in range(2,N):\n            fibonacci_sequence.append(fibonacci_sequence[i-2]+fibonacci_sequence[i-1]) \n            \n    return fibonacci_sequence\n \nprint(generate_fibonacci_sequence(10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n```\n"
    },
    {
        "generated": "```python\n# Import the Flask framework\nfrom flask import Flask, request, jsonify\n# Import the SQLAlchemy library to interact with the database\nfrom flask_sqlalchemy import SQLAlchemy\n# Import the Flask-Marshmallow library to serialize and deserialize data\nfrom flask_marshmallow import Marshmallow\n\n# Create a new Flask application\napp = Flask(__name__)\n# Define the database connection URL\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:////tmp/test.db'\n# Create a new SQLAlchemy instance\ndb = SQLAlchemy(app)\n# Create a new Marshmallow instance\nma = Marshmallow(app)\n\n# Define a new record model\nclass Record(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(100), nullable=False)\n\n# Define a new record schema\nclass RecordSchema(ma.SQLAlchemySchema):\n    class Meta:\n        model = Record\n\n# Create a new route to create a new record\n@app.route('/create', methods=['POST'])\ndef create_record():\n    data = request.json\n    new_record = Record(name=data['name'], email=data['email'])\n    db.session.add(new_record)\n    db.session.commit()\n    return jsonify({'message': 'Record created successfully'}), 201\n\n# Create a new route to read all records\n@app.route('/read', methods=['GET'])\ndef read_records():\n    records = Record.query.all()\n    record_schema = RecordSchema(many=True)\n    output = record_schema.dump(records)\n    return jsonify(output), 200\n\n# Create a new route to read a single record\n@app.route('/read/<id>', methods=['GET'])\ndef read_record(id):\n    record = Record.query.get(id)\n    if record is None:\n        return jsonify({'message': 'Record not found'}), 404\n    record_schema = RecordSchema()\n    output = record_schema.dump(record)\n    return jsonify(output), 200\n\n# Create a new route to update a single record\n@app.route('/update/<id>', methods=['PUT'])\ndef update_record(id):\n    record = Record.query.get(id)\n    if record is None:\n        return jsonify({'message': 'Record not found'}), 404\n    data = request.json\n    record.name = data['name']\n    record.email = data['email']\n    db.session.commit()\n    return jsonify({'message': 'Record updated successfully'}), 200\n\n# Create a new route to delete a single record\n@app.route('/delete/<id>', methods=['DELETE'])\ndef delete_record(id):\n    record = Record.query.get(id)\n    if record is None:\n        return jsonify({'message': 'Record not found'}), 404\n    db.session.delete(record)\n    db.session.commit()\n    return jsonify({'message': 'Record deleted successfully'}), 200\n\n# Run the Flask application\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# Connect to the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'\ndb = SQLAlchemy(app)\n\n# Create a model class for table row\nclass TableRow(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(50), nullable=False)\n  description = db.Column(db.String(50), nullable=False)\n\n# Create a REST API using Flask-RESTful\napi = Api(app)\n\n# Create the API's endpoints\nclass CreateRecord(Resource):\n  def post(self):\n    # Get the request body\n    json_data = request.get_json()\n    # Create a new record\n    new_record = TableRow(name=json_data['name'], description=json_data['description'])\n    db.session.add(new_record)\n    db.session.commit()\n    return {'status': 'success'}, 201\n\nclass ReadRecord(Resource):\n  def get(self, id):\n    # Get a record by id\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        return {'name': record.name, 'description': record.description}, 200\n    return {'status': 'not found'}, 404\n\nclass UpdateRecord(Resource):\n  def put(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Get the request body\n        json_data = request.get_json()\n        # Update the record\n        record.name = json_data['name']\n        record.description = json_data['description']\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\nclass DeleteRecord(Resource):\n  def delete(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Delete the record\n        db.session.delete(record)\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\n# Add the API's endpoints to the API\napi.add_resource(CreateRecord, '/create')\napi.add_resource(ReadRecord, '/read/<int:id>')\napi.add_resource(UpdateRecord, '/update/<int:id>')\napi.add_resource(DeleteRecord, '/delete/<int:id>')\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\n# Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Create a new Flask application\napp = Flask(__name__)\n\n# Set the database connection URL\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:///database.db'\n\n# Create a new SQLAlchemy object\ndb = SQLAlchemy(app)\n\n# Define a new model for the database\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(100), nullable=False, unique=True)\n\n# Create the database tables\nwith app.app_context():\n    db.create_all()\n\n# Define a route for the homepage\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# Define a route for the form submission\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form['name']\n    email = request.form['email']\n    new_user = User(name=name, email=email)\n    db.session.add(new_user)\n    db.session.commit()\n    return redirect(url_for('index'))\n\n# Run the application if the script is executed\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\n# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef randomize_array(n, input_list=None):\n    if input_list is None:\n        input_list = list(range(n))\n    random.shuffle(input_list)\n    return input_list\n\n# Example usage:\nn = 10\nrandomized_array = randomize_array(n)\nprint(randomized_array)\n```",
        "target": "```python\nimport random\n \ndef randomize(arr, n): \n \n    # Start from the last element and \n    # swap one by one. We don't need to \n    # run for the first element \n    # that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index \n        j = random.randint(0,i+1) \n  \n        # Swap arr[i] with the element \n        # at random index \n        arr[i],arr[j] = arr[j],arr[i] \n    return arr\n```\n"
    },
    {
        "generated": "```python\ndef reverse_list(input_list):\n    result = []\n    for item in input_list:\n        result.insert(0, item)\n    return result\n\n# Test the function\nprint(reverse_list([1, 2, 3, 4, 5]))\n```",
        "target": "```python\ndef reverse_list_without_function(list_):\n    result = []\n    for i in range(len(list_)-1,-1,-1):\n        result.append(list_[i])\n    return result\n\nlist_ = [1,2,3,4]\nprint(reverse_list_without_function(list_)) # => [4, 3, 2, 1]\n```\n"
    },
    {
        "generated": "```python\ndef calculate_average(numbers):\n    return sum(numbers) / len(numbers)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)\n```",
        "target": "```python\ndef calculateAverage(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)\n\nnumbers = [5, 10, 15, 20]\n\nprint(calculateAverage(numbers)) // 12.5\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nfrom datetime import datetime, timedelta\n\ndef generate_dates():\n    today = datetime.now()\n    future_dates = [today + timedelta(days=x) for x in range(1, 51)]\n    return np.array(future_dates)\n\nprint(generate_dates())\n```",
        "target": "```python\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# define start (today) and end (50 days from today) date\nstart_date = datetime.today()\nend_date = start_date + timedelta(days=50)\n\n# generate numpy array of dates between the dates defined above\ndates = np.arange(start_date, end_date).astype('datetime64[D]')\nprint(dates)\n# Output:\narray(['2021-05-17', '2021-05-18', '2021-05-19', '2021-05-20', '2021-05-21',\n       '2021-05-22', '2021-05-23', '2021-05-24', '2021-05-25', '2021-05-26',\n       '2021-05-27', '2021-05-28', '2021-05-29', '2021-05-30', '2021-05-31',\n       '2021-06-01', '2021-06-02', '2021-06-03', '2021-06-04', '2021-06-05',\n       '2021-06-06', '2021-06-07', '2021-06-08', '2021-06-09', '2021-06-10',\n       '2021-06-11', '2021-06-12', '2021-06-13', '2021-06-14', '2021-06-15',\n       '2021-06-16', '2021-06-17', '2021-06-18', '2021-06-19', '2021-06-20',\n       '2021-06-21', '2021-06-22', '2021-06-23', '2021-06-24', '2021-06-25',\n       '2021-06-26', '2021-06-27', '2021-06-28', '2021-06-29', '2021-06-30',\n       '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04', '2021-07-05',\n       '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10'],\n      dtype='datetime64[D]')\n```\n"
    },
    {
        "generated": "```python\n# lower = \"hello world\".lower()\n# print(lower)\nlower = \"Hello World\".lower()\nprint(lower)\n```",
        "target": "```python\n\"\"\"\nMake the given string lowercase using Python\n\"\"\"\n\ntest_string = \"This is a TEST string!\"\n\nlowercase_string = test_string.lower()\n\nprint(lowercase_string) # prints \"this is a test string!\"\n```\n"
    },
    {
        "generated": "```python\ndef remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in s if c not in vowels])\n\n# test the function\nprint(remove_vowels(\"Hello World\"))\n```",
        "target": "```python\n# Function to remove vowels\ndef removeVowels(str):\n  vowels = ('a', 'e', 'i', 'o', 'u')\n  for x in str.lower():\n    if x in vowels:\n      str = str.replace(x,\"\")\n  print(str)  \n\n# Driver program\nstr = \"Hello\"\nremoveVowels(str)\n\n# Output:\nHll\n```\n"
    },
    {
        "generated": "```python\n# Take a number from the user\nnum = int(input(\"Enter a number: \"))\n\n# Initialize an empty list to store the divisors\ndivisors = []\n\n# Iterate from 1 to the number (inclusive)\nfor i in range(1, num + 1):\n    # Check if the current number is a divisor\n    if num % i == 0:\n        # If it is, add it to the list of divisors\n        divisors.append(i)\n\n# Print the list of divisors\nprint(\"The divisors of\", num, \"are:\", divisors)\n```",
        "target": "```python\ndivisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_poem(word_list, length=10):\n    poem = []\n    for i in range(length):\n        line = ''\n        for j in range(5):\n            line += random.choice(word_list) +''\n        line = line.strip()  # Remove trailing space\n        poem.append(line)\n    return '\\n'.join(poem)\n\n# Example usage\nwords = ['sunny', 'day', 'bright', 'clouds', 'blue','sky', 'beauty', 'nature','serene', 'calm']\nprint(generate_poem(words, length=15))\n```",
        "target": "```python\ndef create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))\n```\n"
    },
    {
        "generated": "```python\nclass Validator:\n    def __init__(self, expected_type):\n        self.expected_type = expected_type\n\n    def validate(self, input_value):\n        if not isinstance(input_value, self.expected_type):\n            raise TypeError(f\"Expected {self.expected_type.__name__}, got {type(input_value).__name__}\")\n        return input_value\n```",
        "target": "```python\nclass InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True\n```\n"
    },
    {
        "generated": "```python\ndef min_coins(amount, coins):\n    \"\"\"\n    This function calculates the minimum number of coins required to make a given amount.\n\n    Parameters:\n    amount (int): The amount to be made.\n    coins (list): A list of available coin denominations.\n\n    Returns:\n    int: The minimum number of coins required.\n    \"\"\"\n    # Create a list to store the minimum number of coins for each amount from 0 to the given amount\n    dp = [float('inf')] * (amount + 1)\n    \n    # We need 0 coins to make 0 amount\n    dp[0] = 0\n    \n    # Iterate over each coin denomination\n    for coin in coins:\n        # Iterate from the coin denomination to the given amount\n        for i in range(coin, amount + 1):\n            # Update the minimum number of coins for the current amount\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    # If we cannot make the given amount with the available coins, return -1\n    if dp[amount] == float('inf'):\n        return -1\n    # Otherwise, return the minimum number of coins\n    else:\n        return dp[amount]\n\n# Example usage\ncoins = [1, 2, 5, 10, 20]\namount = 10\nprint(min_coins(amount, coins))  # Output: 1\n```",
        "target": "```python\ndef minimum_coins_needed(amount):\n    denominations = [1, 2, 5, 10]\n    result = [0 for _ in range(amount+1)]\n \n    # Compute the result for amount = 0\n    result[0] = 0 \n    \n    # Iterate over all amount from 1 to desired\n    for i in range(1, amount+1): \n        # Initialize an inner loop to maximum value (amount)\n        temp_min = float('Inf')\n        for j in range(0, len(denominations)): \n            # Check if coins are less than amount\n            if denominations[j] <= i:\n                temp_min = min(temp_min, result[i-denominations[j]])\n        # Store the final result in amount's index\n        result[i] = temp_min + 1\n        \n    return result[amount]\n```\n"
    },
    {
        "generated": "```python\ndef find_largest_number(array):\n    return max(array)\n\n# Example usage:\nnumbers = [12, 45, 7, 23, 56, 89, 34]\nprint(find_largest_number(numbers))\n```",
        "target": "```python\narr = [1, 10, 5, 6, 9, 8, 20]\n\ndef largest_number(arr):\n  largest = arr[0]\n  for num in arr:\n    if num > largest:\n      largest = num\n\n  return largest\n\nlargest = largest_number(arr)\nprint(largest) # 20\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\n\ndef scrape_article(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.title.text\n    author = soup.find('span', class_='author').text\n    content = soup.find('div', class_='article-content').text\n    return title, author, content\n\ndef main():\n    url = input(\"Enter the URL of the article: \")\n    title, author, content = scrape_article(url)\n    print(f\"Title: {title}\")\n    print(f\"Author: {author}\")\n    print(f\"Content: {content}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup\n\ndef main():\n    url = input(\"Enter the URL of the website to scrape: \")\n    soup = scrape_website(url)\n    print(soup.prettify())\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport urllib.request\n\nurl = \"https://www.example.com/\"\n\nresponse = urllib.request.urlopen(url) \nwebContent = response.read()\n\nf = open(\"example.html\", \"w\")\nf.write(webContent.decode('utf-8'))\nf.close()\n```\n"
    },
    {
        "generated": "```python\ndef compare_integers(a, b):\n    if a < b:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        return 1\n```",
        "target": "```python\ndef compare_ints(num1, num2):\n  if num1 > num2:\n    return \"Integer1 is greater than Integer2\"\n  elif num1 < num2:\n    return \"Integer1 is lesser than Integer2\"\n  else:\n    return \"The integers are equal\"\n\nresult = compare_ints(6, 4)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ndef largest_number(lst):\n    return max(lst)\n\n# Example usage\nnumbers = [12, 45, 7, 23, 56, 89, 34]\nprint(\"Largest Number:\", largest_number(numbers))\n```",
        "target": "```python\nmax_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)\n```\n"
    },
    {
        "generated": "```python\n# def max_of_three(x, y, z):\n#     return max(x, y, z)\n# print(max_of_three(1, 2, 3))\n```",
        "target": "```python\nmax_func = lambda a, b, c : max(a,b,c)\nprint(max_func(3, 12, 7))\n```\n"
    },
    {
        "generated": "```python\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if not self.is_empty():\n            return self.items.pop(0)\n        else:\n            return None\n\n    def size(self):\n        return len(self.items)\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[0]\n        else:\n            return None\n```",
        "target": "```python\nclass Queue(): \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == []  \n  \n    def enqueue(self, item): \n        self.items.insert(0, item)\n        \n    def dequeue(self):\n        return self.items.pop() \n  \n    def size(self): \n        return len(self.items)\n```\n"
    },
    {
        "generated": "```python\ndef sum_two_numbers(a, b):\n    return a + b\n```",
        "target": "```python\ndef sum_of_numbers(num1, num2):\n    return num1 + num2\n```\n"
    },
    {
        "generated": "```java\npublic class Main {\n    public static void main(String[] args) {\n        String str = \"Hello World!\";\n        System.out.println(str.replace(\" \", \"\"));\n    }\n}\n```",
        "target": "```python\npublic class RemoveWhitespace { \n\n    public static String removeWhitespace(String str) \n    { \n        str = str.replaceAll(\"\\\\s\", \"\"); \n        return str; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Python Programming\"; \n        System.out.println(removeWhitespace(str)); \n    } \n}\n```\n"
    },
    {
        "generated": "```python\ndef base64_encode(input_string):\n    import base64\n    encoded_string = base64.b64encode(input_string.encode('utf-8')).decode('utf-8')\n    return encoded_string\n\ninput_string = \"Hello, World!\"\nencoded_string = base64_encode(input_string)\nprint(\"Base64 Encoded String:\", encoded_string)\n```",
        "target": "```python\nimport base64\n\ndef encode_string(string):\n    # Encode the bytes of the given string\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n\n    # Get the string representation of the encoded bytes\n    encoded_string = str(encoded_bytes, \"utf-8\")\n\n    return encoded_string\n```\n"
    },
    {
        "generated": "```python\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\n# Example usage:\nv1 = Vector(1, 2)\nv2 = Vector(3, 4)\nprint(v1 + v2)  # Output: Vector(4, 6)\nprint(v1 - v2)  # Output: Vector(-2, -2)\n```",
        "target": "```python\nclass Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def add(self, other):\n    self.x += other.x\n    self.y += other.y\n\n  def subtract(self, other):\n    self.x -= other.x\n    self.y -= other.y\n```\n"
    },
    {
        "generated": "```python\n# def generate_dict():\n#     result = {}\n#     for i in range(10):\n#         result[f'key_{i}'] = i\n#     return result\n# \n# print(generate_dict())\n```",
        "target": "```python\ndictionary = {\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'ten': 10\n}\n```\n"
    },
    {
        "generated": "```python\ndef generate_dict(list1, list2):\n    return dict(zip(list1, list2))\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\nprint(generate_dict(list1, list2))\n```",
        "target": "```python\ndef generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n# Sample in-memory database\nusers = {}\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        email = request.form.get('email')\n        phone = request.form.get('phone')\n        \n        users[name] = {\n            'email': email,\n            'phone': phone\n        }\n        \n        return 'Data saved successfully!'\n    return render_template('index.html')\n\n@app.route('/users')\ndef get_users():\n    return render_template('users.html', users=users)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('/')\ndef form():\n    return render_template('form.html')\n\n@app.route('/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')\n```\n"
    },
    {
        "generated": "```python\ndef square_map_sum(arr):\n    return sum(x**2 for x in arr)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nresult = square_map_sum(numbers)\nprint(result)\n```",
        "target": "```python\ndef sum_of_squares(myList):\n    result = 0\n    for num in myList:\n        result += num**2\n    return result\n\ntotal = sum_of_squares(myList)\nprint(\"Sum of Squares:\", total)\n```\n"
    },
    {
        "generated": "```python\ndef delete_element(lst, element):\n    return [i for i in lst if i!= element]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(delete_element(my_list, 3))  # Output: [1, 2, 4, 5]\n```",
        "target": "```python\ndef delete_element(numbers, element):\n result = []\n for x in numbers:\n if x != element:\n result.append(x)\n return result\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, classification_report\n\n# Input dataset\ntrain_data = {\n    'text': [\n        'This is a spam message from a Nigerian prince.',\n        'I love shopping at this store!',\n        'Get rich quick by investing in our stock.',\n        'I love reading books on history.',\n        'Make money fast by clicking on our link.',\n        'I love eating pizza at this restaurant.',\n        'This is a scam email from a fake company.',\n        'I love watching movies on Netflix.',\n        'Get a free gift by signing up for our newsletter.',\n        'I love playing video games on my console.'\n    ],\n    'label': [\n        1,  # spam\n        0,  # not spam\n        1,  # spam\n        0,  # not spam\n        1,  # spam\n        0,  # not spam\n        1,  # spam\n        0,  # not spam\n        1,  # spam\n        0   # not spam\n    ]\n}\n\n# Load the data\ndf = pd.DataFrame(train_data)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)\n\n# Create a TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit the vectorizer to the training data and transform both the training and testing data\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n\n# Train a Multinomial Naive Bayes classifier\nclf = MultinomialNB()\nclf.fit(X_train_tfidf, y_train)\n\n# Make predictions on the testing data\ny_pred = clf.predict(X_test_tfidf)\n\n# Evaluate the classifier\naccuracy = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy:.2f}')\nprint(f'Classification Report:\\n{classification_report(y_test, y_pred)}')\n```",
        "target": "```python\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\n\n# Import the dataset\ndataset = pd.read_csv ('spam.csv')\n   \n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Fitting the model\n classifier.fit(X_train, y_train)\n```\n"
    },
    {
        "generated": "```python\ndef filter_not_divisible_by_three(lst):\n    return [i for i in lst if i % 3!= 0]\n\n# Example usage:\nnumbers = [3, 6, 9, 12, 15, 18]\nfiltered_numbers = filter_not_divisible_by_three(numbers)\nprint(filtered_numbers)  # Output: [6, 9, 12, 15, 18]\n```",
        "target": "```python\ndef filter_list(arr):\n    filtered_list = []\n    for num in arr:\n        if num % 3 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nprint(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))\n```\n"
    },
    {
        "generated": "```python\ndef classify_text(text):\n    positive_words = [\"good\", \"great\", \"excellent\", \"love\"]\n    negative_words = [\"bad\", \"hate\", \"terrible\", \"awful\"]\n\n    positive_score = sum(1 for word in text.lower().split() if word in positive_words)\n    negative_score = sum(1 for word in text.lower().split() if word in negative_words)\n\n    if positive_score > negative_score:\n        return \"positive\"\n    elif negative_score > positive_score:\n        return \"negative\"\n    else:\n        return \"neutral\"\n```",
        "target": "```python\nimport re\n\ndef classify_text(text):\n # Positive words\n positive_words = ['good', 'great', 'nice', 'love', 'happy', 'fun']\n # Negative words\n negative_words = ['bad', 'horrible', 'hate', 'sad']\n\n # Remove all punctuations\n text = re.sub(r'[^\\w\\s]','',text)\n\n # Split the text into words\n words = text.split()\n\n # Count the number of positive and negative words\n positive_count = 0\n negative_count = 0\n for word in words:\n     if word in positive_words:\n         positive_count += 1\n     if word in negative_words:\n         negative_count += 1\n\n# Classify the text\n if positive_count > negative_count:\n     return \"Positive\"\n elif positive_count < negative_count:\n     return \"Negative\"\n else:\n     return \"Neutral\"\n```\n"
    },
    {
        "generated": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data for coronavirus cases in different countries\ndata = {\n    'Country': ['USA', 'Canada', 'Mexico', 'China', 'India'],\n    'Cases': [1000, 200, 300, 4000, 5000]\n}\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Create a bar chart\nplt.bar(data['Country'], data['Cases'])\n\n# Set labels and title\nplt.xlabel('Country')\nplt.ylabel('Number of Cases')\nplt.title('Coronavirus Cases in Different Countries')\n\n# Show the plot\nplt.show()\n```",
        "target": "```python\nimport matplotlib.pyplot as plt\n\ncountry_data = [['United States', 212000], ['Russia', 180000], ['Italy', 105000], ['Spain', 90000], ['Germany', 70000]]\ncountry = [data[0] for data in country_data]\ncases = [data[1] for data in country_data]\n\nplt.barh(country, cases)\nplt.title(\"Total number of Coronavirus cases by country\")\nplt.xlabel('Number of cases')\nplt.ylabel('Country')\nplt.show()\n```\n"
    },
    {
        "generated": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nn = int(input(\"Enter a number: \"))\nprint(\"The factorial of\", n, \"is:\", factorial(n))\n```",
        "target": "```python\ndef factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n  \nnum = 4\nprint(\"Factorial of\",num,\"is\",factorial(num))\n```\n"
    },
    {
        "generated": "```python\n# Import the required libraries\nfrom xml.etree import ElementTree as ET\n\n# Define the employee class\nclass Employee:\n    def __init__(self, id, name, age, department):\n        self.id = id\n        self.name = name\n        self.age = age\n        self.department = department\n\n# Create a list of employees\nemployees = [\n    Employee(1, 'John Doe', 30, 'Sales'),\n    Employee(2, 'Jane Smith', 25, 'Marketing'),\n    Employee(3, 'Bob Johnson', 40, 'IT')\n]\n\n# Create the root element\nroot = ET.Element('employees')\n\n# Create employee elements\nfor employee in employees:\n    employee_element = ET.SubElement(root, 'employee')\n    ET.SubElement(employee_element, 'id').text = str(employee.id)\n    ET.SubElement(employee_element, 'name').text = employee.name\n    ET.SubElement(employee_element, 'age').text = str(employee.age)\n    ET.SubElement(employee_element, 'department').text = employee.department\n\n# Create an XML document\ntree = ET.ElementTree(root)\n\n# Print the XML document\nprint(ET.tostring(tree.getroot(), encoding='unicode'))\n```",
        "target": "```python\nimport xml.etree.ElementTree as ET \n\nroot = ET.Element('employees') \n\nemployee1 = ET.SubElement(root, \"employee\") \nemployee1.set(\"employee_id\", \"1\") \nemployee1.set(\"employee_name\", \"John\") \nemployee1.set(\"department\", \"IT\") \nemployee1.set(\"salary\", \"50000\") \n\nemployee2 = ET.SubElement(root, \"employee\") \nemployee2.set(\"employee_id\", \"2\") \nemployee2.set(\"employee_name\", \"Jane\") \nemployee2.set(\"department\", \"Marketing\") \nemployee2.set(\"salary\", \"55000\") \n\ntree = ET.ElementTree(root) \ntree.write(\"employee_data.xml\")\n```\n"
    },
    {
        "generated": "```python\n# \ndef search_substring(main_string, sub_string):\n    if sub_string in main_string:\n        print(f\"'{sub_string}' found in '{main_string}'\")\n    else:\n        print(f\"'{sub_string}' not found in '{main_string}'\")\n\n# \ndef main():\n    main_string = input(\"Enter the main string: \")\n    sub_string = input(\"Enter the substring to search for: \")\n    search_substring(main_string, sub_string)\n\n# \nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\ndef search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ndef sum_list_elements(input_list):\n    return sum(input_list)\n```",
        "target": "```python\ndef list_sum(list):\n   sum = 0\n   for el in list:\n       sum += el\n   return sum\n```\n"
    },
    {
        "generated": "```python\nfrom scipy.optimize import linprog\n\n# Coefficients of the objective function (maximize)\nc = [-1, -1]  # coefficients for the two variables\n\n# Coefficients of the inequality constraints (left-hand side)\nA_ub = [[1, 1], [1, -1]]  # coefficients for the two variables\nb_ub = [3, -4]  # right-hand side values for the two constraints\n\n# Coefficients of the equality constraint (left-hand side)\nA_eq = [[1, 1], [1, -1]]  # coefficients for the two variables\nb_eq = [0, 0]  # right-hand side values for the two constraints\n\n# Bounds for the variables (non-negativity)\nbounds = [(0, None), (0, None)]\n\n# Solve the linear programming problem\nres = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)\n\nprint(\"Optimal solution:\", res.x)\nprint(\"Optimal value:\", -res.fun)\n```",
        "target": "```python\n# Importing packages \nimport scipy.optimize as opt \n\n# Objective function \nz = lambda x, y: 5*x + 6*y \n\n# Defining constraints \nc1 = lambda x, y: 22 - x - y \nc2 = lambda x, y: 15 - 2*x - 4*y \n\n# Bounds \nbnds = ((0, None), (0, None)) \n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': c1} \ncon2 = {'type': 'ineq', 'fun': c2} \ncons = [con1, con2] \n\n#Optimization \nsol = opt.minimize(z, (0, 0), bounds = bnds, constraints = cons) \n\nprint(sol)\n```\n"
    },
    {
        "generated": "```python\ndef longest_word(strings):\n    return max(strings, key=len)\n\n# Example usage:\nstrings = [\"apple\", \"banana\", \"orange\"]\nprint(longest_word(strings))  # Output: \"orange\"\n```",
        "target": "```python\ndef longest_word(word_list):\n longest_word = word_list[0]\n for word in word_list:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word\n```\n"
    },
    {
        "generated": "```python\ndef word_lengths(words):\n    return [len(word) for word in words]\n```",
        "target": "```python\ndef get_word_lengths(words):\n    # initialize empty list \n    lengths = [] \n  \n    # iterate over the list of words\n    for word in words: \n        # append the length of each word to lengths              \n        lengths.append(len(word)) \n  \n    # return the list of lengths\n    return lengths\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ndef extract_numbers(text):\n    numbers = re.findall(r'\\d+', text)\n    return numbers\n\ntext = \"The numbers in this text are 123, 456, and 789.\"\nnumbers = extract_numbers(text)\nprint(numbers)\n```",
        "target": "```python\nimport re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))\n```\n"
    },
    {
        "generated": "```python\nclass Context:\n    def __init__(self):\n        self.data = {}\n\n    def set(self, key, value):\n        self.data[key] = value\n\n    def get(self, key, default=None):\n        return self.data.get(key, default)\n\nclass CustomContextManager:\n    def __init__(self):\n        self.context = Context()\n\n    def enter(self):\n        self.context.set('data', 'Shared data')\n\n    def exit(self):\n        del self.context['data']\n```",
        "target": "```python\nclass Context:\n def __init__(self):\n self.data = {}\n\n def set(self, key, value):\n self.data[key] = value\n\n def get(self, key):\n return self.data.get(key)\n \n def clear(self):\n self.data = {}\n \n \ncontext = Context()\n \ndef foo():\n context.set('name', 'John')\n \ndef bar():\n print(context.get('name'))\n \n foo()\n bar() # prints 'John'\n```\n"
    },
    {
        "generated": "```python\ndef is_armstrong(n):\n    num_str = str(n)\n    num_digits = len(num_str)\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n    return n == sum_of_digits\n\n# Test the function\nprint(is_armstrong(153))  # True\nprint(is_armstrong(370))  # True\nprint(is_armstrong(407))  # True\nprint(is_armstrong(1634))  # True\nprint(is_armstrong(8208))  # True\nprint(is_armstrong(53131))  # True\nprint(is_armstrong(0))  # True\nprint(is_armstrong(1))  # True\nprint(is_armstrong(2))  # True\nprint(is_armstrong(3))  # True\nprint(is_armstrong(4))  # True\nprint(is_armstrong(5))  # True\nprint(is_armstrong(6))  # True\nprint(is_armstrong(7))  # True\nprint(is_armstrong(8))  # True\nprint(is_armstrong(9))  # True\nprint(is_armstrong(10))  # False\nprint(is_armstrong(10))  # False\n```",
        "target": "```python\ndef is_armstrong_number(num):\n  n = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit**n\n    temp //= 10\n  return sum == num\n```\n"
    },
    {
        "generated": "```python\n# Sort a list of strings by character length\ndef sort_by_length(strings):\n    return sorted(strings, key=len)\n\n# Example usage:\nstrings = [\"hello\", \"a\", \"ab\", \"abc\", \"abcd\"]\nsorted_strings = sort_by_length(strings)\nprint(sorted_strings)\n```",
        "target": "```python\ndef sort_by_char_length(strings):\n    return sorted(strings, key = len)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function\nfor i in range(1, 11):\n    print(fibonacci(i))\n```",
        "target": "```python\ndef computeFibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return computeFibonacci(n-1)+computeFibonacci(n-2)\n```\n"
    },
    {
        "generated": "```python\ndef find_stats(numbers):\n    if not numbers:\n        return None\n\n    min_num = max_num = numbers[0]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n\n    avg = sum(numbers) / len(numbers)\n    return max_num, min_num, avg\n```",
        "target": "```python\ndef find_min_max_avg(arr):\n    # set the min, max numbers to the first item in the array\n    min_num = arr[0]\n    max_num = arr[0]\n\n    # keep track of the sum of all the numbers\n    sum_num = 0\n\n    # iterate through the array\n    for item in arr:\n        # find smallest number\n        if item < min_num:\n            min_num = item\n        # find largest number\n        elif item > max_num:\n            max_num = item\n        # add each number to the sum\n        sum_num += item\n\n    # calculate the average\n    avg_num = sum_num / len(arr)\n    print(\"Smallest Number: {}\\nLargest Number: {}\".format(min_num, max_num))\n    return avg_num\n```\n"
    },
    {
        "generated": "```python\n# user_input = input(\"Enter something: \")\n# print(user_input)\n```",
        "target": "```python\n# prompt the user for input\ndata = input('Enter a value: ')\n\n# print the user's input\nprint('You entered:', data)\n```\n"
    },
    {
        "generated": "```python\ndef comma_separated_to_dict(comma_separated_values):\n    return [dict(zip(['key1', 'key2',...], values.split(','))) for values in comma_separated_values.split(',')]\n\n# Test the function\nvalues = \"key1,value2,key3,value4\"\nprint(comma_separated_to_dict(values))\n```",
        "target": "```python\ncsv_data = [\n {'name': 'Albert', 'age': 22},\n {'name': 'Bob', 'age': 24},\n {'name': 'Charles', 'age': 20}\n]\n```\n"
    },
    {
        "generated": "```python\nclass Book:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n\nclass Library:\n    def __init__(self):\n        self.books = []\n\n    def add_book(self, book):\n        self.books.append(book)\n\n    def remove_book(self, book_title):\n        self.books = [book for book in self.books if book.title!= book_title]\n\n    def print_books(self):\n        for book in self.books:\n            print(f\"Title: {book.title}, Author: {book.author}, Publication Year: {book.publication_year}\")\n\ndef main():\n    library = Library()\n\n    book1 = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\n    book2 = Book(\"1984\", \"George Orwell\", 1949)\n\n    library.add_book(book1)\n    library.add_book(book2)\n\n    library.print_books()\n\n    library.remove_book(\"1984\")\n\n    library.print_books()\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nclass Converter:\n    def __init__(self, base_currency):\n        self.base_currency = base_currency\n        self.rates = self.get_rates()\n \n    def get_rates(self):\n        # code to get the exchange rates from a web API\n \n    def convert(self, target_currency, amount):\n        return amount / self.rates[target_currency] * self.rates[self.base_currency]\n \nif __name__ == '__main__':\n    converter = Converter(\"USD\")\n    converted_amount = converter.convert(\"EUR\", 100)\n    print(converted_amount)\n```\n"
    },
    {
        "generated": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nfor num in range(1, 101):\n    if is_prime(num):\n        print(num)\n```",
        "target": "```python\nfor num in range(2,101):\nfor i in range(2,num):\n if (num % i) == 0:\n break\n else:\n print(num)\n```\n"
    },
    {
        "generated": "```python\ndef extract_json_data(json_object):\n    data = []\n    for key, value in json_object.items():\n        data.append(key)\n        if isinstance(value, dict):\n            sub_data = extract_json_data(value)\n            data.extend(sub_data)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    sub_data = extract_json_data(item)\n                    data.extend(sub_data)\n                else:\n                    data.append(item)\n    return data\n\n# Example usage:\nimport json\n\njson_string = '''\n{\n    \"name\": \"John\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"Anytown\",\n        \"state\": \"CA\",\n        \"zip\": \"12345\"\n    },\n    \"interests\": [\"reading\", \"hiking\", \"coding\"]\n}\n'''\n\njson_object = json.loads(json_string)\ndata = extract_json_data(json_object)\nprint(data)\n```",
        "target": "```python\ndata = [{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"occupation\": \"programmer\"\n}]\n\narr = []\n\nfor item in data:\n    arr.append(item)\n    \nprint(arr)\n```\n"
    },
    {
        "generated": "```python\n# Import the necessary module\nimport re\n\n# Function to clean a string\ndef clean_string(input_string):\n    # Use regular expression to replace all non-alphanumeric characters with an empty string\n    cleaned_string = re.sub(r'[^a-zA-Z0-9\\s]', '', input_string)\n    return cleaned_string\n\n# Test the function with a sample input\ninput_string = \"Hello, World! How are you doing today?\"\ncleaned_string = clean_string(input_string)\nprint(cleaned_string)\n```",
        "target": "```python\n# function to remove punctuations and special characters\ndef clean_string(str):\n # remove all punctuation\n no_punc = ''.join(c for c in str if c not in '!@#$%^&*()_+-={}[]:\"|;\\<>,./?')\n # remove all special characters\n final_string = ''.join(c for c in no_punc if ord(c) >= 32 and ord(c) <= 126)\n return final_string\n\n# sample input\ninput_str = \"this&is#some$sampletext\"\n\n# call the function to remove punctuations and special characters\nclean_str = clean_string(input_str)\n\n# print the clean string\nprint(clean_str)\n\n## Output:\nthisissomesampletext\n```\n"
    },
    {
        "generated": "```python\ndef can_partition(A):\n    total = sum(A)\n    if total % 2!= 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in A:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\n# Example usage\nA = [1, 2, 3, 4]\nprint(can_partition(A))  # Output: True\n\nA = [1, 2, 3, 5]\nprint(can_partition(A))  # Output: False\n```",
        "target": "```python\ndef partition_equal(arr):\n   total = sum(arr) \n   if total % 2 != 0: \n      return False \n   half = total//2 \n   n = len(arr) \n   dp = [[False for _ in range(half+1)] for _ in range(n+1)] \n   for i in range(n+1): \n      dp[i][0] = True \n   for j in range(1,half+1): \n      dp[0][j] = False \n   for i in range(1, n+1): \n      for j in range(1, half+1): \n         if arr[i-1] <= j:\n            dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \n         else:\n            dp[i][j] = dp[i-1][j] \n   return dp[n][half]\n```\n"
    },
    {
        "generated": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef first_n_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nprint(*first_n_primes(100), sep='\\n')\n```",
        "target": "```python\ndef is_prime(num):\n     \n    # Return False if num is less than 2\n    if num < 2:\n        return False\n     \n    # Check if any number from 2 to (num - 1) divides num\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n             \n    else:\n        return True\n\nnums = []\nnum = 2\n\nwhile len(nums) < 100:\n    if is_prime(num):\n        nums.append(num)\n    num = num + 1\n\nprint(nums)\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_circumference(radius):\n    circumference = 2 * math.pi * radius\n    return circumference\n\nradius = float(input(\"Enter the radius of the circle: \"))\ncircumference = calculate_circumference(radius)\nprint(f\"The circumference of the circle is: {circumference}\")\n```",
        "target": "```python\ndef calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference)\n```\n"
    },
    {
        "generated": "```python\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    largest_factor = largest_prime_factor(num)\n    print(f\"The largest prime factor of {num} is {largest_factor}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))\n```\n"
    },
    {
        "generated": "```python\nfor _ in range(10):\n    print(\"Hello World!\")\n```",
        "target": "```python\nfor i in range(10):\n print(\"Hello World!\")\n```\n"
    },
    {
        "generated": "```python\ndef calculate_average(lst):\n    return sum(len(x) for x in lst) / len(lst)\n```",
        "target": "```python\ndef average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum/list_length\n  return average\n```\n"
    },
    {
        "generated": "```python\n# Import necessary modules\nimport dbus\nimport dbus.service\nimport sys\nfrom PySide6.QtCore import *\nfrom PySide6.QtGui import *\nfrom PySide6.QtWidgets import *\n\n# Define a DBusMenu class\nclass DBusMenu(dbus.service.Variant):\n    def __init__(self, menu):\n        self.menu = menu\n\n    def publish_new_menu(self):\n        self.menu.publish_new_menu()\n\n# Define a QMenu class\nclass QMenu:\n    def __init__(self, parent=None):\n        self.parent = parent\n\n    def publish_new_menu(self):\n        pass\n\n# Define a main function\ndef main():\n    # Create a DBusMenu object\n    menu = DBusMenu(QMenu())\n\n    # Publish the new menu\n    menu.publish_new_menu()\n\n    # Start the application event loop\n    app = QApplication(sys.argv)\n    sys.exit(app.exec())\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\n#!/usr/bin/env python\n# vim:fileencoding=utf-8\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\n\n__license__ = 'GPL v3'\n__copyright__ = '2014, Kovid Goyal <kovid at kovidgoyal.net>'\n\n# Support for excporting Qt's MenuBars/Menus over DBUS. The API is defined in\n# dbus-menu.xml from the libdbusmenu project https://launchpad.net/libdbusmenu\n\nimport dbus\nfrom PyQt5.Qt import (\n    QApplication, QMenu, QIcon, QKeySequence, QObject, QEvent, QTimer, pyqtSignal, Qt)\n\nfrom calibre.utils.dbus_service import Object, BusName, method as dbus_method, dbus_property, signal as dbus_signal\nfrom calibre.gui2.dbus_export.utils import (\n    setup_for_cli_run, swap_mnemonic_char, key_sequence_to_dbus_shortcut, icon_to_dbus_menu_icon)\n\nnull = object()\n\ndef PropDict(mapping=()):\n    return dbus.Dictionary(mapping, signature='sv')\n\ndef create_properties_for_action(ac, previous=None):\n    ans = PropDict()\n    if ac.isSeparator():\n        ans['type'] = 'separator'\n        if not ac.isVisible():\n            ans['visible'] = False\n        return ans\n    text = ac.text() or ac.iconText()\n    if text:\n        ans['label'] = swap_mnemonic_char(text)\n    if not ac.isEnabled():\n        ans['enabled'] = False\n    if not ac.isVisible() or ac.property('blocked') is True:\n        ans['visible'] = False\n    if ac.menu() is not None:\n        ans['children-display'] = 'submenu'\n    if ac.isCheckable():\n        exclusive = ac.actionGroup() is not None and ac.actionGroup().isExclusive()\n        ans['toggle-type'] = 'radio' if exclusive else 'checkmark'\n        ans['toggle-state'] = int(ac.isChecked())\n    shortcuts = ac.shortcuts()\n    if shortcuts:\n        sc = dbus.Array(signature='as')\n        for s in shortcuts:\n            if not s.isEmpty():\n                for x in key_sequence_to_dbus_shortcut(s):\n                    sc.append(dbus.Array(x, signature='s'))\n        if sc:\n            ans['shortcut'] = sc[:1]  # Unity fails to display the shortcuts at all if more than one is specified\n    if ac.isIconVisibleInMenu():\n        icon = ac.icon()\n        if previous and previous.get('x-qt-icon-cache-key') == icon.cacheKey():\n            for x in 'icon-data x-qt-icon-cache-key'.split():\n                ans[x] = previous[x]\n        else:\n            data = icon_to_dbus_menu_icon(ac.icon())\n            if data is not None:\n                ans['icon-data'] = data\n                ans['x-qt-icon-cache-key'] = icon.cacheKey()\n    return ans\n\ndef menu_actions(menu):\n    try:\n        return menu.actions()\n    except TypeError:\n        if isinstance(menu, QMenu):\n            return QMenu.actions(menu)\n        raise\n\nclass DBusMenu(QObject):\n\n    handle_event_signal = pyqtSignal(object, object, object, object)\n\n    def __init__(self, object_path, parent=None, bus=None):\n        QObject.__init__(self, parent)\n        # Unity barfs is the Event DBUS method does not return immediately, so\n        # handle it asynchronously\n        self.handle_event_signal.connect(self.handle_event, type=Qt.QueuedConnection)\n        self.dbus_api = DBusMenuAPI(self, object_path, bus=bus)\n        self.set_status = self.dbus_api.set_status\n        self._next_id = 0\n        self.action_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.actions_changed)\n        self.layout_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.layouts_changed)\n        self.init_maps()\n\n    @property\n    def object_path(self):\n        return self.dbus_api._object_path\n\n    def init_maps(self, qmenu=None):\n        self.action_changes = set()\n        self.layout_changes = set()\n        self.qmenu = qmenu\n        self._id_to_action, self._action_to_id = {}, {}\n        self._action_properties = {}\n\n    @property\n    def next_id(self):\n        self._next_id += 1\n        return self._next_id\n\n    def id_to_action(self, action_id):\n        if self.qmenu is None:\n            return None\n        return self._id_to_action.get(action_id)\n\n    def action_to_id(self, action):\n        if self.qmenu is None:\n            return None\n        return self._action_to_id.get(action)\n\n    def action_properties(self, action_id, restrict_to=None):\n        if self.qmenu is None:\n            return {}\n        ans = self._action_properties.get(action_id, PropDict())\n        if restrict_to:\n            ans = PropDict({k:v for k, v in ans.iteritems() if k in restrict_to})\n        return ans\n\n    def publish_new_menu(self, qmenu=None):\n        self.init_maps(qmenu)\n        if qmenu is not None:\n            qmenu.destroyed.connect(lambda obj=None:self.publish_new_menu())\n            ac = qmenu.menuAction()\n            self.add_action(ac)\n        self.dbus_api.LayoutUpdated(self.dbus_api.revision, 0)\n\n    def set_visible(self, visible):\n        ac = self.id_to_action(0)\n        if ac is not None and self.qmenu is not None:\n            changed = False\n            blocked = not visible\n            for ac in menu_actions(ac.menu()):\n                ac_id = self.action_to_id(ac)\n                if ac_id is not None:\n                    old = ac.property('blocked')\n                    if old is not blocked:\n                        ac.setProperty('blocked', blocked)\n                        self.action_changes.add(ac_id)\n                        changed = True\n            if changed:\n                self.action_changed_timer.start()\n\n    def add_action(self, ac):\n        ac_id = 0 if ac.menu() is self.qmenu else self.next_id\n        self._id_to_action[ac_id] = ac\n        self._action_to_id[ac] = ac_id\n        self._action_properties[ac_id] = create_properties_for_action(ac)\n        if ac.menu() is not None:\n            self.add_menu(ac.menu())\n\n    def add_menu(self, menu):\n        menu.installEventFilter(self)\n        for ac in menu_actions(menu):\n            self.add_action(ac)\n\n    def eventFilter(self, obj, ev):\n        ac = getattr(obj, 'menuAction', lambda : None)()\n        ac_id = self.action_to_id(ac)\n        if ac_id is not None:\n            etype = ev.type()\n            if etype == QEvent.ActionChanged:\n                ac_id = self.action_to_id(ev.action())\n                self.action_changes.add(ac_id)\n                self.action_changed_timer.start()\n            elif etype == QEvent.ActionAdded:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.add_action(ev.action())\n            elif etype == QEvent.ActionRemoved:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.action_removed(ev.action())\n        return False\n\n    def actions_changed(self):\n        updated_props = dbus.Array(signature='(ia{sv})')\n        removed_props = dbus.Array(signature='(ias)')\n        for ac_id in self.action_changes:\n            ac = self.id_to_action(ac_id)\n            if ac is None:\n                continue\n            old_props = self.action_properties(ac_id)\n            new_props = self._action_properties[ac_id] = create_properties_for_action(ac, old_props)\n            removed = set(old_props) - set(new_props)\n            if removed:\n                removed_props.append((ac_id, dbus.Array(removed, signature='as')))\n            updated = PropDict({k:v for k, v in new_props.iteritems() if v != old_props.get(k, null)})\n            if updated:\n                updated_props.append((ac_id, updated))\n        self.action_changes = set()\n        if updated_props or removed_props:\n            self.dbus_api.ItemsPropertiesUpdated(updated_props, removed_props)\n        return updated_props, removed_props\n\n    def layouts_changed(self):\n        changes = set()\n        for ac_id in self.layout_changes:\n            if ac_id in self._id_to_action:\n                changes.add(ac_id)\n        self.layout_changes = set()\n        if changes:\n            self.dbus_api.revision += 1\n            for change in changes:\n                self.dbus_api.LayoutUpdated(self.dbus_api.revision, change)\n        return changes\n\n    def action_is_in_a_menu(self, ac):\n        all_menus = {ac.menu() for ac in self._action_to_id}\n        all_menus.discard(None)\n        return bool(set(ac.associatedWidgets()).intersection(all_menus))\n\n    def action_removed(self, ac):\n        if not self.action_is_in_a_menu(ac):\n            ac_id = self._action_to_id.pop(ac, None)\n            self._id_to_action.pop(ac_id, None)\n            self._action_properties.pop(ac_id, None)\n\n    def get_layout(self, parent_id, depth, property_names):\n        # Ensure any pending updates are done, as they are needed now\n        self.actions_changed()\n        self.layouts_changed()\n        property_names = property_names or None\n        props = self.action_properties(parent_id, property_names)\n        return parent_id, props, self.get_layout_children(parent_id, depth, property_names)\n\n    def get_layout_children(self, parent_id, depth, property_names):\n        ans = dbus.Array(signature='(ia{sv}av)')\n        ac = self.id_to_action(parent_id)\n        if ac is not None and depth != 0 and ac.menu() is not None:\n            for child in menu_actions(ac.menu()):\n                child_id = self.action_to_id(child)\n                if child_id is not None:\n                    props = self.action_properties(child_id, property_names)\n                    ans.append((child_id, props, self.get_layout_children(child_id, depth - 1, property_names)))\n        return ans\n\n    def get_properties(self, ids=None, property_names=None):\n        property_names = property_names or None\n        ans = dbus.Array(signature='(ia{sv})')\n        for action_id in (ids or self._id_to_action):\n            ans.append((action_id, self.action_properties(action_id, property_names)))\n        return ans\n\n    def handle_event(self, action_id, event, data, timestamp):\n        ac = self.id_to_action(action_id)\n        if event == 'clicked':\n            if ac.isCheckable():\n                ac.toggle()\n            ac.triggered.emit(ac.isCheckable() and ac.isChecked())\n\n    def handle_about_to_show(self, ac):\n        child_ids = {self.action_to_id(x) for x in menu_actions(ac.menu())}\n        child_ids.discard(None)\n        ac_id = self.action_to_id(ac)\n        ac.menu().aboutToShow.emit()\n        if ac_id in self.layout_changes or child_ids.intersection(self.action_changes):\n            return True\n        return False\n\nclass DBusMenuAPI(Object):\n\n    IFACE = 'com.canonical.dbusmenu'\n\n    def __init__(self, menu, object_path, bus=None):\n        if bus is None:\n            bus = dbus.SessionBus()\n        Object.__init__(self, bus, object_path)\n        self.status = 'normal'\n        self.menu = menu\n        self.revision = 0\n\n    @dbus_property(IFACE, signature='u')\n    def Version(self):\n        return 3  # GTK 3 uses 3, KDE 4 uses 2\n\n    @dbus_property(IFACE, signature='s', emits_changed_signal=True)\n    def Status(self):\n        return self.status\n\n    def set_status(self, normal=True):\n        self.status = 'normal' if normal else 'notice'\n        self.PropertiesChanged(self.IFACE, {'Status': self.status}, [])\n\n    @dbus_property(IFACE, signature='s')\n    def TextDirection(self):\n        return 'ltr' if QApplication.instance().isLeftToRight() else 'rtl'\n\n    @dbus_property(IFACE, signature='as')\n    def IconThemePath(self):\n        return dbus.Array(signature='s')\n\n    @dbus_method(IFACE, in_signature='iias', out_signature='u(ia{sv}av)')\n    def GetLayout(self, parentId, recursionDepth, propertyNames):\n        layout = self.menu.get_layout(parentId, recursionDepth, propertyNames)\n        return self.revision, layout\n\n    @dbus_method(IFACE, in_signature='aias', out_signature='a(ia{sv})')\n    def GetGroupProperties(self, ids, propertyNames):\n        return self.menu.get_properties(ids, propertyNames)\n\n    @dbus_method(IFACE, in_signature='is', out_signature='v')\n    def GetProperty(self, id, name):\n        return self.menu.action_properties(id).get(name, '')\n\n    @dbus_method(IFACE, in_signature='isvu', out_signature='')\n    def Event(self, id, eventId, data, timestamp):\n        ''' This is called by the applet to notify the application an event happened on a\n        menu item. eventId can be one of the following::\n            * \"clicked\"\n            * \"hovered\"\n            * \"opened\"\n            * \"closed\"\n        Vendor specific events can be added by prefixing them with \"x-<vendor>-\"'''\n        if self.menu.id_to_action(id) is not None:\n            self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n\n    @dbus_method(IFACE, in_signature='a(isvu)', out_signature='ai')\n    def EventGroup(self, events):\n        ''' Used to pass a set of events as a single message for possibily\n        several different menuitems.  This is done to optimize DBus traffic.\n        Should return a list of ids that are not found. events is a list of\n        events in the same format as used for the Event method.'''\n        missing = dbus.Array(signature='u')\n        for id, eventId, data, timestamp in events:\n            if self.menu.id_to_action(id) is not None:\n                self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n            else:\n                missing.append(id)\n        return missing\n\n    @dbus_method(IFACE, in_signature='i', out_signature='b')\n    def AboutToShow(self, id):\n        ac = self.menu.id_to_action(id)\n        if ac is not None and ac.menu() is not None:\n            return self.menu.handle_about_to_show(ac)\n        return False\n\n    @dbus_method(IFACE, in_signature='ai', out_signature='aiai')\n    def AboutToShowGroup(self, ids):\n        updates_needed = dbus.Array(signature='i')\n        id_errors = dbus.Array(signature='i')\n        for ac_id in ids:\n            ac = self.menu.id_to_action(id)\n            if ac is not None and ac.menu() is not None:\n                if self.menu.handle_about_to_show(ac):\n                    updates_needed.append(ac_id)\n            else:\n                id_errors.append(ac_id)\n        return updates_needed, id_errors\n\n    @dbus_signal(IFACE, 'a(ia{sv})a(ias)')\n    def ItemsPropertiesUpdated(self, updatedProps, removedProps):\n        pass\n\n    @dbus_signal(IFACE, 'ui')\n    def LayoutUpdated(self, revision, parent):\n        pass\n\n    @dbus_signal(IFACE, 'iu')\n    def ItemActivationRequested(self, id, timestamp):\n        pass\n\ndef test():\n    setup_for_cli_run()\n    app = QApplication([])\n    bus = dbus.SessionBus()\n    dbus_name = BusName('com.calibre-ebook.TestDBusMenu', bus=bus, do_not_queue=True)\n    m = QMenu()\n    ac = m.addAction(QIcon(I('window-close.png')), 'Quit', app.quit)\n    ac.setShortcut(QKeySequence('Ctrl+Q'))\n    menu = DBusMenu('/Menu', bus=bus)\n    menu.publish_new_menu(m)\n    app.exec_()\n    del dbus_name\n\nif __name__ == '__main__':\n    test()\n\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ndef generate_regex():\n    return r'^(?:even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|even|",
        "target": "```python\nimport re\npattern = re.compile(r'[6-9]|[2-4][0-9]')\n```\n"
    },
    {
        "generated": "```python\nimport requests\nimport json\n\ndef get_latest_posts():\n    url = 'https://oauth.reddit.com/r/AskReddit/.json'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    data = response.json()\n    posts = data['data']['children']\n    latest_posts = [post['data'] for post in posts[-10:]]\n    return latest_posts\n\nlatest_posts = get_latest_posts()\nfor post in latest_posts:\n    print(post['title'], post['url'])\n```",
        "target": "```python\nimport praw\n\nreddit = praw.Reddit('bot1')\n\nlatest_posts = [] \nfor submission in reddit.subreddit('all').new(limit=10):\n latest_posts.append(submission.title)\n \nprint(latest_posts)\n```\n"
    },
    {
        "generated": "```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\n# Example usage:\nprint(quicksort([3,6,8,10,1,2,1]))\n```",
        "target": "```python\ndef quicksort(arr):\n    # base case for recursion\n    if len(arr) <= 1:\n        return arr\n    # pick pivot element and get its index\n    pivot = arr[0]\n    index = 0\n    # create left and right lists\n    left = []\n    right = []\n    # loop over the array from index 1\n    for i in range(1, len(arr)):\n        # if element is less than pivot, append to left list\n        if arr[i] < pivot:\n            left.append(arr[i])\n        # else, append to right list\n        else:\n            right.append(arr[i])\n    # recursively call function on left and right lists\n    sorted_arr = quicksort(left) + [pivot] + quicksort(right)\n    return sorted_arr\n\nresult = quicksort(arr)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\n# class Node:\n#     def __init__(self, value, left=None, right=None):\n#         self.value = value\n#         self.left = left\n#         self.right = right\n\n# class BinaryTree:\n#     def __init__(self, root):\n#         self.root = root\n\n# def parse_tree(instructions):\n#     # Create the root node\n#     root = Node(instructions[0])\n#     stack = [root]\n#     i = 1\n#     while i < len(instructions):\n#         # Pop a node from the stack\n#         node = stack.pop()\n#         # If the node has a left child\n#         if node.left is not None:\n#             # Push the left child onto the stack\n#             stack.append(node.left)\n#         # If the node has a right child\n#         if node.right is not None:\n#             # Push the right child onto the stack\n#             stack.append(node.right)\n#         # Create a new node\n#         new_node = Node(instructions[i])\n#         # Set the left child of the current node to the new node\n#         node.left = new_node\n#         # Increment the index\n#         i += 1\n#         # Push the new node onto the stack\n#         stack.append(new_node)\n#     return BinaryTree(root)\n```",
        "target": "```python\nimport collections\n\n# Create a tree using a Python dictionary\nParseTree = collections.defaultdict(dict)\n\n# Function to add a node to the tree\ndef add_node(parent, child):\n    ParseTree[parent][child] = {}\n\n# Function to traverse the tree\ndef traverse_tree(node):\n    # Base case\n    if len(ParseTree[node]) == 0:\n        return\n    \n    for key, value in ParseTree[node].items():\n        print(\"{}-->{}\".format(node, key))\n        traverse_tree(key)\n```\n"
    },
    {
        "generated": "```python\ndef intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(intersection(list1, list2))  # Output: [4, 5]\n```",
        "target": "```python\ndef intersection(list1, list2): \n    return list(set(list1) & set(list2)) \n\n# Output: [3, 6]\n```\n"
    },
    {
        "generated": "```python\ndef is_valid_ipv4_address(ip_address):\n    parts = ip_address.split('.')\n    if len(parts)!= 4:\n        return False\n    for part in parts:\n        if not part.isdigit() or not 0 <= int(part) <= 255:\n            return False\n    return True\n\n# Example usage\nprint(is_valid_ipv4_address('192.168.1.1'))  # True\nprint(is_valid_ipv4_address('256.1.1.1'))    # False\nprint(is_valid_ipv4_address('192.168.1'))    # False\n```",
        "target": "```python\ndef check_valid_ip(ip_addr): \n    ip = ip_addr.split(\".\") \n    if(len(ip) == 4 and \n        int(ip[0]) <= 255 and \n        int(ip[1]) <= 255 and \n        int(ip[2]) <= 255 and \n        int(ip[3]) <= 255): \n        return True\n    else: \n        return False\n```\n"
    },
    {
        "generated": "```python\n# Import necessary libraries\nfrom bs4 import BeautifulSoup\nimport re\nimport requests\n\n# Function to optimize web page for SEO\ndef optimize_web_page(url):\n    # Send HTTP request to the URL\n    response = requests.get(url)\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Parse the HTML content using BeautifulSoup\n        soup = BeautifulSoup(response.text, 'html.parser')\n        \n        # Find all meta tags\n        meta_tags = soup.find_all('meta')\n        \n        # Iterate over each meta tag\n        for tag in meta_tags:\n            # Extract the charset and viewport meta tags\n            if tag.get('charset'):\n                tag['charset'] = 'UTF-8'\n            if tag.get('viewport'):\n                tag['viewport'] = 'width=device-width, initial-scale=1.0'\n        \n        # Find all header tags\n        header_tags = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\n        \n        # Iterate over each header tag\n        for tag in header_tags:\n            # Use regular expression to extract the text and replace it with a shorter version\n            text = re.sub(r'\\s+','', tag.text)\n            tag.text = text[:60] + '...'\n        \n        # Find all image tags\n        image_tags = soup.find_all('img')\n        \n        # Iterate over each image tag\n        for tag in image_tags:\n            # Use regular expression to extract the alt text and replace it with a shorter version\n            alt_text = re.sub(r'\\s+','', tag.get('alt'))\n            if alt_text:\n                tag['alt'] = alt_text[:60] + '...'\n        \n        # Return the optimized HTML content\n        return str(soup)\n    else:\n        return None\n\n# Main function\ndef main():\n    url = 'https://www.example.com'  # Replace with the URL of the web page to optimize\n    optimized_html = optimize_web_page(url)\n    if optimized_html:\n        with open('optimized_html.html', 'w') as file:\n            file.write(optimized_html)\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n```",
        "target": "```python\nimport re\nimport requests\n\ndef optimize_webpage(url):\n    r = requests.get(url, timeout=5)\n    content = r.text\n    content = content.lower()\n    title = re.search('<title>(.*)</title>', content)\n    title_text = title.group(1).strip()\n    content = content.replace(title_text, title_text.lower())\n    keywords = re.findall('<meta name=\"keywords\" content=\"(.*)\">', content)\n    for word in keywords:\n        if word.strip():\n            content = content.replace(word, word.lower())\n\n    description = re.findall('<meta name=\"description\" content=\"(.*)\">', content)\n    for desc in description:\n        if desc.strip():\n            content = content.replace(desc, desc.lower())\n    return content\n```\n"
    },
    {
        "generated": "```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport pandas as pd\nimport numpy as np\n\n# Custom dataset class for sentiment analysis\nclass SentimentDataset(Dataset):\n    def __init__(self, text_data, labels):\n        self.text_data = text_data\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.text_data)\n\n    def __getitem__(self, idx):\n        text = self.text_data[idx]\n        label = self.labels[idx]\n\n        # Preprocess the text data\n        text = text.lower()\n        text = text.split()\n\n        # Create a tensor for the text data\n        text_tensor = torch.tensor(text, dtype=torch.long)\n\n        return text_tensor, torch.tensor(label, dtype=torch.long)\n\n# Load the dataset\ntrain_data = pd.read_csv('train_data.csv')\ntest_data = pd.read_csv('test_data.csv')\n\n# Create the dataset and data loader\ntrain_dataset = SentimentDataset(train_data['text'], train_data['label'])\ntest_dataset = SentimentDataset(test_data['text'], test_data['label'])\n\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n\n# Define the RNN model\nclass SentimentRNN(nn.Module):\n    def __init__(self):\n        super(SentimentRNN, self).__init__()\n        self.rnn = nn.RNN(input_size=100, hidden_size=128, num_layers=1, batch_first=True)\n        self.fc = nn.Linear(128, 2)\n\n    def forward(self, x):\n        h0 = torch.zeros(1, x.size(0), 128).to(x.device)\n        out, _ = self.rnn(x, h0)\n        out = self.fc(out[:, -1, :])\n        return out\n\n# Initialize the model, optimizer, and loss function\nmodel = SentimentRNN()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# Train the model\nfor epoch in range(10):\n    for batch in train_loader:\n        input_text, labels = batch\n        input_text = input_text.to(device='cuda' if torch.cuda.is_available() else 'cpu')\n        labels = labels.to(device='cuda' if torch.cuda.is_available() else 'cpu')\n\n        optimizer.zero_grad()\n\n        outputs = model(input_text)\n        loss = criterion(outputs, labels)\n\n        loss.backward()\n        optimizer.step()\n\n    print(f'Epoch {epoch+1}, Loss: {loss.item()}')\n```",
        "target": "```python\n# Load the required libraries\nimport numpy as np\nimport tensorflow\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n\n# Load the training dataset\nsentences = ['This is a good sentiment', 'This is a bad sentiment']\nlabels = [1, 0]\n\n# Create the tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(sentences)\n\n# Encode  the sentences\nencoded_sentences = tokenizer.texts_to_sequences(sentences)\npadded_sentences = pad_sequences(encoded_sentences, maxlen=10)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=32, input_length=10))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile and fit the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(padded_sentences, labels, epochs=10) \n\n# Evaluate the model\nscores = model.evaluate(padded_sentences, labels) \nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))\n```\n"
    },
    {
        "generated": "```python\ndef quadratic_roots(a, b, c):\n    \"\"\"\n    Calculate the roots of a quadratic equation using the quadratic formula.\n    \n    Parameters:\n    a (float): The coefficient of x^2.\n    b (float): The coefficient of x.\n    c (float): The constant term.\n    \n    Returns:\n    tuple: A tuple containing the two roots of the equation.\n    \"\"\"\n    import math\n    determinant = b**2 - 4*a*c\n    root1 = (-b + math.sqrt(determinant)) / (2 * a)\n    root2 = (-b - math.sqrt(determinant)) / (2 * a)\n    return root1, root2\n\n# Example usage:\nif __name__ == \"__main__\":\n    a = float(input(\"Enter the coefficient of x^2: \"))\n    b = float(input(\"Enter the coefficient of x: \"))\n    c = float(input(\"Enter the constant term: \"))\n    root1, root2 = quadratic_roots(a, b, c)\n    print(f\"The roots of the equation are {root1} and {root2}\")\n```",
        "target": "```python\nimport math\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3))\n```\n"
    },
    {
        "generated": "```python\ndef add_two_numbers(a, b):\n    return a + b\n```",
        "target": "```python\ndef add(a, b):\n    return a + b\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport numpy as np\n\ndef genetic_algorithm(population_size, mutation_rate, max_generations, problem):\n    # Initialize the population\n    population = [random.randint(0, 100) for _ in range(population_size)]\n\n    for generation in range(max_generations):\n        # Select the fittest individuals\n        fittest_individuals = sorted(population, key=lambda x: problem(x))\n        fittest_individuals = fittest_individuals[:population_size//2]\n\n        # Create a new generation\n        new_generation = []\n        for _ in range(population_size):\n            parent1 = random.choice(fittest_individuals)\n            parent2 = random.choice(fittest_individuals)\n            child = (parent1 + parent2) // 2\n            if random.random() < mutation_rate:\n                child += random.randint(-10, 10)\n            new_generation.append(child)\n\n        # Replace the least fit individuals with the new generation\n        population = fittest_individuals + new_generation\n\n    # Return the best individual\n    return max(population, key=lambda x: problem(x))\n\n# Example usage\ndef problem(x):\n    return x**2\n\nprint(genetic_algorithm(100, 0.01, 100, problem))\n```",
        "target": "```python\nimport random\nimport numpy as np\n\n# Define the function\ndef f(x, y):\n    return (x**2) + (2*y**2)\n\n# Define parameters for genetic algorithm\npop_size = 25 \nnum_generations = 100\n\n# Create initial random starting population\npop = np.random.rand(pop_size, 2) \nscores = np.array([f(*member) for member in pop])\n\n# Iterate over the generations\nfor i in range(num_generations):\n    # Create mating pool\n    mating_pool=np.random.choice(np.arange(pop_size), replace=False, size=(round(pop_size/2), 2)) \n    offspring = np.empty_like(mating_pool) \n    # Create offspring\n    for parent_idx, child_idx in enumerate(mating_pool):\n        parent_1 = pop[child_idx[0]]\n        parent_2 = pop[child_idx[1]]\n\n        # Generate offspring\n        child_1 = np.random.uniform(low=min(parent_1, parent_2),high=max(parent_1, parent_2)) \n        child_2 = np.random.choice([child_1[0],child_1[1]])\n        offspring[parent_idx] = [child_1[0], child_2]\n\n    # Evaluate offspring\n    scores_offspring = np.array([f(*member) for member in offspring])\n    # Generate mating pool for next iteration\n    mating_pool = np.concatenate((pop,offspring))\n    scores = np.concatenate((scores,scores_offspring))\n    pop = mating_pool\n    # Select best individuals\n    best_idx = np.argsort(scores)[:pop_size] \n    pop = mating_pool[best_idx]\n\n# Find global minimum\nglobal_minimum = np.min(scores) \n\nprint('Global minimum is ',global_minimum)\n```\n"
    },
    {
        "generated": "```python\n# \nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\nfor _ in range(num):\n    print(string)\n```",
        "target": "```python\nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)\n```\n"
    },
    {
        "generated": "```python\ndef largest_number(lst):\n    return max(lst)\n\nnumbers = [12, 45, 7, 23, 56, 89, 34]\nprint(\"Largest Number:\", largest_number(numbers))\n```",
        "target": "```python\ndef largestNumber(list): \n    max_num = 0\n    for i in list:  \n        if i > max_num: \n            max_num = i \n    return max_num \n  \n\nlist = [3, 6, 4, 8, 1]\nlargestNumber = largestNumber(list) \nprint(\"Largest element in the list is: \", largestNumber);\n```\n"
    },
    {
        "generated": "```python\ndef largest_number(lst):\n    return max(lst)\n\n# Example usage:\nnumbers = [12, 45, 7, 23, 56, 89, 34]\nprint(largest_number(numbers))\n```",
        "target": "```python\nmy_list = [1, 5, 10, 20, 8]\n\nlargest = max(my_list)\nprint(\"The largest number from the given list is: \" + str(largest))\n```\n"
    },
    {
        "generated": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(factorial(5))\n```",
        "target": "```python\ndef factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)\n```\n"
    },
    {
        "generated": "```python\n# Greeting Program\n\ndef personalize_greeting(name):\n    greeting = f\"Hello, {name}!\"\n    print(greeting)\n\ndef main():\n    name = input(\"Please enter your name: \")\n    personalize_greeting(name)\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nname = input(\"Please enter your name: \")\n\nif name == \"Alice\":\n    print(\"Welcome, Alice! Here are some personalized recommendations:\")\n    print(\"1. Movie recommendations\")\n    print(\"2. Restaurant recommendations\")\n    print(\"3. Shopping recommendations\")\nelse:\n    print(\"Welcome! Please check out our general recommendations:\")\n    print(\"1. Popular movies\")\n    print(\"2. Popular restaurants\")\n    print(\"3. Popular shopping stores\")\n```\n"
    },
    {
        "generated": "```python\n# Define a class to represent a sale\nclass Sale:\n    def __init__(self, date, product, quantity, price):\n        self.date = date\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n\n# Define a class to represent a sales report\nclass SalesReport:\n    def __init__(self):\n        self.sales = []\n\n    def add_sale(self, sale):\n        self.sales.append(sale)\n\n    def calculate_total(self):\n        total = sum(sale.price * sale.quantity for sale in self.sales)\n        return total\n\n    def calculate_average(self):\n        total = self.calculate_total()\n        average = total / len(self.sales)\n        return average\n\n    def print_report(self):\n        print(\"Sales Report:\")\n        for sale in self.sales:\n            print(f\"Date: {sale.date}, Product: {sale.product}, Quantity: {sale.quantity}, Price: {sale.price}\")\n        print(f\"Total Sales: ${self.calculate_total():.2f}\")\n        print(f\"Average Sales: ${self.calculate_average():.2f}\")\n\n# Create a sales report\nreport = SalesReport()\n\n# Add sales to the report\nreport.add_sale(Sale(\"2022-01-01\", \"Product A\", 10, 100))\nreport.add_sale(Sale(\"2022-01-02\", \"Product B\", 20, 200))\nreport.add_sale(Sale(\"2022-01-03\", \"Product A\", 15, 150))\n\n# Print the sales report\nreport.print_report()\n```",
        "target": "```python\nimport csv\n\n# A list of dictionaries containing sales data\nsales_data = [\n { 'name': 'John', 'quantity': 2, 'price': 10.0 },\n { 'name': 'Jane', 'quantity': 3, 'price': 15.0 },\n { 'name': 'Mike', 'quantity': 4, 'price':\n```\n"
    },
    {
        "generated": "```python\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\n# Test the function\nprint(celsius_to_fahrenheit(0))\n```",
        "target": "```python\ndef convert_celsius(celsius):\n # Convert celsius to Fahrenheit\n fahrenheit = celsius * 9/5 + 32\n\n # Return fahrenheit value\n return fahrenheit\n\n# Test\ncelsius = 32\nprint(convert_celsius(celsius))\n```\n"
    },
    {
        "generated": "```python\nclass JobOffer:\n    def __init__(self, title, description, salary, company):\n        self.title = title\n        self.description = description\n        self.salary = salary\n        self.company = company\n\n    def details(self):\n        return f\"Title: {self.title}\\nDescription: {self.description}\\nSalary: {self.salary}\\nCompany: {self.company}\"\n```",
        "target": "```python\nclass JobOffer:\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    \n    def get_title(self):\n        return self.title\n    \n    def get_salary(self):\n        return self.salary\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Generate random dataset for binary classification\nnp.random.seed(0)\nX = np.random.randint(0, 2, size=(1000, 10))  # 1000 samples, 10 features\ny = np.random.randint(0, 2, size=(1000,))  # 1000 labels\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and train the neural network\nmlp = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000, random_state=42)\nmlp.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = mlp.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Model Accuracy: {accuracy:.3f}\")\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, y_pred))\n```",
        "target": "```python\n# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))\n```\n"
    },
    {
        "generated": "```python\n# A Python script to generate the pattern of triangles and squares\ndef pattern(n):\n    for i in range(1, n + 1):\n        for j in range(i):\n            print(' ', end='')\n        for k in range(i):\n            print('*' if k == 0 or k == i - 1 else'' if j!= i - 1 else '*', end=' ')\n        print()\n\n# Test the function\nn = 5\npattern(n)\n```",
        "target": "```python\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(\"*\", end=\" \")\n    print()\n```\n"
    },
    {
        "generated": "```python\ndef is_substring(s1, s2):\n    return s2 in [s1 + x for x in 'abcdefghijklmnopqrstuvwxyz']\n\n# Alternatively, using the built-in 'in' operator for strings\ndef is_substring_builtin(s1, s2):\n    return s1 in s2\n```",
        "target": "```python\ndef is_substring(string1, string2): \n    if string1 in string2:\n        return True\n    else:\n        return False\n```\n"
    },
    {
        "generated": "```python\nfruits = [\"apple\", \"banana\", \"lemon\", \"mango\"]\n```",
        "target": "```python\nmy_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]\n```\n"
    },
    {
        "generated": "```python\n# Import necessary libraries\nimport statistics\nimport collections\n\n# Function to calculate mean\ndef calculate_mean(numbers):\n    return sum(numbers) / len(numbers)\n\n# Function to calculate median\ndef calculate_median(numbers):\n    return statistics.median(numbers)\n\n# Function to calculate mode\ndef calculate_mode(numbers):\n    mode = statistics.mode(numbers)\n    if mode is None:\n        return \"No unique mode found\"\n    return mode\n\n# Function to analyze data\ndef analyze_data(numbers):\n    mean = calculate_mean(numbers)\n    median = calculate_median(numbers)\n    mode = calculate_mode(numbers)\n    return mean, median, mode\n\n# Test the function with input\nnumbers = [1, 2, 3, 4, 4, 5, 5, 5]\nmean, median, mode = analyze_data(numbers)\nprint(f\"Mean: {mean}\")\nprint(f\"Median: {median}\")\nprint(f\"Mode: {mode}\")\n```",
        "target": "```python\ndef mean(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total / len(arr)\n\ndef median(arr):\n  arr.sort()\n  if len(arr) % 2 != 0:\n    median_index = int(len(arr) / 2)\n    return arr[median_index]\n  else:\n    lower_index = int(len(arr) / 2) - 1\n    upper_index = int(len(arr) / 2)\n    return (arr[lower_index] + arr[upper_index]) / 2\n\ndef mode(arr):\n  counts = {}\n  for num in arr:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n\n  max_frequency = 0\n  max_value = None\n  for num, frequency in counts.items():\n    if frequency > max_frequency:\n      max_frequency = frequency\n      max_value = num\n\n  return max_value\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nmean = mean(nums)\nmedian = median(nums)\nmode = mode(nums)\n\nprint(f'Mean: {mean}, Median: {median}, Mode: {mode}')\n```\n"
    },
    {
        "generated": "```python\ndef odd_numbers(arr):\n    return sorted([num for num in arr if num % 2!= 0], reverse=True)\n\n# Example usage:\nnumbers = [12, 5, 8, 3, 9, 15]\nprint(odd_numbers(numbers))\n```",
        "target": "```python\ndef extract_odd(arr):\n    odd = [x for x in arr if x % 2 != 0]\n    return sorted(odd, reverse = True)\n\narr = [1, 8, 5, 9, 12, 17]\nprint(extract_odd(arr)) # Output: [17, 9, 5, 1]\n```\n"
    },
    {
        "generated": "```python\n# lst = [1, 2, 3, 4, 5]  # Example input\n# print(lst[-1])  # Fetch the last element\n```",
        "target": "```python\nmy_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))\n```\n"
    },
    {
        "generated": "```python\n# Calculate the average age of a group of people\ndef calculate_average_age(ages):\n    return sum(ages) / len(ages)\n\n# Example usage\nages = [25, 32, 43, 51, 61]\naverage_age = calculate_average_age(ages)\nprint(\"The average age of the group is:\", average_age)\n```",
        "target": "```python\ndef calculate_average_age(names, ages):\n    result = 0\n    for i in range(len(names)):\n        result += ages[i]\n    return round(result / len(names), 2)\n\nnames = ['Bob', 'Jack', 'John', 'David']\nages = [12, 27, 45, 16]\n\nprint(calculate_average_age(names, ages))\n```\n"
    },
    {
        "generated": "```python\ndef parse_character_separated_string(input_string):\n    \"\"\"\n    Parse a character-separated string into a list of characters.\n\n    Args:\n        input_string (str): The input string to be parsed.\n\n    Returns:\n        list: A list of characters.\n    \"\"\"\n    return list(input_string)\n\n# Example usage\ninput_string = \"Hello, World!\"\nparsed_string = parse_character_separated_string(input_string)\nprint(parsed_string)\n```",
        "target": "```python\ndef parse_str(str, separator):\n    strList = str.split(separator) \n    return strList\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef visualize_pandas_dataframe(df):\n    # Create a figure and a set of subplots\n    fig, ax = plt.subplots()\n\n    # Iterate over the columns of the DataFrame\n    for i, col in enumerate(df.columns):\n        # Plot the column as a line\n        ax.plot(df[col], label=col)\n\n    # Set the title and labels\n    ax.set_title('Pandas DataFrame Visualization')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n\n    # Add a legend\n    ax.legend()\n\n    # Show the plot\n    plt.show()\n\n# Example usage\ndf = pd.DataFrame({\n    'A': [1, 2, 3, 4, 5],\n    'B': [2, 4, 6, 8, 10],\n    'C': [3, 6, 9, 12, 15]\n})\n\nvisualize_pandas_dataframe(df)\n```",
        "target": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],\n    'Age': [18, 25, 35, 45]\n})\n\nax = df.plot.bar(x='Name', y='Age', rot=0)\n\nplt.show()\n```\n"
    },
    {
        "generated": "```python\ndef print_factors(n):\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    print(f\"The factors of {n} are: {factors}\")\n\n# Example usage:\nn = int(input(\"Enter a number: \"))\nprint_factors(n)\n```",
        "target": "```python\ndef factor_of(n):\n    result = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n    return result\n```\n"
    },
    {
        "generated": "```python\n# code\ndef calculate_area(length, width):\n    return length * width\n\ndef calculate_perimeter(length, width):\n    return 2 * (length + width)\n\nlength = 10\nwidth = 20\n\narea = calculate_area(length, width)\nperimeter = calculate_perimeter(length, width)\n\nprint(f\"Area: {area}\")\nprint(f\"Perimeter: {perimeter}\")\n```",
        "target": "```python\nprint(\"Hello World\")\n```\n"
    },
    {
        "generated": "```python\n# Import the statistics module for calculating the median\nimport statistics\n\n# Get 5 numbers from the user\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\nnum3 = float(input(\"Enter the third number: \"))\nnum4 = float(input(\"Enter the fourth number: \"))\nnum5 = float(input(\"Enter the fifth number: \"))\n\n# Store the numbers in a list\nnumbers = [num1, num2, num3, num4, num5]\n\n# Calculate and print the median\nmedian = statistics.median(numbers)\nprint(\"The median of the numbers is:\", median)\n```",
        "target": "```python\nnums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2\nelse:\n ans = nums[len(nums) // 2]\n \nprint(\"Median of the given numbers is: \" + str(ans))\n```\n"
    },
    {
        "generated": "```python\n# def pig_latin(word):\n#     if word[0] in 'aeiou':\n#         return word + 'way'\n#     else:\n#         vowel_index = 0\n#         while word[vowel_index] in 'aeiou':\n#             vowel_index += 1\n#         return word[vowel_index:] + word[:vowel_index] + 'ay'\n\n# def pig_latin_string(input_string):\n#     return''.join(pig_latin(word) for word in input_string.split())\n\n# print(pig_latin_string('hello world'))\n```",
        "target": "```python\ndef pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)\n```\n"
    },
    {
        "generated": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nprimes = get_primes(100)\nfor prime in primes:\n    print(prime)\n```",
        "target": "```python\ndef get_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n+1): \n        for i in range(2, num): \n            if num % i == 0:\n                break\n        else:\n            prime_numbers.append(num) \n    return prime_numbers\n\nprint(get_prime_numbers(100))\n```\n"
    },
    {
        "generated": "```python\nimport string\nimport re\n\ndef clean_text(text):\n    # Remove punctuation\n    text_no_punct = re.sub('['+string.punctuation+']', '', text)\n    \n    # Remove white space\n    text_no_space = re.sub('\\s', '', text_no_punct)\n    \n    # Convert to lower case\n    text_lower = text_no_space.lower()\n    \n    return text_lower\n\n# Example usage:\ntext = \"Hello, World! This is a test.\"\ncleaned_text = clean_text(text)\nprint(cleaned_text)\n```",
        "target": "```python\nimport re\n\ndef clean_text(text):\n cleaned_text = re.sub(r'[^\\w\\s]','', text)\n cleaned_text = cleaned_text.lower().strip()\n return cleaned_text\n \n text = 'This is a sample sentence.'\n cleaned_text = clean_text(text)\n print(cleaned_text)\n\n# Output: thisisasamplesentence\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_random_list():\n    numbers = list(range(1, 21))\n    random.shuffle(numbers)\n    return numbers\n\nrandom_list = generate_random_list()\nprint(random_list)\n```",
        "target": "```python\nimport random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator())\n```\n"
    },
    {
        "generated": "```python\n# import the random module\nimport random\n\n# define a function to shuffle the list\ndef shuffle_list(input_list):\n    # use the random.shuffle function to shuffle the list in-place\n    random.shuffle(input_list)\n\n# test the function with a sample list\ninput_list = [1, 2, 3, 4, 5]\nprint(\"Original List:\", input_list)\nshuffle_list(input_list)\nprint(\"Shuffled List:\", input_list)\n```",
        "target": "```python\nimport random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis)\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_password(length):\n    all_characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(all_characters) for i in range(length))\n    return password\n\nlength = 10\npassword = generate_password(length)\nprint(password)\n```",
        "target": "```python\nimport string\nimport random\n\ndef generatePassword():\n    # Generate list of lowercase and uppercase letters\n    letters = string.ascii_letters\n    # Generate a random string with length 10 \n    password = ''.join(random.choice(letters) for i in range(10)) \n    return password\n\nprint(generatePassword())\n```\n"
    },
    {
        "generated": "```python\ndef find_duplicates(nums):\n    count_dict = {}\n    duplicates = []\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count > 1:\n            duplicates.append(num)\n    return duplicates\n\n# Example usage\nnums = [1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 1, 2, 3]\nprint(find_duplicates(nums))  # Output: [1, 2, 3]\n```",
        "target": "```python\ndef extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result\n```\n"
    },
    {
        "generated": "```python\n# Define a function to process the queues\ndef process_queues(queues):\n    # Iterate over each queue and print its front element\n    for queue in queues:\n        # Check if the queue is not empty\n        if queue:\n            print(queue[0])\n\n# Example usage:\n# Create a list of queues\nqueues = [[1, 2, 3], [4, 5], [6]]\n\n# Process the queues\nprocess_queues(queues)\n```",
        "target": "```python\ndef print_front_elements_from_queues(queue_list):\n    for queue in queue_list:\n        print(queue[0])\n\nqueue_list = [queue1, queue2]\n\nprint_front_elements_from_queues(queue_list) # This should print 5 and 7\n```\n"
    },
    {
        "generated": "```python\ndef largest_element(lst):\n    return max(lst)\n```",
        "target": "```python\ndef maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)\n```\n"
    }
]