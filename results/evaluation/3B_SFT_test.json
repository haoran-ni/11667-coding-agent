[
    {
        "generated": "```python\nimport wikipedia\n\ndef categorize_articles(articles):\n    categories = {}\n    for article in articles:\n        category = wikipedia.get_category(article)\n        if category not in categories:\n            categories[category] = []\n        categories[category].append(article)\n    return categories\n```",
        "target": "```python\nimport wikipedia\n\narticles = ['Advanced Dungeons & Dragons',\n            'The Legend of Zelda',\n            'Mario Kart']\n\nfor article in articles:\n page = wikipedia.page(title=article)\n print(article, page.categories)\n\n# Output:\n# Advanced Dungeons & Dragons ['Books about games', 'Dungeons & Dragons', 'Role-playing game books']\n# The Legend of Zelda ['1986 video games', 'Action-adventure games', 'High fantasy video games', 'Nintendo franchises', 'The Legend of Zelda']\n# Mario Kart ['1992 video games', 'Kart racing video games', 'Mario Kart', 'Nintendo franchises', 'Racing video games', 'Video games developed in Japan']\n```\n"
    },
    {
        "generated": "```python\ndef intersection(list1, list2):\n    return list(set(list1) & set(list2))\n\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\n\nprint(intersection(list1, list2))\n```",
        "target": "```python\ndef intersection(list1, list2):\n    intersection = [value for value in list1 if value in list2]\n    return intersection\n\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\nresult = intersection(list1, list2)\nprint(result) # prints [4,5]\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\n\n# Read the data\ndata = pd.read_csv('data.csv')\n\n# Generate the report\nreport = data.describe()\n\n# Print the report\nprint(report)\n```",
        "target": "```python\nimport pandas as pd \n\n# Load data from the orders table \norders = pd.read_csv('orders.csv')\n\n# Generate summary statistics for the orders table \nsummary_stats = orders.describe()\n\n# Generate a report containing summary statistics \nreport = open('report.html', 'w') \nreport.write(summary_stats.to_html()) \nreport.close()\n```\n"
    },
    {
        "generated": "```python\nfor i in range(0,101):\n    if i % 2 == 0:\n        print(i)\n```",
        "target": "```python\nfor i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)\n```\n"
    },
    {
        "generated": "```python\ndef common_elements(list_of_lists):\n    result = []\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if j in [k for k in range(len(list_of_lists)) if i == k]:\n                result.append(list_of_lists[i][j])\n    return result\n```",
        "target": "```python\ndef get_common_elements(list_of_lists): \n    commons = []\n    for i in range(len(list_of_lists)): \n        commons = list(set(commons).intersection(list_of_lists[i]))\n    return commons\n```\n"
    },
    {
        "generated": "```python\ndef multiply(a, b):\n    if b == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a + multiply(a, b-1)\n```",
        "target": "```python\ndef multiply(x, y):\n\tif y == 0:\n\t\treturn 0\n\telse:\n\t\treturn x + multiply(x, y - 1)\n```\n"
    },
    {
        "generated": "```python\ndef merge_sorted_lists(list1, list2):\n    result_list = []\n    while len(list1) > 0 and len(list2) > 0:\n        if list1[0] <= list2[0]:\n            result_list.append(list1[0])\n            list1.pop(0)\n        else:\n            result_list.append(list2[0])\n            list2.pop(0)\n    result_list.extend(list1)\n    result_list.extend(list2)\n    return result_list\n\nlist1 = [1, 3, 5, 7, 9]\nlist2 = [2, 4, 6, 8, 10]\nprint(merge_sorted_lists(list1, list2))\n```",
        "target": "```python\nlist_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\ndef merge_sorted_lists(list_a, list_b):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i+=1\n        else:\n            merged_list.append(list_b[j])\n            j+=1\n    while i < len(list_a):\n        merged_list.append(list_a[i])\n        i+=1\n    while j < len(list_b):\n        merged_list.append(list_b[j])\n        j+=1\n    return merged_list\n```\n"
    },
    {
        "generated": "```python\ndef compare_strings(string1, string2):\n    if string1 == string2:\n        return True\n    else:\n        return False\n```",
        "target": "```python\ndef compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                return False\n    return True\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n# Example\nn = 10\nprint(fibonacci(n)) # 55\n```",
        "target": "```python\ndef fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n if n in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n if n > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10))\n```\n"
    },
    {
        "generated": "```python\ndef calculate_simple_interest(principal, rate, duration):\n    return (principal * rate * duration) / 100\n\nprincipal = 1000\nrate = 10\nduration = 5\n\nsimple_interest = calculate_simple_interest(principal, rate, duration)\nprint('Simple Interest is', simple_interest, '!')\n```",
        "target": "```python\ndef calculateSimpleInterest(principal, rate, duration):\n    if rate != 0:\n        interest = (principal * rate * duration) / 100\n    else:\n        interest = 0\n    return interest\n```\n"
    },
    {
        "generated": "```python\ndef char_frequency(string):\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n```",
        "target": "```python\ndef count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n```\n"
    },
    {
        "generated": "```python\ndef check_string(s):\n    valid_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')\n    for c in s:\n        if c not in valid_chars:\n            return False\n    return True\n```",
        "target": "```python\nimport re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')\n```\n"
    },
    {
        "generated": "```python\ndef find_closest_elements(arr):\n    closest = (float('inf'), float('inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < closest[0]:\n                closest = (diff, arr[i], arr[j])\n    return closest\n```",
        "target": "```python\nimport sys\n\ndef find_closest_pair(arr):\n    # Variables\n    min_distance = sys.maxsize\n    closest_pair = [-1, -1]\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Get second number\n        for j in range(i + 1, len(arr)):\n            # Calculate the distance between the two values\n            distance = abs(arr[i] - arr[j])\n            # Check if it is the minimum distance\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair[0] = arr[i]\n                closest_pair[1] = arr[j]\n    \n    return closest_pair\n\n# example\narr = [3, 5, 8, 7, 1, 12]\nclosest_pair = find_closest_pair(arr)\nprint('Closest pair:', closest_pair)  # Output is [1, 3]\n```\n"
    },
    {
        "generated": "```python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __str__(self):\n        return f'({self.x}, {self.y})'\n```",
        "target": "```python\nclass Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\nif __name__ == '__main__':\n  point = Point(2, 3)\n  print(point.x, point.y)\n```\n"
    },
    {
        "generated": "```python\nmy_list = [1, 2, 3, 4, 5]\n\nmy_dict = {}\n\nfor i, num in enumerate(my_list):\n    my_dict[num] = i\n```",
        "target": "```python\ndef create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)\n```\n"
    },
    {
        "generated": "```python\ndef multiplication_table(size):\n    for i in range(1, size + 1):\n        for j in range(1, size + 1):\n            print(i * j, end=\" \")\n        print()\n```",
        "target": "```python\ndef multiplication_table(n):\n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(str(i*j).rjust(4), end=\" \")\n   print()\n\nmultiplication_table(5)\n\n# Output:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n```\n"
    },
    {
        "generated": "```python\ndef sum_third_seventh(list):\n    return list[2] + list[6]\n```",
        "target": "```python\ndef sum_elements(list):\n    Sum = list[2] + list[6]\n    return Sum\nprint(sum_elements(list))\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['GET'])\ndef get_api():\n    return jsonify({'message': 'Hello World!'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\n# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(8))\n    return password\n\nprint(generate_password())\n```",
        "target": "```python\nimport string\nimport random\n\nchars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n\ndef generate_password(size=8, chars=chars):\n return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n```\n"
    },
    {
        "generated": "```python\ndef delete_duplicate_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char not in new_string:\n            new_string += char\n    return new_string\n```",
        "target": "```python\ndef deleteDuplicates(string): \n    result = \"\"\n    for i in string: \n        if i not in result: \n            result = result + i\n    return result\n\nprint(\"The output string is: \", deleteDuplicates(string))\n```\n"
    },
    {
        "generated": "```python\nlookup_table = {\n    'apple': 1,\n    'banana': 2,\n    'orange': 3\n}\n```",
        "target": "```python\nlookup_table = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\nposts = []\n\n@app.route('/posts', methods=['POST'])\ndef add_post():\n post = request.json\n posts.append(post)\n return {'message': 'Post added successfully'}\n\nif __name__ == '__main__':\n app.run()\n```",
        "target": "```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Create a post\n@app.route('/post', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n 'title': data['title'],\n 'content': data['content'],\n 'author': data['author'],\n }\n # store post in database\n return jsonify(post)\n\nif __name__ == '__main__':\n app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\nimport random\n\nrandom_list = random.sample(range(0, 11), 25)\nprint(random_list)\n```",
        "target": "```python\nimport random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Code \nn = 7\nprint(fibonacci(n))\n```",
        "target": "```python\ndef fibonacci_seq(n):\n    if n < 0:\n        raise ValueError(\"Index must be a positive integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c\n\nfib_7 = fibonacci_seq(7)\nprint(fib_7)\n```\n"
    },
    {
        "generated": "```python\ndef FibonacciSeries(n):\n    # Initialize the first two numbers\n    a = 0\n    b = 1\n    \n    # Print the first two numbers\n    print(a, b, end=' ')\n    \n    # Generate the remaining n numbers\n    for i in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end=' ')\n    \n    return None\n```",
        "target": "```python\ndef fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34\n```\n"
    },
    {
        "generated": "```python\nclass NameSentence:\n    def __init__(self, name):\n        self.name = name\n\n    def get_sentence(self):\n        if len(self.name) <= 3:\n            return \"Hello, \" + self.name + \".\"\n        elif len(self.name) <= 6:\n            return \"Hi, \" + self.name + \".\"\n        else:\n            return \"Hey, \" + self.name + \".\"\n```",
        "target": "```python\nclass NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\"\n```\n"
    },
    {
        "generated": "```python\ndef detectOccurrence(string1, string2):\n    for char in string1:\n        if char in string2:\n            return True\n    return False\n\nstring1 = \"hello\"\nstring2 = \"this is a test string\"\n\nresult = detectOccurrence(string1, string2)\nprint(result)\n```",
        "target": "```python\ndef str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")\n```\n"
    },
    {
        "generated": "```python\ndef median_values(numbers):\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2] + numbers[n//2 - 1]) / 2\n    else:\n        median = numbers[n//2]\n    return [median] * n\n```",
        "target": "```python\ndef get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1/2)-1] + tuple_l[int(l_1/2)])/2\n        else:\n            median = tuple_l[int((l_1-1)/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]\n```\n"
    },
    {
        "generated": "```python\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_year(self):\n        return self.year\n```",
        "target": "```python\nclass Book:\n  \n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n \n def __str__(self):\n  return f\"{self.title} by {self.author} ({self.year})\"\n```\n"
    },
    {
        "generated": "```python\nclass Car:\n    def __init__(self, brand, horsepower, color):\n        self.brand = brand\n        self.horsepower = horsepower\n        self.color = color\n\n    def get_brand(self):\n        return self.brand\n\n    def get_horsepower(self):\n        return self.horsepower\n\n    def get_color(self):\n        return self.color\n```",
        "target": "```python\nclass Car:\n def __init__(self, brand, horsepower, color):\n self.brand = brand\n self.horsepower = horsepower\n self.color = color\n\n def get_brand(self):\n return self.brand\n\n def set_brand(self, brand):\n self.brand = brand\n\n def get_horsepower(self):\n return self.horsepower\n\n def set_horsepower(self, horsepower):\n self.horsepower = horsepower\n\n def get_color(self):\n return self.color\n\n def set_color(self, color):\n self.color = color\n```\n"
    },
    {
        "generated": "```python\ndef find_min_index(arr, num):\n    min_index = len(arr) \n    for i in range(len(arr)):\n        if arr[i] == num and i < min_index:\n            min_index = i\n    return min_index\n```",
        "target": "```python\narr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)\n```\n"
    },
    {
        "generated": "```python\nstudent_marks = {\n    \"John\": 90,\n    \"Jane\": 85,\n    \"Michael\": 95\n}\n```",
        "target": "```python\nstudent_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}\n```\n"
    },
    {
        "generated": "```python\nnum1 = 10\nnum2 = 20\n\ntotal = num1 + num2\naverage = total / 2\n\nprint(average)\n```",
        "target": "```python\nx = [45, 65]\ntotal = 0\nfor i in range(len(x)):\n  total += x[i]\n  average = total / len(x)\n\nprint(\"Average of the numbers is:\", average)\n```\n"
    },
    {
        "generated": "```python\ndef permutation(string):\n    if len(string) == 0:\n        return [\"\"]\n    else:\n        permutations = permutation(string[1:])\n        for i in range(len(permutations)):\n            permutations[i] = string[0] + permutations[i]\n        return permutations\n\nprint(permutation(\"abc\"))\n```",
        "target": "```python\ndef find_permutations(s): \n\tres = [] \n\tfind_permutations_recur(s, \"\", res) \n\treturn res \n\ndef find_permutations_recur(str, prefix, res): \n\tn = len(str)\n\tif n == 0:\n\t\tres.append(prefix) \n\t\treturn\n\n\tfor i in range(n):\n\t\tremaining = str[0:i] + str[i+1:] \n\t\tfind_permutations_recur(remaining, prefix + str[i], res)\n```\n"
    },
    {
        "generated": "```python\ndef Fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n        \nprint(\"Fibonacci series up to 10:\")\nfor i in range(0, 10):\n    print(Fibonacci(i))\n```",
        "target": "```python\ndef Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)  \n\n# Driver Code\nprint(\"Fibonacci series:\") \nfor i in range(10): \n    print(Fibonacci(i), end=\" \")\n```\n"
    },
    {
        "generated": "```python\ndef reverse_array(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n```",
        "target": "```python\ndef reverse_in_place(arr):\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr\n\narr = [1, 2, 3, 4]\nprint(reverse_in_place(arr))\n```\n"
    },
    {
        "generated": "```python\n# Python code to test FisherSnedecor distribution\nimport numpy as np\nfrom scipy.stats import fisher_snedecor\n\n# Instantiate a FisherSnedecor distribution object\ndist = fisher_snedecor(df=4, dfn=4, dfd=4, loc=0, scale=1)\n\n# Generate a realization\nrealization = dist.rvs(size=1000)\n\n# Generate a sample\nsample = np.random.normal(loc=0, scale=1, size=1000)\n\n# Compute properties of the realization\nprint(\"PDF:\", dist.pdf(realization))\nprint(\"CDF:\", dist.cdf(realization))\nprint(\"Mean:\", dist.mean(realization))\nprint(\"Standard Deviation:\", dist.std(realization))\nprint(\"Skewness:\", dist.skew(realization))\nprint(\"Kurtosis:\", dist.kurtosis(realization))\nprint(\"Covariance:\", dist.cov(sample, sample))\nprint(\"Parameters:\", dist.params)\n\n# Compute properties of the sample\nprint(\"PDF:\", dist.pdf(sample))\nprint(\"CDF:\", dist.cdf(sample))\nprint(\"Mean:\", dist.mean(sample))\nprint(\"Standard Deviation:\", dist.std(sample))\nprint(\"Skewness:\", dist.skew(sample))\nprint(\"Kurtosis:\", dist.kurtosis(sample))\nprint(\"Covariance:\", dist.cov(sample, sample))\nprint(\"Parameters:\", dist.params)\n```",
        "target": "```python\n#! /usr/bin/env python\n\nfrom __future__ import print_function\nfrom openturns import *\nfrom cmath import *\n\nTESTPREAMBLE()\nRandomGenerator.SetSeed(0)\n\ntry:\n    # Instanciate one distribution object\n    distribution = FisherSnedecor(5.5, 10.5)\n    print(\"Distribution \", repr(distribution))\n    print(\"Distribution \", distribution)\n\n    # Is this distribution elliptical ?\n    print(\"Elliptical = \", distribution.isElliptical())\n\n    # Is this distribution continuous ?\n    print(\"Continuous = \", distribution.isContinuous())\n\n    # Test for realization of distribution\n    oneRealization = distribution.getRealization()\n    print(\"oneRealization=\", repr(oneRealization))\n\n    # Test for sampling\n    size = 10000\n    oneSample = distribution.getSample(size)\n    print(\"oneSample first=\", repr(\n        oneSample[0]), \" last=\", repr(oneSample[size - 1]))\n    print(\"mean=\", repr(oneSample.computeMean()))\n    print(\"covariance=\", repr(oneSample.computeCovariance()))\n\n    size = 100\n    for i in range(2):\n        msg = ''\n        if FittingTest.Kolmogorov(distribution.getSample(size), distribution).getBinaryQualityMeasure():\n            msg = \"accepted\"\n        else:\n            msg = \"rejected\"\n        print(\n            \"Kolmogorov test for the generator, sample size=\", size, \" is\", msg)\n        size *= 10\n\n    # Define a point\n    point = NumericalPoint(distribution.getDimension(), 1.0)\n    print(\"Point= \", repr(point))\n\n    # Show PDF and CDF of point\n    eps = 1e-5\n\n    # derivative of PDF with regards its arguments\n    DDF = distribution.computeDDF(point)\n    # print \"ddf     =\" , repr(DDF)\n    # by the finite difference technique\n    # print \"ddf (FD)=\" ,repr(NumericalPoint(1, (distribution.computePDF(\n    # point + NumericalPoint(1, eps) ) - distribution.computePDF( point  +\n    # NumericalPoint(1, -eps) )) / (2.0 * eps)))\n\n    # PDF value\n    LPDF = distribution.computeLogPDF(point)\n    print(\"log pdf=%.6f\" % LPDF)\n    PDF = distribution.computePDF(point)\n    print(\"pdf     =%.6f\" % PDF)\n    # by the finite difference technique from CDF\n    print(\"pdf (FD)=%.6f\" % ((distribution.computeCDF(point + NumericalPoint(1, eps)) -\n                              distribution.computeCDF(point + NumericalPoint(1, -eps))) / (2.0 * eps)))\n\n    # derivative of the PDF with regards the parameters of the distribution\n    CDF = distribution.computeCDF(point)\n    print(\"cdf=%.6f\" % CDF)\n    CCDF = distribution.computeComplementaryCDF(point)\n    print(\"ccdf=%.6f\" % CCDF)\n    CF = distribution.computeCharacteristicFunction(point[0])\n    print(\"characteristic function=(%.6f+%.6fj)\" % (CF.real, CF.imag))\n    ## PDFgr = distribution.computePDFGradient( point )\n    # print \"pdf gradient     =\" , repr(PDFgr)\n    # by the finite difference technique\n    ## PDFgrFD = NumericalPoint(2)\n    ## PDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computePDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computePDF(point)) / (2.0 * eps)\n    ## PDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computePDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computePDF(point)) / (2.0 * eps)\n    # print \"pdf gradient (FD)=\" , repr(PDFgrFD)\n\n    # derivative of the PDF with regards the parameters of the distribution\n    ## CDFgr = distribution.computeCDFGradient( point )\n    # print \"cdf gradient     =\" , repr(CDFgr)\n    ## CDFgrFD = NumericalPoint(2)\n    ## CDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computeCDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computeCDF(point)) / (2.0 * eps)\n    ## CDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computeCDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computeCDF(point)) / (2.0 * eps)\n    # print \"cdf gradient (FD)=\",  repr(CDFgrFD)\n\n    # quantile\n    quantile = distribution.computeQuantile(0.95)\n    print(\"quantile=\", repr(quantile))\n    print(\"cdf(quantile)=%.6f\" % distribution.computeCDF(quantile))\n    mean = distribution.getMean()\n    print(\"mean=\", repr(mean))\n    standardDeviation = distribution.getStandardDeviation()\n    print(\"standard deviation=\", repr(standardDeviation))\n    skewness = distribution.getSkewness()\n    print(\"skewness=\", repr(skewness))\n    kurtosis = distribution.getKurtosis()\n    print(\"kurtosis=\", repr(kurtosis))\n    covariance = distribution.getCovariance()\n    print(\"covariance=\", repr(covariance))\n    parameters = distribution.getParametersCollection()\n    print(\"parameters=\", repr(parameters))\n    for i in range(6):\n        print(\"standard moment n=\", i, \" value=\",\n              distribution.getStandardMoment(i))\n    print(\"Standard representative=\", distribution.getStandardRepresentative())\n\nexcept:\n    import sys\n    print(\"t_FisherSnedecor_std.py\", sys.exc_info()[0], sys.exc_info()[1])\n\n```\n"
    },
    {
        "generated": "```python\nimport hashlib\n\ndef encrypt_string(string, secret_key):\n    # create a new hash object\n    hash_object = hashlib.sha256(secret_key.encode('utf-8'))\n    # get the hash of the secret key\n    secret_key_hash = hash_object.hexdigest()\n    # encrypt the string using the secret key hash\n    encrypted_string = string.encode('utf-8')\n    encrypted_string_hash = hashlib.sha256(encrypted_string + secret_key_hash.encode('utf-8')).hexdigest()\n    # return the encrypted string\n    return encrypted_string_hash\n\n# example\nencrypted_string = encrypt_string('Hello','secret_key')\nprint(encrypted_string)\n```",
        "target": "```python\nimport base64\n\ndef encrypt(key, string):\n    enc = []\n    for i in range(len(string)):\n        key_c = key[i % len(key)]\n        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)\n        enc.append(enc_c)\n    return base64.urlsafe_b64encode(\"\".join(enc).encode()).decode()\n\nencrypted_string = encrypt(secret_key, string)\nprint(encrypted_string)\n```\n"
    },
    {
        "generated": "```python\ndef greatest(num1, num2, num3):\n    greatest = max(num1, num2, num3)\n    return greatest\n\nnum1 = 10\nnum2 = 20\nnum3 = 30\n\nprint(greatest(num1, num2, num3))\n```",
        "target": "```python\ndef get_max(x, y, z):\n    if (x > y) and (x > z):\n        maximum = x\n    elif (y > x) and (y > z):\n        maximum = y\n    else:\n        maximum = z\n\n    return maximum\n\nresult = get_max(2, 4, 3)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nclass PriorityQueue:\n    def __init__(self):\n        self.queue = []\n\n    def is_empty(self):\n        return self.queue == []\n\n    def insert(self, item, priority):\n        self.queue.append((item, priority))\n\n    def extract(self):\n        min = self.queue[0]\n        self.queue[0] = self.queue[-1]\n        self.queue.pop()\n\n        for i in range(len(self.queue)):\n            if self.queue[i][1] < min[1]:\n                min = self.queue[i]\n\n        return min\n\n    def peek(self):\n        return self.queue[0]\n\n    def size(self):\n        return len(self.queue)\n\n# Example usage\npq = PriorityQueue()\npq.insert(\"apple\", 3)\npq.insert(\"banana\", 2)\npq.insert(\"orange\", 1)\n\nprint(pq.extract()) # \"orange\"\nprint(pq.extract()) # \"banana\"\nprint(pq.extract()) # \"apple\"\n```",
        "target": "```python\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def is_empty(self):\n        return len(self.queue) == []\n    \n    def insert(self, data):\n        self.queue.append(data)\n    \n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n```\n"
    },
    {
        "generated": "```python\ndef is_armstrong_number(number):\n    # Convert number to string\n    num_str = str(number)\n    # Calculate the sum of each digit raised to the power of 3\n    sum_of_digits = 0\n    for digit in num_str:\n        sum_of_digits += int(digit) ** 3\n    # Compare the sum with the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    number = 153\n    if is_armstrong_number(number):\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")\n```",
        "target": "```python\ndef is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** order\n        temp //= 10\n\n    if sum == num:\n        return True\n    else:\n        return False\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef spider(url):\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n\n for item in soup.find_all('a'):\n print(item.get('href'))\n```",
        "target": "```python\nimport requests\nimport re\n\nurl = \"https://www.example.com\"\nr  = requests.get(url)\ndata = r.text\n\n# Find all the links on the page\nlinks = re.findall(r'<a class=\"linkClass\" href=\"(.*?)\">', data)\n\n# Print the links\nfor link in links:\n    full_url = url + link\n    print(full_url)\n```\n"
    },
    {
        "generated": "```python\ndef calculate_stats(arr):\n    mean = sum(arr)/len(arr)\n    median = median_stats(arr)\n    mode = mode_stats(arr)\n    return mean, median, mode\n```",
        "target": "```python\ndef calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum / len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n else:\n median = arr[int(len(arr) / 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]\n```\n"
    },
    {
        "generated": "```python\ndef sort_list(list):\n    list.sort()\n    return list\n```",
        "target": "```python\ndef sort_list(arr):\n    # Insertion sort algorithm\n    for i in range(1, len(arr)):\n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr[j+1] = key \n    return arr\n\nsorted_arr = sort_list([3, 9, 1, 4, 5])\n```\n"
    },
    {
        "generated": "```python\nmy_list.pop()\n```",
        "target": "```python\ndef remove_last_element(lst):\n    last_index = len(lst) - 1\n    del lst[last_index]\n\nexample_list = [3, 1, 5, 7, 4, 8, 2]\nremove_last_element(example_list)\nprint(example_list) \n# Output: [3, 1, 5, 7, 4, 8]\n```\n"
    },
    {
        "generated": "```python\ndef find_pairs(numbers, target):\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs\n\nnumbers = [1, 2, 3, 4, 5, 6]\ntarget = 7\n\npairs = find_pairs(numbers, target)\nprint(pairs)\n```",
        "target": "```python\ndef two_sum(arr, target):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == target):\n                result.append((arr[i], arr[j]))\n    return result\n\nresult = two_sum([8, 3, 10, 5], 13)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ndef most_frequent_characters(input_string):\n    frequency_dict = {}\n    for char in input_string:\n        if char in frequency_dict:\n            frequency_dict[char] += 1\n        else:\n            frequency_dict[char] = 1\n    max_frequency = 0\n    most_frequent_char = \"\"\n    for char, frequency in frequency_dict.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            most_frequent_char = char\n    return most_frequent_char, max_frequency\n\ninput_string = \"Hello World\"\nmost_frequent_char, max_frequency = most_frequent_characters(input_string)\nprint(\"Most frequent character is: \", most_frequent_char)\nprint(\"Frequency of most frequent character: \", max_frequency)\n```",
        "target": "```python\nstring = \"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\"\n\n# Create an empty dictionary  \nfreq = {} \n  \n# Loop through the string and populate the dictionary  \nfor i in string:\n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Get the most frequently occurring character \nmax_freq = 0\nfor key, value in freq.items(): \n    if value > max_freq: \n        max_freq = value \n        max_char = key\n\n# Print the most frequent character  \nprint(\"The most frequent character is '\" + max_char + \"' and it occurred \" + str(max_freq) + \" times.\")\n```\n"
    },
    {
        "generated": "```python\ndef reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n    return list\n```",
        "target": "```python\nlst.reverse()\nprint(lst)  #output: [5,4,3,2,1]\n```\n"
    },
    {
        "generated": "```python\nsquares = [i**2 for i in range(1,6)]\nprint(squares)\n```",
        "target": "```python\nlst=[x**2 for x in range(1,6)]\n```\n"
    },
    {
        "generated": "```python\ndef print_pascal_triangle(n): \n    # Pascal Triangle \n    triangle = [[1]] * n \n    for i in range(1, n): \n        triangle[i] = [1] + [x + y for x, y in zip(triangle[i - 1], triangle[i - 1][1:])] + [1] \n    # Printing the triangle \n    for i in range(n): \n        for j in range(i + 1): \n            print(triangle[i][j], end=\" \") \n        print() \n  \n# Driver code \nprint_pascal_triangle(5)\n```",
        "target": "```python\ndef pascal_triangle(n): \n    # Two empty lists to store the previous and current row \n    prev_row = []     \n    curr_row = []     \n  \n    # Looping through the rows \n    for i in range(n): \n          \n        # Reseting the curr_row for each row \n        curr_row = [] \n          \n        # Looping through columns \n        for j in range(i + 1): \n              \n            # Handling edges of the pascal's triangle \n            if j == 0 or j == i:  \n                curr_row.append(1) \n            else: \n                curr_row.append(prev_row[j] + prev_row[j - 1])  \n          \n        # Printing the current row  \n        print(curr_row)  \n          \n        # Setting the current row as the previous row before moving to the next row. \n        prev_row = curr_row  \n        \n\n# call the pascal triangle function \nn = 5\npascal_triangle(n)\n```\n"
    },
    {
        "generated": "```python\nimport string\nimport random\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(5))\n\nprint(generate_string())\n```",
        "target": "```python\nimport string\nimport random\n\ndef generate_random_string(length=5):\n  letters = string.ascii_letters + string.digits\n  return ''.join(random.choice(letters) for _ in range(length))\n```\n"
    },
    {
        "generated": "```python\ndef get_all_combinations(numbers):\n    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers]\n    combinations = []\n    for i in range(len(numbers)):\n        rest = numbers[:i] + numbers[i+1:]\n        for combination in get_all_combinations(rest):\n            combinations.append([numbers[i]] + combination)\n    return combinations\n```",
        "target": "```python\ndef longest_increasing_subsequence(nums):\n    # Dynamic programming approach \n    # to maintain a list of increasing subsequences \n    # with their respective lengths \n    subseq_lengths = [1 for _ in range(len(nums))] \n      \n    # Traverse through pairs of numbers to find sequences \n    for i in range(1, len(nums)): \n        for j in range(0, i): \n            if nums[i] > nums[j] and subseq_lengths[i] < subseq_lengths[j] + 1: \n                subseq_lengths[i] = subseq_lengths[j]+1\n  \n    # Return the maximum length of increasing subsequence\n    return max(subseq_lengths)\n```\n"
    },
    {
        "generated": "```python\ndef flatten_array(arr):\n    return [item for row in arr for item in row]\n\narr = [[1, 2], [3, 4], [5, 6]]\nprint(flatten_array(arr))\n```",
        "target": "```python\ndef flatten(arr):\n  flat_list = []\n  for sublist in arr:\n    for item in sublist:\n      flat_list.append(item)\n  return flat_list\n\nflatten(array)\n```\n"
    },
    {
        "generated": "```python\n# Function to print the number of days in a month\ndef print_days_in_month(month):\n    # Dictionary to store the number of days in each month\n    days_in_month = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    \n    # Print the number of days in the given month\n    print(\"Number of days in\", month, \"is\", days_in_month[month])\n\n# Main program\nif __name__ == \"__main__\":\n    # Take the month as input from the user\n    month = input(\"Enter the month: \")\n    \n    # Call the function to print the number of days in the given month\n    print_days_in_month(month)\n```",
        "target": "```python\ndef num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))\n```\n"
    },
    {
        "generated": "```python\nfrom datetime import datetime\n\nprint(datetime.now())\n```",
        "target": "```python\nimport datetime\n\nnow = datetime.datetime.now()\nprint(now)\n```\n"
    },
    {
        "generated": "```python\ndef quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quickSort(left) + middle + quickSort(right)\n```",
        "target": "```python\ndef quickSort(arr): \n\tif len(arr) <= 1:\n\treturn arr \n\telse: \n\t\tpivot = arr[0] \n\t\tlessThanPivot = [number for number in arr[1:] if number <= pivot] \n\t\tmoreThanPivot = [number for number in arr[1:] if number > pivot] \n\t\treturn quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n\narr = [3, 8, 6, 10, 11, 4] \nprint(quickSort(arr))\n```\n"
    },
    {
        "generated": "```python\ndef analyze_sentiment(sentence):\n    sentiment = SentimentIntensityAnalyzer().polarity_scores(sentence)\n    if sentiment['compound'] >= 0.05:\n        return 'Positive'\n    elif sentiment['compound'] <= -0.05:\n        return 'Negative'\n    else:\n        return 'Neutral'\n```",
        "target": "```python\nimport textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\"\n```\n"
    },
    {
        "generated": "```python\nimport random\n\n# Responses for Greeting\ngreeting_responses = [\n    \"Hello!\",\n    \"Hi there!\",\n    \"Hi! How can I help you?\"\n]\n\n# Responses for Goodbye\ngoodbye_responses = [\n    \"Goodbye!\",\n    \"Bye!\",\n    \"See you later!\"\n]\n\n# Main Chatbot Function\ndef chatbot():\n    print(\"Welcome to our chatbot!\")\n    while True:\n        user_input = input(\"You: \")\n        if user_input == \"goodbye\":\n            print(random.choice(goodbye_responses))\n            break\n        elif user_input == \"greeting\":\n            print(random.choice(greeting_responses))\n        else:\n            print(random.choice(greeting_responses))\n```",
        "target": "```python\nimport re #importing library for regular expressions\n\nuser_input = \"\" #Initializing user_input\n\nwhile user_input != \"exit\": \n    user_input = input(\"Type your message: \")\n    if re.search(\"hi|hello\", user_input): #Using regural expressions to make the chatbot response to greetings\n        print(\"Hello, I am a chatbot. How can I help you?\")\n    else:\n        print(\"Sorry, I don't understand.\")\n```\n"
    },
    {
        "generated": "```python\ndef square(x):\n    return x * x\n```",
        "target": "```python\ndef square(number):\n \u00a0 \u00a0return number * number\n```\n"
    },
    {
        "generated": "```python\nimport json\n\nmy_dict = {\n    \"name\": \"John\",\n    \"age\": 25\n}\n\njson_string = json.dumps(my_dict)\nprint(json_string)\n```",
        "target": "```python\n{\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}\n```\n"
    },
    {
        "generated": "```python\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1\n```",
        "target": "```python\ni = 0 \nwhile i < 3: \n    print(i) \n    i += 1\n```\n"
    },
    {
        "generated": "```python\n# Print the Fibonacci series up to 15\nprint(\"Fibonacci Series up to 15:\")\na = 0\nb = 1\nprint(a, end=\" \")\nprint(b, end=\" \")\nc = a + b\nprint(c, end=\" \")\n\nwhile c < 15:\n    a = b\n    b = c\n    c = a + b\n    print(c, end=\" \")\n```",
        "target": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\nfibonacci(15)\n```\n"
    },
    {
        "generated": "```python\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def sum(self):\n        return self.a + self.b\n```",
        "target": "```python\nclass Summation:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2\n\ntotal = Summation(5, 10).get_sum()\nprint(total)\n```\n"
    },
    {
        "generated": "```python\nmax_val = 0\nfor num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    if num > max_val:\n        max_val = num\n\nprint(max_val)\n```",
        "target": "```python\nmax_value = 0\n\nfor value in [1,5,2,3,8,9]:\n    if value > max_value:\n    max_value = value\n\nprint(max_value) # Output: 9\n```\n"
    },
    {
        "generated": "```python\ndef sort_numbers(numbers):\n    numbers.sort()\n    return numbers\n```",
        "target": "```python\ndef sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([2, 4, 5, 1, 3])\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = None\n        self.speed = 0\n\n    def accelerate(self, amount):\n        self.speed += amount\n\n    def brake(self, amount):\n        self.speed -= amount\n\n    def set_color(self, color):\n        self.color = color\n```",
        "target": "```python\nclass Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage\n```\n"
    },
    {
        "generated": "```python\ndef extract_words(start_letter):\n    words = [\"hello\", \"world\", \"python\", \"programming\"]\n    result = []\n    for word in words:\n        if word[0] == start_letter:\n            result.append(word)\n    return result\n\nresult = extract_words(\"p\")\nprint(result)\n```",
        "target": "```python\n\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))\n```\n"
    },
    {
        "generated": "```python\ndef average_age(ages):\n    total_age = 0\n    for age in ages:\n        total_age += age\n    return total_age / len(ages)\n```",
        "target": "```python\ntotal_age = 0\n\nfor person in people:\n    total_age += int(person[1])\n\naverage_age = total_age / len(people)\n\nprint(f\"The average age of the group is {average_age}\")\n\n# Optimized version\n\ntotal_age = sum([int(person[1]) for person in people])\naverage_age = total_age / len(people)\n\nprint(f\"The average age of the group is {average_age}\")\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_random_numbers(start, end):\n    return [random.randint(start, end) for _ in range(10)]\n```",
        "target": "```python\nimport random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))\n```\n"
    },
    {
        "generated": "```python\ndef intersection(list1, list2):\n    return list(set(list1) & set(list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\nintersection_list = intersection(list1, list2)\nprint(intersection_list)\n```",
        "target": "```python\nlist1 = [2, 3, 4] \nlist2 = [3, 5, 6, 4]\n\n# create a set of elements in list1\ns1 = set(list1)\n\n# create a set of elements in list2\ns2 = set(list2)\n\n# find the intersection \nintersection = s1.intersection(s2)\n\n# print the intersection \nprint(intersection) \n# prints {3, 4}\n```\n"
    },
    {
        "generated": "```python\ndictionary = {}\n\nfor i in range(1,11):\n    dictionary[i] = i * 10\n\nprint(dictionary)\n```",
        "target": "```python\nmy_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six',\n           7:'seven', 8:'eight', 9:'nine', 10:'ten'}\n\nfor key, value in my_dict.items():\n   print(key, '->', value)\n```\n"
    },
    {
        "generated": "```python\ndef replace_words(sentence):\n    words = sentence.split()\n    new_words = [word[0] + word[1:] for word in words]\n    return''.join(new_words)\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(replace_words(sentence))\n```",
        "target": "```python\ndef replace_with_first_letter(sentence):\n    words = sentence.split()\n    result = [word[0] for word in words]\n    return ''.join(result)\n\nprint(replace_with_first_letter(\"Hello World\")) # Output: HW\n```\n"
    },
    {
        "generated": "```python\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\n# Create an empty dictionary\nword_freq = {}\n\n# Split the sentence into words\nwords = sentence.split()\n\n# Iterate over each word\nfor word in words:\n    # Check if the word is already in the dictionary\n    if word in word_freq:\n        # If it is, increment the frequency count\n        word_freq[word] += 1\n    else:\n        # If it is not, add it to the dictionary with a frequency count of 1\n        word_freq[word] = 1\n\n# Print the dictionary\nprint(word_freq)\n```",
        "target": "```python\nfreq_words_dict = {\n    'python': 2,\n    'is': 1,\n    'an': 1,\n    'interpreted': 1,\n    'high-level': 1,\n    'general-purpose': 1,\n    'programming': 1,\n    'language': 1\n}\n```\n"
    },
    {
        "generated": "```python\ndef permutations(string): \n    if len(string) == 0: \n        return [''] \n  \n    if len(string) == 1: \n        return [string] \n  \n    permutations_list = [] \n    for i in range(len(string)): \n        substring = string[:i] + string[i+1:] \n        for perm in permutations(substring): \n            permutations_list.append(string[i] + perm) \n    return permutations_list \n  \nprint(permutations(\"ABC\"))\n```",
        "target": "```python\ndef permutations(string): \n    if string == \"\": \n        return [''] \n          \n    prev_list = permutations(string[1:]) \n    next_list = [] \n    char = string[0] \n    for word in prev_list: \n        for j in range(len(word) + 1): \n            next_list.append(word[:j] + char + word[j:]) \n    return next_list \n\nstring = \"abc\"\nperm_list = permutations(string) \nprint (perm_list)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nimport json\n\n# get the query\nquery = \"Python programming language\"\n\n# make a request to the search engine\nresponse = requests.get('https://example.com/search', params={'q': query})\n\n# get the response\ndata = json.loads(response.text)\n\n# return the most relevant result\nreturn data['result'][0]\n```",
        "target": "```python\nimport json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http://search-engine.com/api/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming')\n```\n"
    },
    {
        "generated": "```python\ndef unique_elements(my_list):\n    result = []\n    for element in my_list:\n        if element not in result:\n            result.append(element)\n    return result\n```",
        "target": "```python\nlist_x = [1, 1, 2, 3, 4, 5, 5]\nunique_elements = set(list_x)\nprint(unique_elements) #output: {1, 2, 3, 4, 5}\n```\n"
    },
    {
        "generated": "```python\ndata_set = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef print_top_five(data_set):\n top_five = sorted(data_set, reverse=True)[:5]\n print(\"Top 5 values:\", top_five)\n\nprint_top_five(data_set)\n```",
        "target": "```python\ndata = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]\n\ndef get_top_five_values(data):\n    sorted_data = sorted(data, reverse=True)\n    top_five_values = sorted_data[:5]\n    return top_five_values\n\ntop_five_values = get_top_five_values(data)\nprint(top_five_values)\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\n\ndef rmse(list1, list2):\n    difference = np.array(list1) - np.array(list2)\n    rmse = np.sqrt(np.mean(difference ** 2))\n    return rmse\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]\n\nrmse = rmse(list1, list2)\nprint(rmse)\n```",
        "target": "```python\ndef rmse(A, B):\n   \"\"\" \n   Calculates the root mean square error between two given lists of numbers. \n   \"\"\"\n   RMSE = 0\n   for i,j in zip(A,B):\n       RMSE += (i-j)**2\n   return (RMSE/len(A))**(1/2)\n\n\nif __name__ == '__main__':\n   A = [2.2, 3.07, 3.68, 1.33] \n   B = [1.17, 2.47, 2.57, 0.0]\n   print(rmse(A, B))\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nfrom sklearn.cluster import KMeans\n\ndef kmeans(data, k):\n    model = KMeans(n_clusters=k, random_state=0).fit(data)\n    return model\n\ndata = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])\nk = 2\nkmeans_result = kmeans(data, k)\n\nprint(kmeans_result.labels_)\n```",
        "target": "```python\n# Import KMeans\nfrom sklearn.cluster import KMeans\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=3, random_state=0)\n\n# Train the model\nkmeans.fit(X)\n\n# Get the labels\nlabels = kmeans.labels_\n\n# Get the cluster centroids\ncentroids = kmeans.cluster_centers_\n```\n"
    },
    {
        "generated": "```python\ndef contains_value(head, value):\n    current = head\n    while current:\n        if current.data == value:\n            return True\n        current = current.next\n    return False\n```",
        "target": "```python\ndef contains(head, value):\n current = head\n while current is not None:\n if current.data == value:\n return True\n current = current.next\n return False\n\nhead = Node(4)\nhead.next = Node(8)\nhead.next.next = Node(15)\nhead.next.next.next = Node(16)\nhead.next.next.next.next = Node(23)\nhead.next.next.next.next.next = Node(42) \n\nval = 15\n\nprint(contains(head, val))\n# Output : True\n```\n"
    },
    {
        "generated": "```python\nimport random\n\n# Generate a random table\ntable = [[random.randint(0,100), random.randint(0,100)], \n         [random.randint(0,100), random.randint(0,100)], \n         [random.randint(0,100), random.randint(0,100)]]\n\n# Generate HTML page\nhtml = \"<html>\\n\"\nhtml += \"<head>\\n\"\nhtml += \"<title>Random Table Page</title>\\n\"\nhtml += \"</head>\\n\"\nhtml += \"<body>\\n\"\nhtml += \"<table>\\n\"\nhtml += \"<tr>\\n\"\nhtml += \"<th>Column 1</th>\\n\"\nhtml += \"<th>Column 2</th>\\n\"\nhtml += \"</tr>\\n\"\nfor row in table:\n html += \"<tr>\\n\"\n html += \"<td>\" + str(row[0]) + \"</td>\\n\"\n html += \"<td>\" + str(row[1]) + \"</td>\\n\"\n html += \"</tr>\\n\"\nhtml += \"</table>\\n\"\nhtml += \"</body>\\n\"\nhtml += \"</html>\\n\"\n\n# Print the generated HTML page\nprint(html)\n```",
        "target": "```python\nimport random\n\nHTML = '<html>\\n<head>\\n<title>Random Table</title>\\n</head>\\n<body>\\n<table>\\n'\n\nfor row_num in range(0,3):\n    HTML += ' <tr>\\n'\n    for column_num in range(0,2):\n        HTML += '  <td>{}</td>\\n'.format(random.randint(0, 10))\n    HTML += ' </tr>\\n'\n\nHTML += '</table>\\n</body>\\n</html>'\n\nprint(HTML)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n\n# Driver Code \nn = 10\nprint(fibonacci(n))\n```",
        "target": "```python\ndef fibonacci_series(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci_series(n-1)+fibonacci_series(n-2) \n\nprint(fibonacci_series(10))\n```\n"
    },
    {
        "generated": "```python\ndef caesar_cipher(text, shift):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\nprint(caesar_cipher(\"Hello World!\", 3))\n```",
        "target": "```python\ndef caesar_cipher(input_string, shift):\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    output_string = ''\n\n    for char in input_string:\n        if char in alphabet:\n            char_index = alphabet.find(char)\n            new_char_index = char_index + shift\n            output_string += alphabet[new_char_index % len(alphabet)]\n        else:\n            output_string += char\n\n    return output_string\n```\n"
    },
    {
        "generated": "```python\nimport string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password_length = 8\n    password = ''.join(random.choice(characters) for _ in range(password_length))\n    return password\n\npassword = generate_password()\nprint(password)\n```",
        "target": "```python\nimport random\nimport string\n\ndef generate_pass(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\npassword = generate_pass()\nprint(password)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com/reviews\"\n\n# Get the HTML content\nhtml_content = requests.get(url).text\n\n# Parse the HTML content\nsoup = BeautifulSoup(html_content, 'html.parser')\n\n# Get all reviews\nreviews = soup.find_all('div', class_='review')\n\n# Get the text content of each review\nfor review in reviews:\n    review_text = review.find('div', class_='review-content').text\n    print(review_text)\n```",
        "target": "```python\n\"\"\"\nScrape the text content from all reviews on a web page \n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_reviews(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'lxml')\n    reviews = soup.find_all('div', class_='review')\n    for review in reviews:\n        text = review.find('p').string\n        author = review.find('h4').string\n        print(text, author)\n\nif __name__ == '__main__':\n    fetch_reviews('example.com/reviews')\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport numpy as np\n\ndef fitness(x):\n    # calculate the fitness of the given x\n    return np.sum(x)\n\ndef mutate(x):\n    # mutate the given x\n    return np.random.choice([-1, 1], size=len(x))\n\ndef genetic_algorithm(population_size, mutation_rate, max_iter):\n    # initialize the population\n    population = [random.choice([-1, 1]) for _ in range(population_size)]\n    \n    # iterate over the population\n    for i in range(max_iter):\n        # calculate the fitness of the population\n        population_fitness = [fitness(x) for x in population]\n        \n        # select the fittest individuals\n        population = [x for _, x in sorted(zip(population_fitness, population))[:population_size//2]]\n        \n        # mutate the population\n        for j in range(population_size//2):\n            population[j] = mutate(population[j])\n            \n        # check for convergence\n        if i > 0 and np.allclose(population_fitness, [fitness(population[0]) for _ in population]):\n            break\n            \n    # return the fittest individual\n    return population[0]\n\n# test the genetic algorithm\npopulation_size = 100\nmutation_rate = 0.1\nmax_iter = 100\n\nresult = genetic_algorithm(population_size, mutation_rate, max_iter)\nprint(result)\n```",
        "target": "```python\nimport random\nimport numpy as np\n\n# Define the cost function\ndef cost(x):\n return x**2\n \n# Initialize the population\npopulation_size = 20\npopulation = [random.randint(0, 100) for _ in range(population_size)]\n\n# Perform the optimization\nmax_generation = 100\nfor _ in range(max_generation):\n # Calculate the fitness\n fitness = [cost(x) for x in population]\n \n # Select the fittest individuals\n fittest_individuals = np.argsort(fitness)[::-1][:int(population_size/2)]\n \n # Generate the new population\n new_population = []\n for individual in fittest_individuals:\n  new_population.append(population[individual])\n  new_population.append(population[individual] + random.randint(-5, 5))\n population = new_population\n \n# Print the result\nprint(population)\n```\n"
    },
    {
        "generated": "```python\ndef is_unique(s):\n    unique_chars = set()\n    for char in s:\n        if char in unique_chars:\n            return False\n        unique_chars.add(char)\n    return True\n```",
        "target": "```python\ndef check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Generate an array of Nth Fibonacci sequence\nn = 10\nfibonacci_array = [fibonacci(i) for i in range(n)]\n\nprint(fibonacci_array)\n```",
        "target": "```python\ndef generate_fibonacci_sequence(N):\n    '''\n    This program takes in an integer N and returns the first N elements of the Fibonacci sequence\n    '''\n    \n    fibonacci_sequence = []\n    \n    if N < 1:\n        return fibonacci_sequence\n    elif N == 1:\n        fibonacci_sequence = [1]\n        return fibonacci_sequence\n    else:\n        fibonacci_sequence = [1,1]\n        for i in range(2,N):\n            fibonacci_sequence.append(fibonacci_sequence[i-2]+fibonacci_sequence[i-1]) \n            \n    return fibonacci_sequence\n \nprint(generate_fibonacci_sequence(10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\n# Connect to the database\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create the table\nc.execute('''CREATE TABLE IF NOT EXISTS records\n            (id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            age INTEGER NOT NULL)''')\n\n# Close the database connection\nconn.close()\n\n# Route to create a new record\n@app.route('/create', methods=['POST'])\ndef create():\n    # Get the data from the request body\n    data = request.get_json()\n    name = data['name']\n    age = data['age']\n\n    # Connect to the database\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n\n    # Insert the record into the database\n    c.execute('INSERT INTO records(name, age) VALUES(?,?)', (name, age))\n    conn.commit()\n\n    # Close the database connection\n    conn.close()\n\n    # Return the created record\n    return jsonify({'id': c.lastrowid, 'name': name, 'age': age})\n\n# Route to read all records\n@app.route('/read', methods=['GET'])\ndef read():\n    # Connect to the database\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n\n    # Get all records from the database\n    c.execute('SELECT * FROM records')\n    records = c.fetchall()\n\n    # Close the database connection\n    conn.close()\n\n    # Return the records\n    return jsonify(records)\n\n# Route to update a record\n@app.route('/update', methods=['PUT'])\ndef update():\n    # Get the data from the request body\n    data = request.get_json()\n    id = data['id']\n    name = data['name']\n    age = data['age']\n\n    # Connect to the database\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n\n    # Update the record in the database\n    c.execute('UPDATE records SET name=?, age=? WHERE id=?', (name, age, id))\n    conn.commit()\n\n    # Close the database connection\n    conn.close()\n\n    # Return the updated record\n    return jsonify({'id': id, 'name': name, 'age': age})\n\n# Route to delete a record\n@app.route('/delete', methods=['DELETE'])\ndef delete():\n    # Get the data from the request body\n    data = request.get_json()\n    id = data['id']\n\n    # Connect to the database\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n\n    # Delete the record from the database\n    c.execute('DELETE FROM records WHERE id=?', (id,))\n    conn.commit()\n\n    # Close the database connection\n    conn.close()\n\n    # Return the deleted record\n    return jsonify({'id': id})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# Connect to the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'\ndb = SQLAlchemy(app)\n\n# Create a model class for table row\nclass TableRow(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(50), nullable=False)\n  description = db.Column(db.String(50), nullable=False)\n\n# Create a REST API using Flask-RESTful\napi = Api(app)\n\n# Create the API's endpoints\nclass CreateRecord(Resource):\n  def post(self):\n    # Get the request body\n    json_data = request.get_json()\n    # Create a new record\n    new_record = TableRow(name=json_data['name'], description=json_data['description'])\n    db.session.add(new_record)\n    db.session.commit()\n    return {'status': 'success'}, 201\n\nclass ReadRecord(Resource):\n  def get(self, id):\n    # Get a record by id\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        return {'name': record.name, 'description': record.description}, 200\n    return {'status': 'not found'}, 404\n\nclass UpdateRecord(Resource):\n  def put(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Get the request body\n        json_data = request.get_json()\n        # Update the record\n        record.name = json_data['name']\n        record.description = json_data['description']\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\nclass DeleteRecord(Resource):\n  def delete(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Delete the record\n        db.session.delete(record)\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\n# Add the API's endpoints to the API\napi.add_resource(CreateRecord, '/create')\napi.add_resource(ReadRecord, '/read/<int:id>')\napi.add_resource(UpdateRecord, '/update/<int:id>')\napi.add_resource(DeleteRecord, '/delete/<int:id>')\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\n# create a database\nimport sqlite3\n\nconn = sqlite3.connect('my_database.db')\nc = conn.cursor()\n\n# create a table\nc.execute('CREATE TABLE users (name TEXT, email TEXT)')\n\n# create a form\n<form>\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>\n\n# save form data to database\nif form_data['submit']:\n    c.execute('INSERT INTO users (name, email) VALUES (?,?)', (form_data['name'], form_data['email']))\n    conn.commit()\n    print('Form data saved to database!')\n```",
        "target": "```python\n# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef randomizeArray(arr):\n    for i in range(len(arr)-1, 0, -1):\n        j = random.randint(0, i)\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\narr = [1, 2, 3, 4, 5]\nprint(randomizeArray(arr))\n```",
        "target": "```python\nimport random\n \ndef randomize(arr, n): \n \n    # Start from the last element and \n    # swap one by one. We don't need to \n    # run for the first element \n    # that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index \n        j = random.randint(0,i+1) \n  \n        # Swap arr[i] with the element \n        # at random index \n        arr[i],arr[j] = arr[j],arr[i] \n    return arr\n```\n"
    },
    {
        "generated": "```python\ndef reverse_list(lst):\n    return lst[::-1]\n```",
        "target": "```python\ndef reverse_list_without_function(list_):\n    result = []\n    for i in range(len(list_)-1,-1,-1):\n        result.append(list_[i])\n    return result\n\nlist_ = [1,2,3,4]\nprint(reverse_list_without_function(list_)) # => [4, 3, 2, 1]\n```\n"
    },
    {
        "generated": "```python\ndef average(list_of_numbers):\n    total = 0\n    for num in list_of_numbers:\n        total += num\n    return total / len(list_of_numbers)\n\nlist_of_numbers = [3, 4, 5, 6, 7]\nprint(average(list_of_numbers))\n```",
        "target": "```python\ndef calculateAverage(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)\n\nnumbers = [5, 10, 15, 20]\n\nprint(calculateAverage(numbers)) // 12.5\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nimport datetime\n\n# Get today's date\ntoday = datetime.date.today()\n\n# Generate dates of the upcoming 50 days from today\ndates = []\nfor i in range(50):\n    date = today + datetime.timedelta(days=i)\n    dates.append(date)\n\n# Convert the dates to a numpy array\ndates_array = np.array(dates)\n\n# Print the dates array\nprint(dates_array)\n```",
        "target": "```python\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# define start (today) and end (50 days from today) date\nstart_date = datetime.today()\nend_date = start_date + timedelta(days=50)\n\n# generate numpy array of dates between the dates defined above\ndates = np.arange(start_date, end_date).astype('datetime64[D]')\nprint(dates)\n# Output:\narray(['2021-05-17', '2021-05-18', '2021-05-19', '2021-05-20', '2021-05-21',\n       '2021-05-22', '2021-05-23', '2021-05-24', '2021-05-25', '2021-05-26',\n       '2021-05-27', '2021-05-28', '2021-05-29', '2021-05-30', '2021-05-31',\n       '2021-06-01', '2021-06-02', '2021-06-03', '2021-06-04', '2021-06-05',\n       '2021-06-06', '2021-06-07', '2021-06-08', '2021-06-09', '2021-06-10',\n       '2021-06-11', '2021-06-12', '2021-06-13', '2021-06-14', '2021-06-15',\n       '2021-06-16', '2021-06-17', '2021-06-18', '2021-06-19', '2021-06-20',\n       '2021-06-21', '2021-06-22', '2021-06-23', '2021-06-24', '2021-06-25',\n       '2021-06-26', '2021-06-27', '2021-06-28', '2021-06-29', '2021-06-30',\n       '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04', '2021-07-05',\n       '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10'],\n      dtype='datetime64[D]')\n```\n"
    },
    {
        "generated": "```python\nstring = \"This is an example string\"\nstring = string.lower()\nprint(string)\n```",
        "target": "```python\n\"\"\"\nMake the given string lowercase using Python\n\"\"\"\n\ntest_string = \"This is a TEST string!\"\n\nlowercase_string = test_string.lower()\n\nprint(lowercase_string) # prints \"this is a test string!\"\n```\n"
    },
    {
        "generated": "```python\ndef remove_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\n```",
        "target": "```python\n# Function to remove vowels\ndef removeVowels(str):\n  vowels = ('a', 'e', 'i', 'o', 'u')\n  for x in str.lower():\n    if x in vowels:\n      str = str.replace(x,\"\")\n  print(str)  \n\n# Driver program\nstr = \"Hello\"\nremoveVowels(str)\n\n# Output:\nHll\n```\n"
    },
    {
        "generated": "```python\nnumber = int(input(\"Enter a number: \"))\n\nfor i in range(1, number + 1):\n    if number % i == 0:\n        print(i, end=\" \")\n```",
        "target": "```python\ndivisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')\n```\n"
    },
    {
        "generated": "```python\nwords = [\"beautiful\", \"world\", \"full\", \"of\", \"beauty\"]\n\npoem = \"\"\nfor word in words:\n    poem += word + \" \"\n\nprint(poem)\n```",
        "target": "```python\ndef create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))\n```\n"
    },
    {
        "generated": "```python\nclass InputValidator:\n    def __init__(self, type):\n        self.type = type\n\n    def validate(self, input):\n        if type(input) == self.type:\n            return True\n        else:\n            return False\n```",
        "target": "```python\nclass InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True\n```\n"
    },
    {
        "generated": "```python\ndef min_coins(coins, amount):\n    coins = [0] * (amount + 1)\n    for i in range(amount + 1):\n        coins[i] = float('inf')\n    coins[0] = 0\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(float('inf'))\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for c in coins:\n        coins.append(c)\n    for",
        "target": "```python\ndef minimum_coins_needed(amount):\n    denominations = [1, 2, 5, 10]\n    result = [0 for _ in range(amount+1)]\n \n    # Compute the result for amount = 0\n    result[0] = 0 \n    \n    # Iterate over all amount from 1 to desired\n    for i in range(1, amount+1): \n        # Initialize an inner loop to maximum value (amount)\n        temp_min = float('Inf')\n        for j in range(0, len(denominations)): \n            # Check if coins are less than amount\n            if denominations[j] <= i:\n                temp_min = min(temp_min, result[i-denominations[j]])\n        # Store the final result in amount's index\n        result[i] = temp_min + 1\n        \n    return result[amount]\n```\n"
    },
    {
        "generated": "```python\ndef find_largest_number(arr):\n    largest_num = arr[0]\n    for num in arr:\n        if num > largest_num:\n            largest_num = num\n    return largest_num\n\narr = [2, 3, 4, 5, 6]\nprint(find_largest_number(arr))\n```",
        "target": "```python\narr = [1, 10, 5, 6, 9, 8, 20]\n\ndef largest_number(arr):\n  largest = arr[0]\n  for num in arr:\n    if num > largest:\n      largest = num\n\n  return largest\n\nlargest = largest_number(arr)\nprint(largest) # 20\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nfor article in soup.find_all('article'):\n    title = article.find('h1').text\n    author = article.find('p', class_='author').text\n    content = article.find('p').text\n    print(title, author, content)\n```",
        "target": "```python\nimport requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nwith open('source_code.html', 'w') as f:\n    f.write(soup.prettify())\n```",
        "target": "```python\nimport urllib.request\n\nurl = \"https://www.example.com/\"\n\nresponse = urllib.request.urlopen(url) \nwebContent = response.read()\n\nf = open(\"example.html\", \"w\")\nf.write(webContent.decode('utf-8'))\nf.close()\n```\n"
    },
    {
        "generated": "```python\ndef compare_integers(a, b):\n    if a > b:\n        return True\n    else:\n        return False\n```",
        "target": "```python\ndef compare_ints(num1, num2):\n  if num1 > num2:\n    return \"Integer1 is greater than Integer2\"\n  elif num1 < num2:\n    return \"Integer1 is lesser than Integer2\"\n  else:\n    return \"The integers are equal\"\n\nresult = compare_ints(6, 4)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ndef largest_number(list):\n    largest = list[0]\n    for i in range(1, len(list)):\n        if list[i] > largest:\n            largest = list[i]\n    return largest\n```",
        "target": "```python\nmax_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)\n```\n"
    },
    {
        "generated": "```python\nimport boto3\n\ndef lambda_handler(event, context):\n    num1 = event['num1']\n    num2 = event['num2']\n    num3 = event['num3']\n\n    max_num = max(num1, num2, num3)\n    return {\n       'statusCode': 200,\n        'body': max_num\n    }\n```",
        "target": "```python\nmax_func = lambda a, b, c : max(a,b,c)\nprint(max_func(3, 12, 7))\n```\n"
    },
    {
        "generated": "```python\nclass Queue:\n    def __init__(self):\n        self.queue = []\n        \n    def enqueue(self, item):\n        self.queue.append(item)\n        \n    def dequeue(self):\n        return self.queue.pop(0)\n        \n    def peek(self):\n        return self.queue[0]\n        \n    def is_empty(self):\n        return len(self.queue) == 0\n```",
        "target": "```python\nclass Queue(): \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == []  \n  \n    def enqueue(self, item): \n        self.items.insert(0, item)\n        \n    def dequeue(self):\n        return self.items.pop() \n  \n    def size(self): \n        return len(self.items)\n```\n"
    },
    {
        "generated": "```python\ndef sum_of_two(a, b):\n    return a + b\n```",
        "target": "```python\ndef sum_of_numbers(num1, num2):\n    return num1 + num2\n```\n"
    },
    {
        "generated": "```python\npublic static String removeWhitespace(String str) {\n    return str.replaceAll(\"\\\\s+\", \"\");\n}\n```",
        "target": "```python\npublic class RemoveWhitespace { \n\n    public static String removeWhitespace(String str) \n    { \n        str = str.replaceAll(\"\\\\s\", \"\"); \n        return str; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Python Programming\"; \n        System.out.println(removeWhitespace(str)); \n    } \n}\n```\n"
    },
    {
        "generated": "```python\nimport base64\n\ndef base64_encode(string):\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string\n\nstring = 'This is a sample string'\nencoded_string = base64_encode(string)\nprint(encoded_string)\n```",
        "target": "```python\nimport base64\n\ndef encode_string(string):\n    # Encode the bytes of the given string\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n\n    # Get the string representation of the encoded bytes\n    encoded_string = str(encoded_bytes, \"utf-8\")\n\n    return encoded_string\n```\n"
    },
    {
        "generated": "```python\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def add(self, other):\n        return Vector2D(self.x + other.x, self.y + other.y)\n    \n    def subtract(self, other):\n        return Vector2D(self.x - other.x, self.y - other.y)\n```",
        "target": "```python\nclass Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def add(self, other):\n    self.x += other.x\n    self.y += other.y\n\n  def subtract(self, other):\n    self.x -= other.x\n    self.y -= other.y\n```\n"
    },
    {
        "generated": "```python\ndict = {i: i for i in range(1, 11)}\n```",
        "target": "```python\ndictionary = {\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'ten': 10\n}\n```\n"
    },
    {
        "generated": "```python\ndef generate_dict(list1, list2):\n    dict = {}\n    for i in range(len(list1)):\n        dict[list1[i]] = list2[i]\n    return dict\n```",
        "target": "```python\ndef generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, render_template, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        age = request.form.get('age')\n        email = request.form.get('email')\n        address = request.form.get('address')\n\n        data = {\n            'name': name,\n            'age': age,\n            'email': email,\n            'address': address\n        }\n\n        # Save data to database\n        #...\n\n        return redirect('/success')\n\n    return render_template('index.html')\n\n@app.route('/success')\ndef success():\n    return render_template('success.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('/')\ndef form():\n    return render_template('form.html')\n\n@app.route('/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')\n```\n"
    },
    {
        "generated": "```python\ndef sum_of_squares(arr):\n    return sum([x**2 for x in arr])\n```",
        "target": "```python\ndef sum_of_squares(myList):\n    result = 0\n    for num in myList:\n        result += num**2\n    return result\n\ntotal = sum_of_squares(myList)\nprint(\"Sum of Squares:\", total)\n```\n"
    },
    {
        "generated": "```python\ndef delete_element(list, element):\n    list.remove(element)\n    return list\n\nlist = [1, 2, 3, 4]\nelement = 3\n\nprint(delete_element(list, element))\n```",
        "target": "```python\ndef delete_element(numbers, element):\n result = []\n for x in numbers:\n if x != element:\n result.append(x)\n return result\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read in the data\ndata = pd.read_csv('data.csv')\n\n# Split the data into training and test sets\ntrain = data.sample(frac=0.8, random_state=42)\ntest = data.drop(train.index)\n\n# Create a CountVectorizer to convert the text data into numerical data\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(train['text'])\ny_train = train['label']\n\n# Create a Multinomial Naive Bayes classifier\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n\n# Make predictions on the test data\nX_test = vectorizer.transform(test['text'])\ny_pred = clf.predict(X_test)\n\n# Evaluate the accuracy of the classifier\naccuracy = clf.score(X_test, y_test)\nprint('Accuracy:', accuracy)\n```",
        "target": "```python\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\n\n# Import the dataset\ndataset = pd.read_csv ('spam.csv')\n   \n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Fitting the model\n classifier.fit(X_train, y_train)\n```\n"
    },
    {
        "generated": "```python\ndef filter_list(list):\n    filtered_list = []\n    for element in list:\n        if element % 3!= 0:\n            filtered_list.append(element)\n    return filtered_list\n\nlist = [1, 2, 3, 4, 5, 6, 9, 12]\nfiltered_list = filter_list(list)\nprint(filtered_list)\n```",
        "target": "```python\ndef filter_list(arr):\n    filtered_list = []\n    for num in arr:\n        if num % 3 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nprint(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))\n```\n"
    },
    {
        "generated": "```python\ndef classify_text(text):\n    # Preprocess the text\n    tokens = text.split()\n    tokens = [token.lower() for token in tokens]\n    tokens = [token for token in tokens if token.isalpha()]\n\n    # Apply the rules\n    if len(tokens) > 10:\n        return 'positive'\n    elif 'love' in tokens:\n        return 'positive'\n    elif 'hate' in tokens:\n        return 'negative'\n    else:\n        return 'neutral'\n```",
        "target": "```python\nimport re\n\ndef classify_text(text):\n # Positive words\n positive_words = ['good', 'great', 'nice', 'love', 'happy', 'fun']\n # Negative words\n negative_words = ['bad', 'horrible', 'hate', 'sad']\n\n # Remove all punctuations\n text = re.sub(r'[^\\w\\s]','',text)\n\n # Split the text into words\n words = text.split()\n\n # Count the number of positive and negative words\n positive_count = 0\n negative_count = 0\n for word in words:\n     if word in positive_words:\n         positive_count += 1\n     if word in negative_words:\n         negative_count += 1\n\n# Classify the text\n if positive_count > negative_count:\n     return \"Positive\"\n elif positive_count < negative_count:\n     return \"Negative\"\n else:\n     return \"Neutral\"\n```\n"
    },
    {
        "generated": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n 'Country': ['USA', 'China', 'UK', 'France', 'Italy'],\n 'Total Cases': [250, 150, 100, 80, 60]\n}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Create Plot\nplt.bar(df['Country'], df['Total Cases'])\n\n# Set Title and Labels\nplt.title('Total Cases of Coronavirus in Different Countries')\nplt.xlabel('Country')\nplt.ylabel('Total Cases')\n\n# Show Plot\nplt.show()\n```",
        "target": "```python\nimport matplotlib.pyplot as plt\n\ncountry_data = [['United States', 212000], ['Russia', 180000], ['Italy', 105000], ['Spain', 90000], ['Germany', 70000]]\ncountry = [data[0] for data in country_data]\ncases = [data[1] for data in country_data]\n\nplt.barh(country, cases)\nplt.title(\"Total number of Coronavirus cases by country\")\nplt.xlabel('Number of cases')\nplt.ylabel('Country')\nplt.show()\n```\n"
    },
    {
        "generated": "```python\ndef factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```",
        "target": "```python\ndef factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n  \nnum = 4\nprint(\"Factorial of\",num,\"is\",factorial(num))\n```\n"
    },
    {
        "generated": "```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<employees>\n    <employee>\n        <name>John Doe</name>\n        <age>25</age>\n        <city>New York</city>\n    </employee>\n    <employee>\n        <name>Jane Doe</name>\n        <age>30</age>\n        <city>Los Angeles</city>\n    </employee>\n</employees>\n```",
        "target": "```python\nimport xml.etree.ElementTree as ET \n\nroot = ET.Element('employees') \n\nemployee1 = ET.SubElement(root, \"employee\") \nemployee1.set(\"employee_id\", \"1\") \nemployee1.set(\"employee_name\", \"John\") \nemployee1.set(\"department\", \"IT\") \nemployee1.set(\"salary\", \"50000\") \n\nemployee2 = ET.SubElement(root, \"employee\") \nemployee2.set(\"employee_id\", \"2\") \nemployee2.set(\"employee_name\", \"Jane\") \nemployee2.set(\"department\", \"Marketing\") \nemployee2.set(\"salary\", \"55000\") \n\ntree = ET.ElementTree(root) \ntree.write(\"employee_data.xml\")\n```\n"
    },
    {
        "generated": "```python\ndef substring_search(string, substring):\n    # Iterate through the string\n    for i in range(len(string)):\n        # Check if the substring is present\n        if string[i:i+len(substring)] == substring:\n            return i\n    return -1\n```",
        "target": "```python\ndef search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ndef sum_list(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum\n```",
        "target": "```python\ndef list_sum(list):\n   sum = 0\n   for el in list:\n       sum += el\n   return sum\n```\n"
    },
    {
        "generated": "```python\nfrom scipy.optimize import minimize\n\n# Objective function\ndef objective(x):\n return -5*x[0] - 2*x[1] + 10\n\n# Constraints\ndef constraint1(x):\n return x[0] + x[1] - 3\n\ndef constraint2(x):\n return x[0] - x[1] + 2\n\n# Constraints dictionary\nconstraints = [{'type': 'ineq', 'fun': constraint1}, \n                {'type': 'ineq', 'fun': constraint2}]\n\n# Optimization problem\nopt = minimize(objective, [0, 0], method='SLSQP', constraints=constraints)\n\n# Print the result\nprint('Optimal solution:', opt.x)\nprint('Optimal objective value:', -opt.fun)\n```",
        "target": "```python\n# Importing packages \nimport scipy.optimize as opt \n\n# Objective function \nz = lambda x, y: 5*x + 6*y \n\n# Defining constraints \nc1 = lambda x, y: 22 - x - y \nc2 = lambda x, y: 15 - 2*x - 4*y \n\n# Bounds \nbnds = ((0, None), (0, None)) \n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': c1} \ncon2 = {'type': 'ineq', 'fun': c2} \ncons = [con1, con2] \n\n#Optimization \nsol = opt.minimize(z, (0, 0), bounds = bnds, constraints = cons) \n\nprint(sol)\n```\n"
    },
    {
        "generated": "```python\ndef longest_word(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n```",
        "target": "```python\ndef longest_word(word_list):\n longest_word = word_list[0]\n for word in word_list:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word\n```\n"
    },
    {
        "generated": "```python\ndef wordLength(words):\n    lengths = []\n    for word in words:\n        lengths.append(len(word))\n    return lengths\n\nwordLength(['Hello', 'World', 'Python'])\n```",
        "target": "```python\ndef get_word_lengths(words):\n    # initialize empty list \n    lengths = [] \n  \n    # iterate over the list of words\n    for word in words: \n        # append the length of each word to lengths              \n        lengths.append(len(word)) \n  \n    # return the list of lengths\n    return lengths\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ntext = \"The temperature was 25 degrees Celsius and 30 degrees Fahrenheit.\"\n\n# Extracting numbers\nnumbers = re.findall(r'\\d+', text)\n\nprint(numbers)\n```",
        "target": "```python\nimport re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))\n```\n"
    },
    {
        "generated": "```python\nclass MyContext:\n    def __init__(self):\n        self.data = None\n\n    def set_data(self, data):\n        self.data = data\n\n    def get_data(self):\n        return self.data\n```",
        "target": "```python\nclass Context:\n def __init__(self):\n self.data = {}\n\n def set(self, key, value):\n self.data[key] = value\n\n def get(self, key):\n return self.data.get(key)\n \n def clear(self):\n self.data = {}\n \n \ncontext = Context()\n \ndef foo():\n context.set('name', 'John')\n \ndef bar():\n print(context.get('name'))\n \n foo()\n bar() # prints 'John'\n```\n"
    },
    {
        "generated": "```python\ndef is_armstrong_number(num):\n    num_digits = len(str(num))\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** num_digits\n        num //= 10\n    return num == sum\n\nnum = 153\nif is_armstrong_number(num):\n    print(num, \"is an Armstrong number.\")\nelse:\n    print(num, \"is not an Armstrong number.\")\n```",
        "target": "```python\ndef is_armstrong_number(num):\n  n = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit**n\n    temp //= 10\n  return sum == num\n```\n"
    },
    {
        "generated": "```python\ndef sort_by_length(list_of_strings):\n    list_of_strings.sort(key=len)\n    return list_of_strings\n```",
        "target": "```python\ndef sort_by_char_length(strings):\n    return sorted(strings, key = len)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)\n```",
        "target": "```python\ndef computeFibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return computeFibonacci(n-1)+computeFibonacci(n-2)\n```\n"
    },
    {
        "generated": "```python\ndef print_stats(arr):\n    # Find the largest and the smallest number in the array\n    max_num = max(arr)\n    min_num = min(arr)\n    \n    # Print the largest and the smallest number\n    print('The largest number in the array is', max_num)\n    print('The smallest number in the array is', min_num)\n    \n    # Calculate the average of all numbers\n    avg = sum(arr) / len(arr)\n    \n    # Print the average\n    print('The average of all numbers is', avg)\n```",
        "target": "```python\ndef find_min_max_avg(arr):\n    # set the min, max numbers to the first item in the array\n    min_num = arr[0]\n    max_num = arr[0]\n\n    # keep track of the sum of all the numbers\n    sum_num = 0\n\n    # iterate through the array\n    for item in arr:\n        # find smallest number\n        if item < min_num:\n            min_num = item\n        # find largest number\n        elif item > max_num:\n            max_num = item\n        # add each number to the sum\n        sum_num += item\n\n    # calculate the average\n    avg_num = sum_num / len(arr)\n    print(\"Smallest Number: {}\\nLargest Number: {}\".format(min_num, max_num))\n    return avg_num\n```\n"
    },
    {
        "generated": "```python\n# Read input from the user\nuser_input = input(\"Please enter something: \")\n\n# Print the user's input\nprint(user_input)\n```",
        "target": "```python\n# prompt the user for input\ndata = input('Enter a value: ')\n\n# print the user's input\nprint('You entered:', data)\n```\n"
    },
    {
        "generated": "```python\ndata = [\n    {\n        'name': 'John',\n        'age': 30,\n        'city': 'New York'\n    },\n    {\n        'name': 'Jane',\n        'age': 25,\n        'city': 'Los Angeles'\n    }\n]\n\ndef convert_to_dict(data):\n    result = []\n    for item in data:\n        result.append({\n            'name': item['name'],\n            'age': item['age'],\n            'city': item['city']\n        })\n    return result\n\nresult = convert_to_dict(data)\nprint(result)\n```",
        "target": "```python\ncsv_data = [\n {'name': 'Albert', 'age': 22},\n {'name': 'Bob', 'age': 24},\n {'name': 'Charles', 'age': 20}\n]\n```\n"
    },
    {
        "generated": "```python\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n```",
        "target": "```python\nclass Converter:\n    def __init__(self, base_currency):\n        self.base_currency = base_currency\n        self.rates = self.get_rates()\n \n    def get_rates(self):\n        # code to get the exchange rates from a web API\n \n    def convert(self, target_currency, amount):\n        return amount / self.rates[target_currency] * self.rates[self.base_currency]\n \nif __name__ == '__main__':\n    converter = Converter(\"USD\")\n    converted_amount = converter.convert(\"EUR\", 100)\n    print(converted_amount)\n```\n"
    },
    {
        "generated": "```python\ndef find_prime_numbers(start, end):\n    for num in range(start, end+1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)\n\nfind_prime_numbers(1, 100)\n```",
        "target": "```python\nfor num in range(2,101):\nfor i in range(2,num):\n if (num % i) == 0:\n break\n else:\n print(num)\n```\n"
    },
    {
        "generated": "```python\nimport json\n\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\ndata_array = []\n\nfor key, value in data.items():\n    data_array.append(value)\n\nprint(data_array)\n```",
        "target": "```python\ndata = [{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"occupation\": \"programmer\"\n}]\n\narr = []\n\nfor item in data:\n    arr.append(item)\n    \nprint(arr)\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ndef clean_string(string):\n    return re.sub(r'[^\\w\\s]', '', string)\n\nstring = \"This is a sample string!\"\ncleaned_string = clean_string(string)\nprint(cleaned_string)\n```",
        "target": "```python\n# function to remove punctuations and special characters\ndef clean_string(str):\n # remove all punctuation\n no_punc = ''.join(c for c in str if c not in '!@#$%^&*()_+-={}[]:\"|;\\<>,./?')\n # remove all special characters\n final_string = ''.join(c for c in no_punc if ord(c) >= 32 and ord(c) <= 126)\n return final_string\n\n# sample input\ninput_str = \"this&is#some$sampletext\"\n\n# call the function to remove punctuations and special characters\nclean_str = clean_string(input_str)\n\n# print the clean string\nprint(clean_str)\n\n## Output:\nthisissomesampletext\n```\n"
    },
    {
        "generated": "```python\ndef can_partition(A):\n    total_sum = 0\n    for i in range(len(A)):\n        total_sum += A[i]\n    if total_sum % 2!= 0:\n        return False\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i]\n        if sum == total_sum // 2:\n            return True\n    return False\n\nA = [1, 2, 3, 4, 5, 6]\nprint(can_partition(A))\n```",
        "target": "```python\ndef partition_equal(arr):\n   total = sum(arr) \n   if total % 2 != 0: \n      return False \n   half = total//2 \n   n = len(arr) \n   dp = [[False for _ in range(half+1)] for _ in range(n+1)] \n   for i in range(n+1): \n      dp[i][0] = True \n   for j in range(1,half+1): \n      dp[0][j] = False \n   for i in range(1, n+1): \n      for j in range(1, half+1): \n         if arr[i-1] <= j:\n            dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \n         else:\n            dp[i][j] = dp[i-1][j] \n   return dp[n][half]\n```\n"
    },
    {
        "generated": "```python\ndef print_first_100_primes():\n    prime_number = 2\n    count = 0\n    while count < 100:\n        for i in range(2, prime_number):\n            if prime_number % i == 0:\n                break\n        else:\n            print(prime_number, end = \" \")\n            count += 1\n        prime_number += 1\n\nprint_first_100_primes()\n```",
        "target": "```python\ndef is_prime(num):\n     \n    # Return False if num is less than 2\n    if num < 2:\n        return False\n     \n    # Check if any number from 2 to (num - 1) divides num\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n             \n    else:\n        return True\n\nnums = []\nnum = 2\n\nwhile len(nums) < 100:\n    if is_prime(num):\n        nums.append(num)\n    num = num + 1\n\nprint(nums)\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_circumference(radius):\n    circumference = 2 * math.pi * radius\n    return circumference\n\nradius = 5\ncircumference = calculate_circumference(radius)\n\nprint(\"The circumference of the circle is\", circumference)\n```",
        "target": "```python\ndef calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference)\n```\n"
    },
    {
        "generated": "```python\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\nprint(largest_prime_factor(24))\n```",
        "target": "```python\nimport math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))\n```\n"
    },
    {
        "generated": "```python\nfor i in range(10):\n    print(\"Hello World!\")\n```",
        "target": "```python\nfor i in range(10):\n print(\"Hello World!\")\n```\n"
    },
    {
        "generated": "```python\ndef average_number_of_items(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total / len(input_list)\n```",
        "target": "```python\ndef average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum/list_length\n  return average\n```\n"
    },
    {
        "generated": "```python\n# -*- coding: utf-8 -*-\n# File: menu_exporter.py\n# Author: <Your Name>\n# Created: 2012-05-09\n# License: GNU GPL v3\n\nimport sys\nimport Qt5Core\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5Core import *\nfrom Qt5",
        "target": "```python\n#!/usr/bin/env python\n# vim:fileencoding=utf-8\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\n\n__license__ = 'GPL v3'\n__copyright__ = '2014, Kovid Goyal <kovid at kovidgoyal.net>'\n\n# Support for excporting Qt's MenuBars/Menus over DBUS. The API is defined in\n# dbus-menu.xml from the libdbusmenu project https://launchpad.net/libdbusmenu\n\nimport dbus\nfrom PyQt5.Qt import (\n    QApplication, QMenu, QIcon, QKeySequence, QObject, QEvent, QTimer, pyqtSignal, Qt)\n\nfrom calibre.utils.dbus_service import Object, BusName, method as dbus_method, dbus_property, signal as dbus_signal\nfrom calibre.gui2.dbus_export.utils import (\n    setup_for_cli_run, swap_mnemonic_char, key_sequence_to_dbus_shortcut, icon_to_dbus_menu_icon)\n\nnull = object()\n\ndef PropDict(mapping=()):\n    return dbus.Dictionary(mapping, signature='sv')\n\ndef create_properties_for_action(ac, previous=None):\n    ans = PropDict()\n    if ac.isSeparator():\n        ans['type'] = 'separator'\n        if not ac.isVisible():\n            ans['visible'] = False\n        return ans\n    text = ac.text() or ac.iconText()\n    if text:\n        ans['label'] = swap_mnemonic_char(text)\n    if not ac.isEnabled():\n        ans['enabled'] = False\n    if not ac.isVisible() or ac.property('blocked') is True:\n        ans['visible'] = False\n    if ac.menu() is not None:\n        ans['children-display'] = 'submenu'\n    if ac.isCheckable():\n        exclusive = ac.actionGroup() is not None and ac.actionGroup().isExclusive()\n        ans['toggle-type'] = 'radio' if exclusive else 'checkmark'\n        ans['toggle-state'] = int(ac.isChecked())\n    shortcuts = ac.shortcuts()\n    if shortcuts:\n        sc = dbus.Array(signature='as')\n        for s in shortcuts:\n            if not s.isEmpty():\n                for x in key_sequence_to_dbus_shortcut(s):\n                    sc.append(dbus.Array(x, signature='s'))\n        if sc:\n            ans['shortcut'] = sc[:1]  # Unity fails to display the shortcuts at all if more than one is specified\n    if ac.isIconVisibleInMenu():\n        icon = ac.icon()\n        if previous and previous.get('x-qt-icon-cache-key') == icon.cacheKey():\n            for x in 'icon-data x-qt-icon-cache-key'.split():\n                ans[x] = previous[x]\n        else:\n            data = icon_to_dbus_menu_icon(ac.icon())\n            if data is not None:\n                ans['icon-data'] = data\n                ans['x-qt-icon-cache-key'] = icon.cacheKey()\n    return ans\n\ndef menu_actions(menu):\n    try:\n        return menu.actions()\n    except TypeError:\n        if isinstance(menu, QMenu):\n            return QMenu.actions(menu)\n        raise\n\nclass DBusMenu(QObject):\n\n    handle_event_signal = pyqtSignal(object, object, object, object)\n\n    def __init__(self, object_path, parent=None, bus=None):\n        QObject.__init__(self, parent)\n        # Unity barfs is the Event DBUS method does not return immediately, so\n        # handle it asynchronously\n        self.handle_event_signal.connect(self.handle_event, type=Qt.QueuedConnection)\n        self.dbus_api = DBusMenuAPI(self, object_path, bus=bus)\n        self.set_status = self.dbus_api.set_status\n        self._next_id = 0\n        self.action_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.actions_changed)\n        self.layout_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.layouts_changed)\n        self.init_maps()\n\n    @property\n    def object_path(self):\n        return self.dbus_api._object_path\n\n    def init_maps(self, qmenu=None):\n        self.action_changes = set()\n        self.layout_changes = set()\n        self.qmenu = qmenu\n        self._id_to_action, self._action_to_id = {}, {}\n        self._action_properties = {}\n\n    @property\n    def next_id(self):\n        self._next_id += 1\n        return self._next_id\n\n    def id_to_action(self, action_id):\n        if self.qmenu is None:\n            return None\n        return self._id_to_action.get(action_id)\n\n    def action_to_id(self, action):\n        if self.qmenu is None:\n            return None\n        return self._action_to_id.get(action)\n\n    def action_properties(self, action_id, restrict_to=None):\n        if self.qmenu is None:\n            return {}\n        ans = self._action_properties.get(action_id, PropDict())\n        if restrict_to:\n            ans = PropDict({k:v for k, v in ans.iteritems() if k in restrict_to})\n        return ans\n\n    def publish_new_menu(self, qmenu=None):\n        self.init_maps(qmenu)\n        if qmenu is not None:\n            qmenu.destroyed.connect(lambda obj=None:self.publish_new_menu())\n            ac = qmenu.menuAction()\n            self.add_action(ac)\n        self.dbus_api.LayoutUpdated(self.dbus_api.revision, 0)\n\n    def set_visible(self, visible):\n        ac = self.id_to_action(0)\n        if ac is not None and self.qmenu is not None:\n            changed = False\n            blocked = not visible\n            for ac in menu_actions(ac.menu()):\n                ac_id = self.action_to_id(ac)\n                if ac_id is not None:\n                    old = ac.property('blocked')\n                    if old is not blocked:\n                        ac.setProperty('blocked', blocked)\n                        self.action_changes.add(ac_id)\n                        changed = True\n            if changed:\n                self.action_changed_timer.start()\n\n    def add_action(self, ac):\n        ac_id = 0 if ac.menu() is self.qmenu else self.next_id\n        self._id_to_action[ac_id] = ac\n        self._action_to_id[ac] = ac_id\n        self._action_properties[ac_id] = create_properties_for_action(ac)\n        if ac.menu() is not None:\n            self.add_menu(ac.menu())\n\n    def add_menu(self, menu):\n        menu.installEventFilter(self)\n        for ac in menu_actions(menu):\n            self.add_action(ac)\n\n    def eventFilter(self, obj, ev):\n        ac = getattr(obj, 'menuAction', lambda : None)()\n        ac_id = self.action_to_id(ac)\n        if ac_id is not None:\n            etype = ev.type()\n            if etype == QEvent.ActionChanged:\n                ac_id = self.action_to_id(ev.action())\n                self.action_changes.add(ac_id)\n                self.action_changed_timer.start()\n            elif etype == QEvent.ActionAdded:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.add_action(ev.action())\n            elif etype == QEvent.ActionRemoved:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.action_removed(ev.action())\n        return False\n\n    def actions_changed(self):\n        updated_props = dbus.Array(signature='(ia{sv})')\n        removed_props = dbus.Array(signature='(ias)')\n        for ac_id in self.action_changes:\n            ac = self.id_to_action(ac_id)\n            if ac is None:\n                continue\n            old_props = self.action_properties(ac_id)\n            new_props = self._action_properties[ac_id] = create_properties_for_action(ac, old_props)\n            removed = set(old_props) - set(new_props)\n            if removed:\n                removed_props.append((ac_id, dbus.Array(removed, signature='as')))\n            updated = PropDict({k:v for k, v in new_props.iteritems() if v != old_props.get(k, null)})\n            if updated:\n                updated_props.append((ac_id, updated))\n        self.action_changes = set()\n        if updated_props or removed_props:\n            self.dbus_api.ItemsPropertiesUpdated(updated_props, removed_props)\n        return updated_props, removed_props\n\n    def layouts_changed(self):\n        changes = set()\n        for ac_id in self.layout_changes:\n            if ac_id in self._id_to_action:\n                changes.add(ac_id)\n        self.layout_changes = set()\n        if changes:\n            self.dbus_api.revision += 1\n            for change in changes:\n                self.dbus_api.LayoutUpdated(self.dbus_api.revision, change)\n        return changes\n\n    def action_is_in_a_menu(self, ac):\n        all_menus = {ac.menu() for ac in self._action_to_id}\n        all_menus.discard(None)\n        return bool(set(ac.associatedWidgets()).intersection(all_menus))\n\n    def action_removed(self, ac):\n        if not self.action_is_in_a_menu(ac):\n            ac_id = self._action_to_id.pop(ac, None)\n            self._id_to_action.pop(ac_id, None)\n            self._action_properties.pop(ac_id, None)\n\n    def get_layout(self, parent_id, depth, property_names):\n        # Ensure any pending updates are done, as they are needed now\n        self.actions_changed()\n        self.layouts_changed()\n        property_names = property_names or None\n        props = self.action_properties(parent_id, property_names)\n        return parent_id, props, self.get_layout_children(parent_id, depth, property_names)\n\n    def get_layout_children(self, parent_id, depth, property_names):\n        ans = dbus.Array(signature='(ia{sv}av)')\n        ac = self.id_to_action(parent_id)\n        if ac is not None and depth != 0 and ac.menu() is not None:\n            for child in menu_actions(ac.menu()):\n                child_id = self.action_to_id(child)\n                if child_id is not None:\n                    props = self.action_properties(child_id, property_names)\n                    ans.append((child_id, props, self.get_layout_children(child_id, depth - 1, property_names)))\n        return ans\n\n    def get_properties(self, ids=None, property_names=None):\n        property_names = property_names or None\n        ans = dbus.Array(signature='(ia{sv})')\n        for action_id in (ids or self._id_to_action):\n            ans.append((action_id, self.action_properties(action_id, property_names)))\n        return ans\n\n    def handle_event(self, action_id, event, data, timestamp):\n        ac = self.id_to_action(action_id)\n        if event == 'clicked':\n            if ac.isCheckable():\n                ac.toggle()\n            ac.triggered.emit(ac.isCheckable() and ac.isChecked())\n\n    def handle_about_to_show(self, ac):\n        child_ids = {self.action_to_id(x) for x in menu_actions(ac.menu())}\n        child_ids.discard(None)\n        ac_id = self.action_to_id(ac)\n        ac.menu().aboutToShow.emit()\n        if ac_id in self.layout_changes or child_ids.intersection(self.action_changes):\n            return True\n        return False\n\nclass DBusMenuAPI(Object):\n\n    IFACE = 'com.canonical.dbusmenu'\n\n    def __init__(self, menu, object_path, bus=None):\n        if bus is None:\n            bus = dbus.SessionBus()\n        Object.__init__(self, bus, object_path)\n        self.status = 'normal'\n        self.menu = menu\n        self.revision = 0\n\n    @dbus_property(IFACE, signature='u')\n    def Version(self):\n        return 3  # GTK 3 uses 3, KDE 4 uses 2\n\n    @dbus_property(IFACE, signature='s', emits_changed_signal=True)\n    def Status(self):\n        return self.status\n\n    def set_status(self, normal=True):\n        self.status = 'normal' if normal else 'notice'\n        self.PropertiesChanged(self.IFACE, {'Status': self.status}, [])\n\n    @dbus_property(IFACE, signature='s')\n    def TextDirection(self):\n        return 'ltr' if QApplication.instance().isLeftToRight() else 'rtl'\n\n    @dbus_property(IFACE, signature='as')\n    def IconThemePath(self):\n        return dbus.Array(signature='s')\n\n    @dbus_method(IFACE, in_signature='iias', out_signature='u(ia{sv}av)')\n    def GetLayout(self, parentId, recursionDepth, propertyNames):\n        layout = self.menu.get_layout(parentId, recursionDepth, propertyNames)\n        return self.revision, layout\n\n    @dbus_method(IFACE, in_signature='aias', out_signature='a(ia{sv})')\n    def GetGroupProperties(self, ids, propertyNames):\n        return self.menu.get_properties(ids, propertyNames)\n\n    @dbus_method(IFACE, in_signature='is', out_signature='v')\n    def GetProperty(self, id, name):\n        return self.menu.action_properties(id).get(name, '')\n\n    @dbus_method(IFACE, in_signature='isvu', out_signature='')\n    def Event(self, id, eventId, data, timestamp):\n        ''' This is called by the applet to notify the application an event happened on a\n        menu item. eventId can be one of the following::\n            * \"clicked\"\n            * \"hovered\"\n            * \"opened\"\n            * \"closed\"\n        Vendor specific events can be added by prefixing them with \"x-<vendor>-\"'''\n        if self.menu.id_to_action(id) is not None:\n            self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n\n    @dbus_method(IFACE, in_signature='a(isvu)', out_signature='ai')\n    def EventGroup(self, events):\n        ''' Used to pass a set of events as a single message for possibily\n        several different menuitems.  This is done to optimize DBus traffic.\n        Should return a list of ids that are not found. events is a list of\n        events in the same format as used for the Event method.'''\n        missing = dbus.Array(signature='u')\n        for id, eventId, data, timestamp in events:\n            if self.menu.id_to_action(id) is not None:\n                self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n            else:\n                missing.append(id)\n        return missing\n\n    @dbus_method(IFACE, in_signature='i', out_signature='b')\n    def AboutToShow(self, id):\n        ac = self.menu.id_to_action(id)\n        if ac is not None and ac.menu() is not None:\n            return self.menu.handle_about_to_show(ac)\n        return False\n\n    @dbus_method(IFACE, in_signature='ai', out_signature='aiai')\n    def AboutToShowGroup(self, ids):\n        updates_needed = dbus.Array(signature='i')\n        id_errors = dbus.Array(signature='i')\n        for ac_id in ids:\n            ac = self.menu.id_to_action(id)\n            if ac is not None and ac.menu() is not None:\n                if self.menu.handle_about_to_show(ac):\n                    updates_needed.append(ac_id)\n            else:\n                id_errors.append(ac_id)\n        return updates_needed, id_errors\n\n    @dbus_signal(IFACE, 'a(ia{sv})a(ias)')\n    def ItemsPropertiesUpdated(self, updatedProps, removedProps):\n        pass\n\n    @dbus_signal(IFACE, 'ui')\n    def LayoutUpdated(self, revision, parent):\n        pass\n\n    @dbus_signal(IFACE, 'iu')\n    def ItemActivationRequested(self, id, timestamp):\n        pass\n\ndef test():\n    setup_for_cli_run()\n    app = QApplication([])\n    bus = dbus.SessionBus()\n    dbus_name = BusName('com.calibre-ebook.TestDBusMenu', bus=bus, do_not_queue=True)\n    m = QMenu()\n    ac = m.addAction(QIcon(I('window-close.png')), 'Quit', app.quit)\n    ac.setShortcut(QKeySequence('Ctrl+Q'))\n    menu = DBusMenu('/Menu', bus=bus)\n    menu.publish_new_menu(m)\n    app.exec_()\n    del dbus_name\n\nif __name__ == '__main__':\n    test()\n\n```\n"
    },
    {
        "generated": "```python\nimport re\n\npattern = r\"\\d{1,2}(?:0|2|4|6|8)$\"\n\nprint(re.search(pattern, \"12\")) # True\nprint(re.search(pattern, \"6\")) # True\nprint(re.search(pattern, \"5\")) # False\n```",
        "target": "```python\nimport re\npattern = re.compile(r'[6-9]|[2-4][0-9]')\n```\n"
    },
    {
        "generated": "```python\nimport requests\n\n# Get the latest posts from Reddit\nurl = 'https://www.reddit.com/.json'\nparams = {\n 'limit': 10\n}\n\nresponse = requests.get(url, params=params)\n\n# Get the posts\nposts = response.json()['data']['children']\n\n# Print the posts\nfor post in posts:\n print(post['data']['title'], post['data']['url'])\n```",
        "target": "```python\nimport praw\n\nreddit = praw.Reddit('bot1')\n\nlatest_posts = [] \nfor submission in reddit.subreddit('all').new(limit=10):\n latest_posts.append(submission.title)\n \nprint(latest_posts)\n```\n"
    },
    {
        "generated": "```python\ndef quicksort(arr): \n    if len(arr) == 0: \n        return arr \n    if len(arr) == 1: \n        return arr \n    pivot = arr[len(arr) // 2] \n    left = [i for i in arr if i < pivot] \n    middle = [i for i in arr if i == pivot] \n    right = [i for i in arr if i > pivot] \n    return quicksort(left) + middle + quicksort(right)\n```",
        "target": "```python\ndef quicksort(arr):\n    # base case for recursion\n    if len(arr) <= 1:\n        return arr\n    # pick pivot element and get its index\n    pivot = arr[0]\n    index = 0\n    # create left and right lists\n    left = []\n    right = []\n    # loop over the array from index 1\n    for i in range(1, len(arr)):\n        # if element is less than pivot, append to left list\n        if arr[i] < pivot:\n            left.append(arr[i])\n        # else, append to right list\n        else:\n            right.append(arr[i])\n    # recursively call function on left and right lists\n    sorted_arr = quicksort(left) + [pivot] + quicksort(right)\n    return sorted_arr\n\nresult = quicksort(arr)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ntree = {\n    'name': 'Program',\n    'children': [\n        {\n            'name': 'Exp',\n            'children': [\n                {\n                    'name': 'Num',\n                    'children': []\n                },\n                {\n                    'name': 'Add',\n                    'children': [\n                        {\n                            'name': 'Num',\n                            'children': []\n                        },\n                        {\n                            'name': 'Num',\n                            'children': []\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            'name': 'Assign',\n            'children': [\n                {\n                    'name': 'Exp',\n                    'children': [\n                        {\n                            'name': 'Num',\n                            'children': []\n                        },\n                        {\n                            'name': 'Assign',\n                            'children': [\n                                {\n                                    'name': 'Exp',\n                                    'children': [\n                                        {\n                                            'name': 'Num',\n                                            'children': []\n                                        },\n                                        {\n                                            'name': 'Add',\n                                            'children': [\n                                                {\n                                                    'name': 'Num',\n                                                    'children': []\n                                                },\n                                                {\n                                                    'name': 'Num',\n                                                    'children': []\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    'name': 'Num',\n                    'children': []\n                }\n            ]\n        }\n    ]\n}\n```",
        "target": "```python\nimport collections\n\n# Create a tree using a Python dictionary\nParseTree = collections.defaultdict(dict)\n\n# Function to add a node to the tree\ndef add_node(parent, child):\n    ParseTree[parent][child] = {}\n\n# Function to traverse the tree\ndef traverse_tree(node):\n    # Base case\n    if len(ParseTree[node]) == 0:\n        return\n    \n    for key, value in ParseTree[node].items():\n        print(\"{}-->{}\".format(node, key))\n        traverse_tree(key)\n```\n"
    },
    {
        "generated": "```python\ndef intersection(list1, list2):\n    return list(set(list1) & set(list2))\n```",
        "target": "```python\ndef intersection(list1, list2): \n    return list(set(list1) & set(list2)) \n\n# Output: [3, 6]\n```\n"
    },
    {
        "generated": "```python\ndef is_valid_ipv4(ip):\n    parts = ip.split('.')\n    if len(parts)!= 4:\n        return False\n    for part in parts:\n        if not part.isdigit() or not 0 <= int(part) <= 255:\n            return False\n    return True\n```",
        "target": "```python\ndef check_valid_ip(ip_addr): \n    ip = ip_addr.split(\".\") \n    if(len(ip) == 4 and \n        int(ip[0]) <= 255 and \n        int(ip[1]) <= 255 and \n        int(ip[2]) <= 255 and \n        int(ip[3]) <= 255): \n        return True\n    else: \n        return False\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef optimize_webpage(url):\n    # Make a request to the URL\n    response = requests.get(url)\n\n    # Parse the HTML\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Add meta tags\n    meta_tags = soup.find_all('meta')\n    meta_tags.append(soup.new_tag('meta', attrs={'name': 'description', 'content': 'This is a description of the webpage'}))\n    meta_tags.append(soup.new_tag('meta', attrs={'name': 'keywords', 'content': 'This is a list of keywords for the webpage'}))\n\n    # Add header tags\n    header_tags = soup.find_all('h1', attrs={'class': 'title'})\n    for tag in header_tags:\n        tag.name = 'h1'\n        tag.attrs['class'] = 'title'\n\n    # Add alt tags\n    images = soup.find_all('img')\n    for image in images:\n        image.attrs['alt'] = 'An alt tag for this image'\n\n    # Save the modified HTML\n    with open(url, 'w') as f:\n        f.write(soup.prettify())\n```",
        "target": "```python\nimport re\nimport requests\n\ndef optimize_webpage(url):\n    r = requests.get(url, timeout=5)\n    content = r.text\n    content = content.lower()\n    title = re.search('<title>(.*)</title>', content)\n    title_text = title.group(1).strip()\n    content = content.replace(title_text, title_text.lower())\n    keywords = re.findall('<meta name=\"keywords\" content=\"(.*)\">', content)\n    for word in keywords:\n        if word.strip():\n            content = content.replace(word, word.lower())\n\n    description = re.findall('<meta name=\"description\" content=\"(.*)\">', content)\n    for desc in description:\n        if desc.strip():\n            content = content.replace(desc, desc.lower())\n    return content\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, LSTM, Embedding\nfrom tensorflow.keras.models import Sequential\n\n# Create the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=vocab_size, output_dim=128, input_length=max_length))\nmodel.add(LSTM(128, return_sequences=True))\nmodel.add(LSTM(128))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n```",
        "target": "```python\n# Load the required libraries\nimport numpy as np\nimport tensorflow\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n\n# Load the training dataset\nsentences = ['This is a good sentiment', 'This is a bad sentiment']\nlabels = [1, 0]\n\n# Create the tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(sentences)\n\n# Encode  the sentences\nencoded_sentences = tokenizer.texts_to_sequences(sentences)\npadded_sentences = pad_sequences(encoded_sentences, maxlen=10)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=32, input_length=10))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile and fit the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(padded_sentences, labels, epochs=10) \n\n# Evaluate the model\nscores = model.evaluate(padded_sentences, labels) \nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_roots(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # calculate the two roots\n    root1 = (-b-math.sqrt(d))/(2*a)\n    root2 = (-b+math.sqrt(d))/(2*a)\n\n    return root1, root2\n\na = 1\nb = -3\nc = 2\n\nroot1, root2 = calculate_roots(a, b, c)\n\nprint(\"The roots of the quadratic equation are\", root1, \"and\", root2)\n```",
        "target": "```python\nimport math\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3))\n```\n"
    },
    {
        "generated": "```python\ndef add_numbers(a, b):\n    return a + b\n```",
        "target": "```python\ndef add(a, b):\n    return a + b\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef genetic_algorithm(problem):\n    # Define the population size\n    population_size = 100\n\n    # Initialize the population\n    population = [random.generate(problem) for _ in range(population_size)]\n\n    # Define the number of generations\n    num_generations = 10\n\n    # Iterate over the generations\n    for _ in range(num_generations):\n        # Evaluate the population\n        scores = [problem.evaluate(p) for p in population]\n\n        # Select the fittest\n        fittest = [p for _, p in sorted(zip(scores, population))[:population_size//2]]\n\n        # Generate the offspring\n        offspring = [random.generate(problem) for _ in range(population_size//2)]\n\n        # Crossover the offspring with the fittest\n        offspring = [random.crossover(offspring, fittest) for _ in range(population_size//2)]\n\n        # Mutate the offspring\n        offspring = [random.mutate(offspring) for _ in range(population_size//2)]\n\n        # Update the population\n        population = fittest + offspring\n\n    # Return the best solution\n    return min(population, key=problem.evaluate)\n```",
        "target": "```python\nimport random\nimport numpy as np\n\n# Define the function\ndef f(x, y):\n    return (x**2) + (2*y**2)\n\n# Define parameters for genetic algorithm\npop_size = 25 \nnum_generations = 100\n\n# Create initial random starting population\npop = np.random.rand(pop_size, 2) \nscores = np.array([f(*member) for member in pop])\n\n# Iterate over the generations\nfor i in range(num_generations):\n    # Create mating pool\n    mating_pool=np.random.choice(np.arange(pop_size), replace=False, size=(round(pop_size/2), 2)) \n    offspring = np.empty_like(mating_pool) \n    # Create offspring\n    for parent_idx, child_idx in enumerate(mating_pool):\n        parent_1 = pop[child_idx[0]]\n        parent_2 = pop[child_idx[1]]\n\n        # Generate offspring\n        child_1 = np.random.uniform(low=min(parent_1, parent_2),high=max(parent_1, parent_2)) \n        child_2 = np.random.choice([child_1[0],child_1[1]])\n        offspring[parent_idx] = [child_1[0], child_2]\n\n    # Evaluate offspring\n    scores_offspring = np.array([f(*member) for member in offspring])\n    # Generate mating pool for next iteration\n    mating_pool = np.concatenate((pop,offspring))\n    scores = np.concatenate((scores,scores_offspring))\n    pop = mating_pool\n    # Select best individuals\n    best_idx = np.argsort(scores)[:pop_size] \n    pop = mating_pool[best_idx]\n\n# Find global minimum\nglobal_minimum = np.min(scores) \n\nprint('Global minimum is ',global_minimum)\n```\n"
    },
    {
        "generated": "```python\nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n    print(string)\n```",
        "target": "```python\nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)\n```\n"
    },
    {
        "generated": "```python\ndef find_largest_number(list):\n    largest_number = list[0]\n    for num in list:\n        if num > largest_number:\n            largest_number = num\n    return largest_number\n```",
        "target": "```python\ndef largestNumber(list): \n    max_num = 0\n    for i in list:  \n        if i > max_num: \n            max_num = i \n    return max_num \n  \n\nlist = [3, 6, 4, 8, 1]\nlargestNumber = largestNumber(list) \nprint(\"Largest element in the list is: \", largestNumber);\n```\n"
    },
    {
        "generated": "```python\ndef largest_num(list):\n    max_num = list[0]\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n```",
        "target": "```python\nmy_list = [1, 5, 10, 20, 8]\n\nlargest = max(my_list)\nprint(\"The largest number from the given list is: \" + str(largest))\n```\n"
    },
    {
        "generated": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 5\nprint(factorial(n))\n```",
        "target": "```python\ndef factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)\n```\n"
    },
    {
        "generated": "```python\ndef personalize_user_experience(name):\n    greeting = \"Hello \" + name + \"!\"\n    welcome_message = \"Welcome to our website \" + name + \"!\"\n    return greeting, welcome_message\n\nname = \"John\"\ngreeting, welcome_message = personalize_user_experience(name)\nprint(\"Greeting:\", greeting)\nprint(\"Welcome message:\", welcome_message)\n```",
        "target": "```python\nname = input(\"Please enter your name: \")\n\nif name == \"Alice\":\n    print(\"Welcome, Alice! Here are some personalized recommendations:\")\n    print(\"1. Movie recommendations\")\n    print(\"2. Restaurant recommendations\")\n    print(\"3. Shopping recommendations\")\nelse:\n    print(\"Welcome! Please check out our general recommendations:\")\n    print(\"1. Popular movies\")\n    print(\"2. Popular restaurants\")\n    print(\"3. Popular shopping stores\")\n```\n"
    },
    {
        "generated": "```python\nimport csv\n\nwith open('sales_data.csv', 'r') as csvfile:\n    csv_reader = csv.DictReader(csvfile)\n    sales_data = []\n    for row in csv_reader:\n        sales_data.append(row)\n\nwith open('sales_report.csv', 'w') as csvfile:\n    csv_writer = csv.DictWriter(csvfile, fieldnames=sales_data[0].keys())\n    csv_writer.writeheader()\n    for row in sales_data:\n        csv_writer.writerow(row)\n```",
        "target": "```python\nimport csv\n\n# A list of dictionaries containing sales data\nsales_data = [\n { 'name': 'John', 'quantity': 2, 'price': 10.0 },\n { 'name': 'Jane', 'quantity': 3, 'price': 15.0 },\n { 'name': 'Mike', 'quantity': 4, 'price':\n```\n"
    },
    {
        "generated": "```python\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\ncelsius_temperature = 25\nfahrenheit_temperature = celsius_to_fahrenheit(celsius_temperature)\nprint(f\"{celsius_temperature}\u00b0C is equal to {fahrenheit_temperature}\u00b0F\")\n```",
        "target": "```python\ndef convert_celsius(celsius):\n # Convert celsius to Fahrenheit\n fahrenheit = celsius * 9/5 + 32\n\n # Return fahrenheit value\n return fahrenheit\n\n# Test\ncelsius = 32\nprint(convert_celsius(celsius))\n```\n"
    },
    {
        "generated": "```python\nclass JobOffer:\n    def __init__(self, company, position, salary, description):\n        self.company = company\n        self.position = position\n        self.salary = salary\n        self.description = description\n\n    def get_info(self):\n        return f\"Company: {self.company}, Position: {self.position}, Salary: {self.salary}, Description: {self.description}\"\n```",
        "target": "```python\nclass JobOffer:\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    \n    def get_title(self):\n        return self.title\n    \n    def get_salary(self):\n        return self.salary\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nimport tensorflow as tf\n\n# Define the input and output\nx = tf.placeholder(tf.float32, shape=[None, 4])\ny = tf.placeholder(tf.float32, shape=[None, 1])\n\n# Create the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(4, activation='relu', input_shape=[4]))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n# Define the cost and optimizer\ncost = tf.reduce_mean(tf.keras.losses.binary_crossentropy(y, model.predict(x)))\noptimizer = tf.keras.optimizers.SGD(learning_rate=0.01)\n\n# Create the training operation\ntrain = optimizer.minimize(cost)\n\n# Create the evaluation operation\ntest = tf.keras.metrics.accuracy(y, model.predict(x))\n\n# Create the session\nsession = tf.Session()\n```",
        "target": "```python\n# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))\n```\n"
    },
    {
        "generated": "```python\nfor i in range(1, 6):\n    for j in range(i):\n        print(\"*\", end=\" \")\n    print()\n```",
        "target": "```python\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(\"*\", end=\" \")\n    print()\n```\n"
    },
    {
        "generated": "```python\ndef is_substring(string1, string2):\n    if string1 in string2:\n        return True\n    else:\n        return False\n```",
        "target": "```python\ndef is_substring(string1, string2): \n    if string1 in string2:\n        return True\n    else:\n        return False\n```\n"
    },
    {
        "generated": "```python\nfruits = [\"apple\", \"banana\", \"lemon\", \"mango\"]\n```",
        "target": "```python\nmy_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]\n```\n"
    },
    {
        "generated": "```python\ndef calculate_stats(numbers):\n    mean = sum(numbers) / len(numbers)\n    median = sorted(numbers)[len(numbers) // 2]\n    mode = max(set(numbers), key=numbers.count)\n    return mean, median, mode\n\nmean, median, mode = calculate_stats([1, 3, 4, 5, 7, 8, 9, 10])\nprint(\"Mean: \", mean)\nprint(\"Median: \", median)\nprint(\"Mode: \", mode)\n```",
        "target": "```python\ndef mean(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total / len(arr)\n\ndef median(arr):\n  arr.sort()\n  if len(arr) % 2 != 0:\n    median_index = int(len(arr) / 2)\n    return arr[median_index]\n  else:\n    lower_index = int(len(arr) / 2) - 1\n    upper_index = int(len(arr) / 2)\n    return (arr[lower_index] + arr[upper_index]) / 2\n\ndef mode(arr):\n  counts = {}\n  for num in arr:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n\n  max_frequency = 0\n  max_value = None\n  for num, frequency in counts.items():\n    if frequency > max_frequency:\n      max_frequency = frequency\n      max_value = num\n\n  return max_value\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nmean = mean(nums)\nmedian = median(nums)\nmode = mode(nums)\n\nprint(f'Mean: {mean}, Median: {median}, Mode: {mode}')\n```\n"
    },
    {
        "generated": "```python\ndef odd_desc(arr):\n    odd = [num for num in arr if num % 2!= 0]\n    odd.sort(reverse=True)\n    return odd\n\narr = [3, 5, 2, 9, 1, 7]\nresult = odd_desc(arr)\nprint(result)\n```",
        "target": "```python\ndef extract_odd(arr):\n    odd = [x for x in arr if x % 2 != 0]\n    return sorted(odd, reverse = True)\n\narr = [1, 8, 5, 9, 12, 17]\nprint(extract_odd(arr)) # Output: [17, 9, 5, 1]\n```\n"
    },
    {
        "generated": "```python\nlist = [1, 2, 3, 4, 5]\nlast_element = list[-1]\n```",
        "target": "```python\nmy_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))\n```\n"
    },
    {
        "generated": "```python\ndef average_age(people):\n    total_age = 0\n    for person in people:\n        total_age += person['age']\n    return total_age / len(people)\n```",
        "target": "```python\ndef calculate_average_age(names, ages):\n    result = 0\n    for i in range(len(names)):\n        result += ages[i]\n    return round(result / len(names), 2)\n\nnames = ['Bob', 'Jack', 'John', 'David']\nages = [12, 27, 45, 16]\n\nprint(calculate_average_age(names, ages))\n```\n"
    },
    {
        "generated": "```python\ndef parse_string(string):\n    chars = string.split()\n    return chars\n```",
        "target": "```python\ndef parse_str(str, separator):\n    strList = str.split(separator) \n    return strList\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the DataFrame\ndf = pd.read_csv('data.csv')\n\n# Visualize the DataFrame\ndf.plot()\nplt.show()\n```",
        "target": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],\n    'Age': [18, 25, 35, 45]\n})\n\nax = df.plot.bar(x='Name', y='Age', rot=0)\n\nplt.show()\n```\n"
    },
    {
        "generated": "```python\ndef factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\nn = 12\nfactors = factors(n)\nprint(factors)\n```",
        "target": "```python\ndef factor_of(n):\n    result = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n    return result\n```\n"
    },
    {
        "generated": "```python\ndef sum_of_squares(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i * i\n    return total\n\nresult = sum_of_squares(5)\nprint(result)\n```",
        "target": "```python\nprint(\"Hello World\")\n```\n"
    },
    {
        "generated": "```python\n# Get numbers from the user\nnums = []\nfor i in range(5):\n    num = int(input(\"Enter number: \"))\n    nums.append(num)\n\n# Sort the numbers\nnums.sort()\n\n# Calculate the median\nif len(nums) % 2 == 0:\n    median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\nelse:\n    median = nums[len(nums)//2]\n\n# Print the median\nprint(\"Median is: \", median)\n```",
        "target": "```python\nnums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2\nelse:\n ans = nums[len(nums) // 2]\n \nprint(\"Median of the given numbers is: \" + str(ans))\n```\n"
    },
    {
        "generated": "```python\ndef to_pig_latin(string):\n    words = string.split(' ')\n    pig_latin_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            pig_latin_word = word + 'ay'\n        else:\n            pig_latin_word = word[1:] + word[0] + 'ay'\n        pig_latin_words.append(pig_latin_word)\n    pig_latin_string =''.join(pig_latin_words)\n    return pig_latin_string\n\npig_latin_string = to_pig_latin(string)\nprint(pig_latin_string)\n```",
        "target": "```python\ndef pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)\n```\n"
    },
    {
        "generated": "```python\ndef get_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % prime!= 0 for prime in primes):\n            primes.append(num)\n        num += 1\n    return primes\n\nprint(get_primes(100))\n```",
        "target": "```python\ndef get_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n+1): \n        for i in range(2, num): \n            if num % i == 0:\n                break\n        else:\n            prime_numbers.append(num) \n    return prime_numbers\n\nprint(get_prime_numbers(100))\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ndef clean_text(text):\n text = text.lower()\n text = re.sub(r'[^\\w\\s]','', text)\n text = re.sub(r'\\s+','', text)\n return text\n\ntext = \"This is a sample text.\"\nclean_text(text)\n```",
        "target": "```python\nimport re\n\ndef clean_text(text):\n cleaned_text = re.sub(r'[^\\w\\s]','', text)\n cleaned_text = cleaned_text.lower().strip()\n return cleaned_text\n \n text = 'This is a sample sentence.'\n cleaned_text = clean_text(text)\n print(cleaned_text)\n\n# Output: thisisasamplesentence\n```\n"
    },
    {
        "generated": "```python\nimport random\n\nnumbers = list(range(1,21))\n\nrandom.shuffle(numbers)\n\nprint(numbers)\n```",
        "target": "```python\nimport random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator())\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nlst = [1, 2, 3, 4]\nshuffled_list = shuffle_list(lst)\nprint(shuffled_list)\n```",
        "target": "```python\nimport random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis)\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    password = ''.join(random.choice(chars) for i in range(length))\n    return password\n\npassword_length = 10\nrandom_password = generate_password(password_length)\nprint(random_password)\n```",
        "target": "```python\nimport string\nimport random\n\ndef generatePassword():\n    # Generate list of lowercase and uppercase letters\n    letters = string.ascii_letters\n    # Generate a random string with length 10 \n    password = ''.join(random.choice(letters) for i in range(10)) \n    return password\n\nprint(generatePassword())\n```\n"
    },
    {
        "generated": "```python\ndef extract_duplicates(arr):\n    duplicates = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                duplicates.append(arr[i])\n    return duplicates\n```",
        "target": "```python\ndef extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result\n```\n"
    },
    {
        "generated": "```python\n# Queue 1\nqueue1 = [1, 2, 3, 4, 5]\nfront_queue1 = queue1[0]\n\n# Queue 2\nqueue2 = [6, 7, 8, 9, 10]\nfront_queue2 = queue2[0]\n\n# Queue 3\nqueue3 = [11, 12, 13, 14, 15]\nfront_queue3 = queue3[0]\n\nprint(\"Front of Queue 1:\", front_queue1)\nprint(\"Front of Queue 2:\", front_queue2)\nprint(\"Front of Queue 3:\", front_queue3)\n```",
        "target": "```python\ndef print_front_elements_from_queues(queue_list):\n    for queue in queue_list:\n        print(queue[0])\n\nqueue_list = [queue1, queue2]\n\nprint_front_elements_from_queues(queue_list) # This should print 5 and 7\n```\n"
    },
    {
        "generated": "```python\ndef find_largest_element(list):\n    largest_element = list[0]\n    for element in list:\n        if element > largest_element:\n            largest_element = element\n    return largest_element\n\nlist = [1, 2, 3, 4, 5]\nprint(find_largest_element(list))\n```",
        "target": "```python\ndef maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)\n```\n"
    }
]