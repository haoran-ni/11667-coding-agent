[
    {
        "generated": "```python\nfrom wikipedia import crawl, Entry\n\ndef categorize_wikipedia_articles():\n    articles = crawl.all()\n    categories = {}\n    for article in articles:\n        category = article.get('category', '')\n        if category not in categories:\n            categories[category] = []\n        categories[category].append(article['title'])\n    for category, articles in categories.items():\n        for article in articles:\n            Entry(article['title'], category).save()\n\ncategorize_wikipedia_articles()\n```",
        "target": "```python\nimport wikipedia\n\narticles = ['Advanced Dungeons & Dragons',\n            'The Legend of Zelda',\n            'Mario Kart']\n\nfor article in articles:\n page = wikipedia.page(title=article)\n print(article, page.categories)\n\n# Output:\n# Advanced Dungeons & Dragons ['Books about games', 'Dungeons & Dragons', 'Role-playing game books']\n# The Legend of Zelda ['1986 video games', 'Action-adventure games', 'High fantasy video games', 'Nintendo franchises', 'The Legend of Zelda']\n# Mario Kart ['1992 video games', 'Kart racing video games', 'Mario Kart', 'Nintendo franchises', 'Racing video games', 'Video games developed in Japan']\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef list_intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\nprint(list_intersection(list1, list2))\n```",
        "target": "```python\ndef intersection(list1, list2):\n    intersection = [value for value in list1 if value in list2]\n    return intersection\n\nlist1 = [1,2,3,4,5]\nlist2 = [4,5,6,7,8]\nresult = intersection(list1, list2)\nprint(result) # prints [4,5]\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\n\ndef generate_report(df):\n    # Define the columns to be used in the report\n    columns = ['column1', 'column2', 'column3']\n\n    # Create a DataFrame from the input DataFrame\n    df = pd.DataFrame(df)\n\n    # Add a new column with summary data\n    df['summary'] = df[columns].apply(lambda x: f\"{x.name}: {x.sum()}\")\n\n    # Print the report\n    print(df)\n\n# Example usage:\ndata = {\n    'column1': [1, 2, 3, 4, 5],\n    'column2': [6, 7, 8, 9, 10],\n    'column3': [11, 12, 13, 14, 15]\n}\n\ndf = pd.DataFrame(data)\ngenerate_report(df)\n```",
        "target": "```python\nimport pandas as pd \n\n# Load data from the orders table \norders = pd.read_csv('orders.csv')\n\n# Generate summary statistics for the orders table \nsummary_stats = orders.describe()\n\n# Generate a report containing summary statistics \nreport = open('report.html', 'w') \nreport.write(summary_stats.to_html()) \nreport.close()\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nfor i in range(0, 101, 2):\n    print(i)\n```",
        "target": "```python\nfor i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)\n```\n"
    },
    {
        "generated": "```python\ndef get_common_elements(list_of_lists):\n    common_elements = []\n    for sublist in list_of_lists:\n        for element in sublist:\n            if element in common_elements:\n                common_elements.append(element)\n    return common_elements\n\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(get_common_elements(list_of_lists))\n```",
        "target": "```python\ndef get_common_elements(list_of_lists): \n    commons = []\n    for i in range(len(list_of_lists)): \n        commons = list(set(commons).intersection(list_of_lists[i]))\n    return commons\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef multiply(a, b):\n    if b == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a + multiply(a, b - 1)\n\n# Test the function\nprint(multiply(5, 3))  # Output: 15\n```",
        "target": "```python\ndef multiply(x, y):\n\tif y == 0:\n\t\treturn 0\n\telse:\n\t\treturn x + multiply(x, y - 1)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nfrom collections import deque\n\ndef merge_sorted_lists(list1, list2):\n    merged_list = deque()\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n\n    return list(merged_list)\n\n# Example usage:\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]\nprint(merge_sorted_lists(list1, list2))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```",
        "target": "```python\nlist_a = [1, 3, 5, 7]\nlist_b = [2, 4, 6, 8]\n\ndef merge_sorted_lists(list_a, list_b):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i+=1\n        else:\n            merged_list.append(list_b[j])\n            j+=1\n    while i < len(list_a):\n        merged_list.append(list_a[i])\n        i+=1\n    while j < len(list_b):\n        merged_list.append(list_b[j])\n        j+=1\n    return merged_list\n```\n"
    },
    {
        "generated": "```python\n# Compare two strings in Python\ndef compare_strings(str1, str2):\n    return str1 == str2\n\n# Test the function\nprint(compare_strings(\"Hello\", \"Hello\"))  # True\nprint(compare_strings(\"Hello\", \"World\"))  # False\n```",
        "target": "```python\ndef compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                return False\n    return True\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    if n < 2:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef optimize_fibonacci(n):\n    fib_sequence = [fibonacci(i) for i in range(2, n+1)]\n    return fib_sequence\n```",
        "target": "```python\ndef fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n if n in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n if n > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10))\n```\n"
    },
    {
        "generated": "```python\ndef calculate_interest(principal, rate, duration):\n    return (principal * rate * duration) / 100\n\nprincipal = float(input(\"Enter the principal amount: \"))\nrate = float(input(\"Enter the rate of interest (in %): \"))\nduration = float(input(\"Enter the duration (in years): \"))\n\ninterest = round(calculate_interest(principal, rate, duration), 2)\nprint(f\"The simple interest is: {interest}\")\n\n# For demonstration purposes, let's calculate interest for a 5-year duration at 5% interest rate\ninterest = round(calculate_interest(principal, 5, 5), 2)\nprint(f\"The simple interest for 5 years at 5% interest rate is: {interest}\")\n```",
        "target": "```python\ndef calculateSimpleInterest(principal, rate, duration):\n    if rate != 0:\n        interest = (principal * rate * duration) / 100\n    else:\n        interest = 0\n    return interest\n```\n"
    },
    {
        "generated": "```python\ndef char_frequency(input_string):\n    frequency = {}\n    for char in input_string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n\ninput_string = \"Hello123\"\nprint(char_frequency(input_string))\n```",
        "target": "```python\ndef count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n```\n"
    },
    {
        "generated": "```python\ndef check_string(input_str):\n    check_set = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    if set(input_str.lower()) == set(check_set):\n        print(f\"'{input_str}' contains only the specified characters.\")\n    else:\n        print(f\"'{input_str}' does not contain only the specified characters.\")\n\ncheck_string(\"Hello123\")  # Output: Hello123 contains only the specified characters.\ncheck_string(\"Hello!123\")  # Output: Hello!123 does not contain only the specified characters.\n```",
        "target": "```python\nimport re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')\n```\n"
    },
    {
        "generated": "```python\ndef find_closest_elements(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n    \n    arr.sort()\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        current = arr[left] + arr[right]\n        if left == right:\n            return arr[left]\n        if abs(current) > abs(arr[left] - arr[right]):\n            left += 1\n        else:\n            right -= 1\n    \n    return None\n\n# Example usage:\narr = [2, 5, 8, 12, 20]\nclosest = find_closest_elements(arr)\nif closest is not None:\n    print(f\"The two elements closest to each other are: {closest}\")\nelse:\n    print(\"No elements found that are closest to each other\")\n```",
        "target": "```python\nimport sys\n\ndef find_closest_pair(arr):\n    # Variables\n    min_distance = sys.maxsize\n    closest_pair = [-1, -1]\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Get second number\n        for j in range(i + 1, len(arr)):\n            # Calculate the distance between the two values\n            distance = abs(arr[i] - arr[j])\n            # Check if it is the minimum distance\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair[0] = arr[i]\n                closest_pair[1] = arr[j]\n    \n    return closest_pair\n\n# example\narr = [3, 5, 8, 7, 1, 12]\nclosest_pair = find_closest_pair(arr)\nprint('Closest pair:', closest_pair)  # Output is [1, 3]\n```\n"
    },
    {
        "generated": "```python\nclass Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point2D(x={self.x}, y={self.y})\"\n```",
        "target": "```python\nclass Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\nif __name__ == '__main__':\n  point = Point(2, 3)\n  print(point.x, point.y)\n```\n"
    },
    {
        "generated": "```python\ndef create_dict(lst):\n    return {i: elem for i, elem in enumerate(lst)}\n\nlst = input(\"Enter a list: \")\nprint(create_dict(lst))\n```",
        "target": "```python\ndef create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\ndef multiplication_table(n):\n for i in range(1, n+1):\n   for j in range(1, n+1):\n     print(str(i*j).rjust(4), end=\" \")\n   print()\n\nmultiplication_table(5)\n\n# Output:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n```\n"
    },
    {
        "generated": "```python\ndef compute_sum(lst):\n    return lst[2] + lst[6]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = compute_sum(my_list)\nprint(result)\n```",
        "target": "```python\ndef sum_elements(list):\n    Sum = list[2] + list[6]\n    return Sum\nprint(sum_elements(list))\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, jsonify\n\ndef create_api():\n    app = Flask(__name__)\n    @app.route('/api/v1/data', methods=['GET'])\n    def get_data():\n        return jsonify({'message': 'API deployed successfully'})\n\n    @app.route('/api/v1/data/<string:resource>', methods=['GET'])\n    def get_resource(resource):\n        return jsonify({'message': f'API deployed for resource {resource}'})\n\n    @app.route('/api/v1/data', methods=['POST'])\n    def post_data():\n        return jsonify({'message': 'API deployed successfully'})\n\n    @app.route('/api/v1/data/<string:resource>', methods=['POST'])\n    def post_resource(resource):\n        return jsonify({'message': f'API deployed for resource {resource}'})\n\n    return app\n\napi = create_api()\napi.run(host='0.0.0.0', port=5000)\n```",
        "target": "```python\n# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_password():\n    # Define characters\n    chars = string.ascii_letters + string.digits + string.punctuation\n    \n    # Ensure password has required characters\n    password = [random.choice(chars) for _ in range(8)]\n    \n    # Ensure password has required character types\n    password[0] = random.choice([char for char in chars if char.isupper()])\n    password[1] = random.choice([char for char in chars if char.islower()])\n    password[2] = random.choice([char for char in chars if char.isdigit()])\n    password[3] = random.choice([char for char in chars if char in string.punctuation])\n    \n    return ''.join(password)\n\n# Print the generated password\nprint(generate_password())\n```",
        "target": "```python\nimport string\nimport random\n\nchars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n\ndef generate_password(size=8, chars=chars):\n return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n```\n"
    },
    {
        "generated": "```python\ndef delete_duplicates(input_str):\n    seen = set()\n    output_str = \"\"\n    for char in input_str:\n        if char not in seen:\n            seen.add(char)\n            output_str += char\n    return output_str\n\nprint(delete_duplicates(\"aabbccdd\"))\n```",
        "target": "```python\ndef deleteDuplicates(string): \n    result = \"\"\n    for i in string: \n        if i not in result: \n            result = result + i\n    return result\n\nprint(\"The output string is: \", deleteDuplicates(string))\n```\n"
    },
    {
        "generated": "```python\n# Look-up table implementation using a Python dictionary\ndef create_lookup_table():\n    lookup_table = {}\n    return lookup_table\n\nlookup_table = create_lookup_table()\n\n# Print the lookup table\nprint(lookup_table)\n```",
        "target": "```python\nlookup_table = {\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\"}\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/blog', methods=['POST'])\ndef add_post():\n    data = request.get_json()\n    post_id = data.get('id', '0')\n    post_title = data.get('title', '0')\n    post_content = data.get('content', '0')\n    \n    if post_id == '0' or post_title == '0' or post_content == '0':\n        return jsonify({'error': 'Invalid post data'}), 400\n    \n    app.post('/blog', json.dumps({'id': post_id, 'title': post_title, 'content': post_content}), response_type='application/json')\n    return jsonify({'message': 'Post added successfully'}), 201\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Create a post\n@app.route('/post', methods=['POST'])\ndef create_post():\n data = request.get_json()\n post = {\n 'title': data['title'],\n 'content': data['content'],\n 'author': data['author'],\n }\n # store post in database\n return jsonify(post)\n\nif __name__ == '__main__':\n app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\nimport random\n\n# Generate a random list of numbers between 0 and 10 with a length of 25\nrandom_list = [random.randint(0, 10) for _ in range(25)]\nprint(random_list)\n```",
        "target": "```python\nimport random\n\n# Generate a random list of numbers\nnums = []\nfor _ in range(25):\n   nums.append(random.randint(0, 10))\n\nprint(nums)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci_sequence(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\nprint(fibonacci_sequence(10))\n```",
        "target": "```python\ndef fibonacci_seq(n):\n    if n < 0:\n        raise ValueError(\"Index must be a positive integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c\n\nfib_7 = fibonacci_seq(7)\nprint(fib_7)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci_series(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return fib\n\nprint(fibonacci_series(10))\n```",
        "target": "```python\ndef fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34\n```\n"
    },
    {
        "generated": "```python\nclass NameSentences:\n    def __init__(self):\n        self.sentences = {\n            '1': 'Hello, I am a short person.',\n            '2': 'Hello, I am a medium person.',\n            '3': 'Hello, I am a long person.'\n        }\n\n    def get_sentence(self, length):\n        if length in self.sentences:\n            return self.sentences[length]\n        else:\n            return 'Sorry, I do not know your name. Please input your name.'\n\n# Usage\nname_sentences = NameSentences()\nprint(name_sentences.get_sentence(1))  # Hello, I am a short person.\nprint(name_sentences.get_sentence(2))  # Hello, I am a medium person.\nprint(name_sentences.get_sentence(3))  # Hello, I am a long person.\n```",
        "target": "```python\nclass NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\"\n```\n"
    },
    {
        "generated": "```python\ndef find_string(main_string, target_string):\n    return main_string.find(target_string)\n\nmain_string = \"Hello World Python Programming\"\ntarget_string = \"Python\"\nprint(find_string(main_string, target_string))  # Output: 14\n```",
        "target": "```python\ndef str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")\n```\n"
    },
    {
        "generated": "```python\ndef calculate_median(numbers):\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return [numbers[i] for i in range(n//2, n//2+1)]\n    else:\n        return [numbers[i] for i in range(n//2, n//2+1, 1)]\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 9, 11, 13, 15]\nprint(calculate_median(numbers))  # Output: [5, 7, 9, 11, 13, 15]\n```",
        "target": "```python\ndef get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1/2)-1] + tuple_l[int(l_1/2)])/2\n        else:\n            median = tuple_l[int((l_1-1)/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]\n```\n"
    },
    {
        "generated": "```python\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n\n    def __str__(self):\n        return f\"Title: {self.title}\\nAuthor: {self.author}\\nYear: {self.year}\"\n\n# Example usage:\nbook = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\nprint(book)\n```",
        "target": "```python\nclass Book:\n  \n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n \n def __str__(self):\n  return f\"{self.title} by {self.author} ({self.year})\"\n```\n"
    },
    {
        "generated": "```python\nclass Car:\n    def __init__(self, brand, horsepower, color):\n        self.brand = brand\n        self.horsepower = horsepower\n        self.color = color\n```",
        "target": "```python\nclass Car:\n def __init__(self, brand, horsepower, color):\n self.brand = brand\n self.horsepower = horsepower\n self.color = color\n\n def get_brand(self):\n return self.brand\n\n def set_brand(self, brand):\n self.brand = brand\n\n def get_horsepower(self):\n return self.horsepower\n\n def set_horsepower(self, horsepower):\n self.horsepower = horsepower\n\n def get_color(self):\n return self.color\n\n def set_color(self, color):\n self.color = color\n```\n"
    },
    {
        "generated": "```python\ndef find_min_index(arr, num):\n    min_index = 0\n    for i in range(len(arr)):\n        if arr[i] == num:\n            min_index = i\n            break\n    return min_index\n\narr = [10, 20, 30, 40, 50]\nnum = 40\nprint(find_min_index(arr, num))\n```",
        "target": "```python\narr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)\n```\n"
    },
    {
        "generated": "```python\n# Student dictionary\nstudent_dict = {\n    \"John\": 85,\n    \"Alice\": 92,\n    \"Bob\": 78\n}\n```",
        "target": "```python\nstudent_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef average_of_two_numbers():\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n\n    avg = (num1 + num2) / 2\n    print(\"The average of\", num1, \"and\", num2, \"is\", avg)\n\naverage_of_two_numbers()\n```",
        "target": "```python\nx = [45, 65]\ntotal = 0\nfor i in range(len(x)):\n  total += x[i]\n  average = total / len(x)\n\nprint(\"Average of the numbers is:\", average)\n```\n"
    },
    {
        "generated": "```python\nfrom itertools import permutations\n\ndef get_permutations(s):\n    return [''.join(p) for p in permutations(s)]\n\n# Example usage:\nprint(get_permutations('abc'))\n```",
        "target": "```python\ndef find_permutations(s): \n\tres = [] \n\tfind_permutations_recur(s, \"\", res) \n\treturn res \n\ndef find_permutations_recur(str, prefix, res): \n\tn = len(str)\n\tif n == 0:\n\t\tres.append(prefix) \n\t\treturn\n\n\tfor i in range(n):\n\t\tremaining = str[0:i] + str[i+1:] \n\t\tfind_permutations_recur(remaining, prefix + str[i], res)\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci_series(n):\n    fib = [0, 1]\n    while True:\n        next_fib = fib[-1] + fib[-2]\n        if next_fib > n:\n            break\n        fib.append(next_fib)\n    return fib\n\nprint(fibonacci_series(100))\n```",
        "target": "```python\ndef Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)  \n\n# Driver Code\nprint(\"Fibonacci series:\") \nfor i in range(10): \n    print(Fibonacci(i), end=\" \")\n```\n"
    },
    {
        "generated": "```python\ndef reverse_array(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nreverse_array(arr)\nprint(arr)  # Output: [1, 2, 3, 4, 5]\n```",
        "target": "```python\ndef reverse_in_place(arr):\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr\n\narr = [1, 2, 3, 4]\nprint(reverse_in_place(arr))\n```\n"
    },
    {
        "generated": "```python\nfrom scipy.stats import fisher_snedecor\nimport numpy as np\n\ndef fisher_snedecor_distribution(**kwargs):\n    params = kwargs.get('params', {})\n    dist = fisher_snedecor.rvs(**params)\n    return dist\n\n# Example usage\nparams = {'loc': 0,'scale': 1}\ndist = fisher_snedecor_distribution(**params)\nprint(dist)\nprint(dist.cov())\nprint(dist.covariance())\nprint(dist.covariate('loc'))\nprint(dist.covariate('scale'))\n```",
        "target": "```python\n#! /usr/bin/env python\n\nfrom __future__ import print_function\nfrom openturns import *\nfrom cmath import *\n\nTESTPREAMBLE()\nRandomGenerator.SetSeed(0)\n\ntry:\n    # Instanciate one distribution object\n    distribution = FisherSnedecor(5.5, 10.5)\n    print(\"Distribution \", repr(distribution))\n    print(\"Distribution \", distribution)\n\n    # Is this distribution elliptical ?\n    print(\"Elliptical = \", distribution.isElliptical())\n\n    # Is this distribution continuous ?\n    print(\"Continuous = \", distribution.isContinuous())\n\n    # Test for realization of distribution\n    oneRealization = distribution.getRealization()\n    print(\"oneRealization=\", repr(oneRealization))\n\n    # Test for sampling\n    size = 10000\n    oneSample = distribution.getSample(size)\n    print(\"oneSample first=\", repr(\n        oneSample[0]), \" last=\", repr(oneSample[size - 1]))\n    print(\"mean=\", repr(oneSample.computeMean()))\n    print(\"covariance=\", repr(oneSample.computeCovariance()))\n\n    size = 100\n    for i in range(2):\n        msg = ''\n        if FittingTest.Kolmogorov(distribution.getSample(size), distribution).getBinaryQualityMeasure():\n            msg = \"accepted\"\n        else:\n            msg = \"rejected\"\n        print(\n            \"Kolmogorov test for the generator, sample size=\", size, \" is\", msg)\n        size *= 10\n\n    # Define a point\n    point = NumericalPoint(distribution.getDimension(), 1.0)\n    print(\"Point= \", repr(point))\n\n    # Show PDF and CDF of point\n    eps = 1e-5\n\n    # derivative of PDF with regards its arguments\n    DDF = distribution.computeDDF(point)\n    # print \"ddf     =\" , repr(DDF)\n    # by the finite difference technique\n    # print \"ddf (FD)=\" ,repr(NumericalPoint(1, (distribution.computePDF(\n    # point + NumericalPoint(1, eps) ) - distribution.computePDF( point  +\n    # NumericalPoint(1, -eps) )) / (2.0 * eps)))\n\n    # PDF value\n    LPDF = distribution.computeLogPDF(point)\n    print(\"log pdf=%.6f\" % LPDF)\n    PDF = distribution.computePDF(point)\n    print(\"pdf     =%.6f\" % PDF)\n    # by the finite difference technique from CDF\n    print(\"pdf (FD)=%.6f\" % ((distribution.computeCDF(point + NumericalPoint(1, eps)) -\n                              distribution.computeCDF(point + NumericalPoint(1, -eps))) / (2.0 * eps)))\n\n    # derivative of the PDF with regards the parameters of the distribution\n    CDF = distribution.computeCDF(point)\n    print(\"cdf=%.6f\" % CDF)\n    CCDF = distribution.computeComplementaryCDF(point)\n    print(\"ccdf=%.6f\" % CCDF)\n    CF = distribution.computeCharacteristicFunction(point[0])\n    print(\"characteristic function=(%.6f+%.6fj)\" % (CF.real, CF.imag))\n    ## PDFgr = distribution.computePDFGradient( point )\n    # print \"pdf gradient     =\" , repr(PDFgr)\n    # by the finite difference technique\n    ## PDFgrFD = NumericalPoint(2)\n    ## PDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computePDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computePDF(point)) / (2.0 * eps)\n    ## PDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computePDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computePDF(point)) / (2.0 * eps)\n    # print \"pdf gradient (FD)=\" , repr(PDFgrFD)\n\n    # derivative of the PDF with regards the parameters of the distribution\n    ## CDFgr = distribution.computeCDFGradient( point )\n    # print \"cdf gradient     =\" , repr(CDFgr)\n    ## CDFgrFD = NumericalPoint(2)\n    ## CDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computeCDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computeCDF(point)) / (2.0 * eps)\n    ## CDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computeCDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computeCDF(point)) / (2.0 * eps)\n    # print \"cdf gradient (FD)=\",  repr(CDFgrFD)\n\n    # quantile\n    quantile = distribution.computeQuantile(0.95)\n    print(\"quantile=\", repr(quantile))\n    print(\"cdf(quantile)=%.6f\" % distribution.computeCDF(quantile))\n    mean = distribution.getMean()\n    print(\"mean=\", repr(mean))\n    standardDeviation = distribution.getStandardDeviation()\n    print(\"standard deviation=\", repr(standardDeviation))\n    skewness = distribution.getSkewness()\n    print(\"skewness=\", repr(skewness))\n    kurtosis = distribution.getKurtosis()\n    print(\"kurtosis=\", repr(kurtosis))\n    covariance = distribution.getCovariance()\n    print(\"covariance=\", repr(covariance))\n    parameters = distribution.getParametersCollection()\n    print(\"parameters=\", repr(parameters))\n    for i in range(6):\n        print(\"standard moment n=\", i, \" value=\",\n              distribution.getStandardMoment(i))\n    print(\"Standard representative=\", distribution.getStandardRepresentative())\n\nexcept:\n    import sys\n    print(\"t_FisherSnedecor_std.py\", sys.exc_info()[0], sys.exc_info()[1])\n\n```\n"
    },
    {
        "generated": "```python\nfrom cryptography.fernet import Fernet\n\ndef encrypt_string(secret_key, input_string):\n    key = Fernet.generate_key(secret_key)\n    cipher = Fernet(key)\n    return cipher.encrypt(input_string.encode())\n\n# Example usage\nsecret_key = Fernet.generate_key()\ninput_string = \"Hello, World!\"\nencrypted_string = encrypt_string(secret_key, input_string)\nprint(f\"Encrypted string: {encrypted_string}\")\n```",
        "target": "```python\nimport base64\n\ndef encrypt(key, string):\n    enc = []\n    for i in range(len(string)):\n        key_c = key[i % len(key)]\n        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)\n        enc.append(enc_c)\n    return base64.urlsafe_b64encode(\"\".join(enc).encode()).decode()\n\nencrypted_string = encrypt(secret_key, string)\nprint(encrypted_string)\n```\n"
    },
    {
        "generated": "```python\ndef print_greatest(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        print(num1)\n    elif num2 > num1 and num2 > num3:\n        print(num2)\n    else:\n        print(num3)\n\nprint_greatest(10, 20, 30)\n```",
        "target": "```python\ndef get_max(x, y, z):\n    if (x > y) and (x > z):\n        maximum = x\n    elif (y > x) and (y > z):\n        maximum = y\n    else:\n        maximum = z\n\n    return maximum\n\nresult = get_max(2, 4, 3)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nimport heapq\nimport queue\n\nclass PriorityQueue:\n    def __init__(self):\n        self.queue = queue.PriorityQueue()\n\n    def add(self, item, priority):\n        self.queue.put((item, priority))\n\n    def remove(self):\n        return self.queue.get()\n\n    def peek(self):\n        return self.queue.get()\n\n    def is_empty(self):\n        return self.queue.empty()\n\n# Usage\npq = PriorityQueue()\npq.add('item1', 3)\npq.add('item2', 1)\npq.add('item3', 2)\nprint(pq.remove())  # prints item2\nprint(pq.peek())  # prints item1\nprint(pq.is_empty())  # prints False\n```",
        "target": "```python\nclass PriorityQueue(object):\n    def __init__(self):\n        self.queue = []\n\n    def __str__(self):\n        return ' '.join([str(i) for i in self.queue])\n\n    def is_empty(self):\n        return len(self.queue) == []\n    \n    def insert(self, data):\n        self.queue.append(data)\n    \n    def delete(self):\n        try:\n            max = 0\n            for i in range(len(self.queue)):\n                if self.queue[i] > self.queue[max]:\n                    max = i\n            item = self.queue[max]\n            del self.queue[max]\n            return item\n        except IndexError:\n            print()\n            exit()\n```\n"
    },
    {
        "generated": "```python\ndef is_armstrong(n):\n    return sum(int(i) ** 3 for i in str(n)) == n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_armstrong(num):\n        print(f\"{num} is an Armstrong number.\")\n    else:\n        print(f\"{num} is not an Armstrong number.\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\ndef is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** order\n        temp //= 10\n\n    if sum == num:\n        return True\n    else:\n        return False\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\n\ndef web_spider(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup\n\ndef main():\n    url = input(\"Enter the URL: \")\n    start_time = time.time()\n    soup = web_spider(url)\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time} seconds\")\n    print(soup.prettify())\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport requests\nimport re\n\nurl = \"https://www.example.com\"\nr  = requests.get(url)\ndata = r.text\n\n# Find all the links on the page\nlinks = re.findall(r'<a class=\"linkClass\" href=\"(.*?)\">', data)\n\n# Print the links\nfor link in links:\n    full_url = url + link\n    print(full_url)\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nimport statistics\n\ndef calculate_statistics(data):\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = statistics.mode(data)\n    \n    print(f\"Mean: {mean}\")\n    print(f\"Median: {median}\")\n    print(f\"Mode: {mode}\")\n\n# Example usage\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncalculate_statistics(data)\n```",
        "target": "```python\ndef calculate_mean_median_mode(arr):\n mean = 0\n sum = 0\n mode = None\n for i in range(len(arr)):\n sum += arr[i]\n mean = sum / len(arr)\n arr.sort()\n if len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n else:\n median = arr[int(len(arr) / 2)]\n count = 0\n max_count = 0\n for i in range(len(arr)):\n current_count = 0\n for j in range(len(arr)):\n if arr[i] == arr[j]:\n current_count += 1\n if current_count > max_count:\n max_count = current_count\n mode = arr[i]\n return [mean, median, mode]\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\n# Test the function\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))  # Output: [11, 12, 22, 25, 34, 64, 90]\n```",
        "target": "```python\ndef sort_list(arr):\n    # Insertion sort algorithm\n    for i in range(1, len(arr)):\n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n            arr[j+1] = arr[j] \n            j -= 1\n        arr[j+1] = key \n    return arr\n\nsorted_arr = sort_list([3, 9, 1, 4, 5])\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef remove_last_element(input_list):\n    if len(input_list) > 0:\n        input_list.pop()\n    return input_list\n```",
        "target": "```python\ndef remove_last_element(lst):\n    last_index = len(lst) - 1\n    del lst[last_index]\n\nexample_list = [3, 1, 5, 7, 4, 8, 2]\nremove_last_element(example_list)\nprint(example_list) \n# Output: [3, 1, 5, 7, 4, 8]\n```\n"
    },
    {
        "generated": "```python\ndef find_pairs(numbers, target):\n    pairs = set()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                pairs.add((numbers[i], numbers[j]))\n    return list(pairs)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 10\nprint(find_pairs(numbers, target))\n```",
        "target": "```python\ndef two_sum(arr, target):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == target):\n                result.append((arr[i], arr[j]))\n    return result\n\nresult = two_sum([8, 3, 10, 5], 13)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nfrom collections import Counter\nimport re\n\ndef find_most_frequent_chars(input_string):\n    # Remove non-alphanumeric characters\n    cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)\n\n    # Count character frequencies\n    freqs = Counter(cleaned_string)\n\n    # Find the most frequent characters\n    most_freq_chars = freqs.most_common(1)[0]\n\n    return most_freq_chars\n\n# Test the function\ninput_string = \"Hello, World! 123\"\nresult = find_most_frequent_chars(input_string)\nprint(result)\n```",
        "target": "```python\nstring = \"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\"\n\n# Create an empty dictionary  \nfreq = {} \n  \n# Loop through the string and populate the dictionary  \nfor i in string:\n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Get the most frequently occurring character \nmax_freq = 0\nfor key, value in freq.items(): \n    if value > max_freq: \n        max_freq = value \n        max_char = key\n\n# Print the most frequent character  \nprint(\"The most frequent character is '\" + max_char + \"' and it occurred \" + str(max_freq) + \" times.\")\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef reverse_list(input_list):\n    return input_list[::-1]\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5]\nprint(reverse_list(input_list))  # Output: [5, 4, 3, 2, 1]\n```",
        "target": "```python\nlst.reverse()\nprint(lst)  #output: [5,4,3,2,1]\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nsquares = [i**2 for i in range(1, 6)]\nprint(squares)\n```",
        "target": "```python\nlst=[x**2 for x in range(1,6)]\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef print_pascal_triangle(n):\n    for i in range(n):\n        for j in range(i + 1):\n            print(f\"({i + 1 - j}) * (1 + {j})\", end=' ')\n        print()\n\nprint_pascal_triangle(5)\n```",
        "target": "```python\ndef pascal_triangle(n): \n    # Two empty lists to store the previous and current row \n    prev_row = []     \n    curr_row = []     \n  \n    # Looping through the rows \n    for i in range(n): \n          \n        # Reseting the curr_row for each row \n        curr_row = [] \n          \n        # Looping through columns \n        for j in range(i + 1): \n              \n            # Handling edges of the pascal's triangle \n            if j == 0 or j == i:  \n                curr_row.append(1) \n            else: \n                curr_row.append(prev_row[j] + prev_row[j - 1])  \n          \n        # Printing the current row  \n        print(curr_row)  \n          \n        # Setting the current row as the previous row before moving to the next row. \n        prev_row = curr_row  \n        \n\n# call the pascal triangle function \nn = 5\npascal_triangle(n)\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_random_string(length=5):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n\nprint(generate_random_string())\n```",
        "target": "```python\nimport string\nimport random\n\ndef generate_random_string(length=5):\n  letters = string.ascii_letters + string.digits\n  return ''.join(random.choice(letters) for _ in range(length))\n```\n"
    },
    {
        "generated": "```python\ndef fulfill_criteria(instructions, additional_input=None):\n    for instruction in instructions:\n        if 'fulfill' in instruction:\n            if additional_input is not None:\n                instruction = instruction.replace('fulfill', f'fulfill {additional_input}')\n            print(instruction)\n        elif 'do' in instruction:\n            print(f\"Do {instruction.split('do')[1]}\")\n        elif 'not' in instruction:\n            print(f\"Not {instruction.split('not')[0]}\")\n        elif 'and' in instruction:\n            print(f\"And {instruction.split('and')[1]}\")\n        elif 'or' in instruction:\n            print(f\"Or {instruction.split('or')[1]}\")\n        elif 'not' in instruction:\n            print(f\"Not {instruction.split('not')[0]}\")\n        elif 'in' in instruction:\n            print(f\"In {instruction.split('in')[1]}\")\n        elif 'on' in instruction:\n            print(f\"On {instruction.split('on')[1]}\")\n        elif 'with' in instruction:\n            print(f\"With {instruction.split('with')[1]}\")\n        elif 'of' in instruction:\n            print(f\"Of {instruction.split('of')[1]}\")\n        elif 'of' in instruction:\n            print(f\"Of {instruction.split('of')[1]}\")\n        else:\n            print(instruction)\n\ninstructions = [\"fulfill hello world\", \"do hello world\", \"not hello world\", \"in hello world\", \"on hello world\", \"with hello world\", \"of hello world\"]\nadditional_input = \"world\"\nfulfill_criteria(instructions, additional_input)\n```",
        "target": "```python\ndef longest_increasing_subsequence(nums):\n    # Dynamic programming approach \n    # to maintain a list of increasing subsequences \n    # with their respective lengths \n    subseq_lengths = [1 for _ in range(len(nums))] \n      \n    # Traverse through pairs of numbers to find sequences \n    for i in range(1, len(nums)): \n        for j in range(0, i): \n            if nums[i] > nums[j] and subseq_lengths[i] < subseq_lengths[j] + 1: \n                subseq_lengths[i] = subseq_lengths[j]+1\n  \n    # Return the maximum length of increasing subsequence\n    return max(subseq_lengths)\n```\n"
    },
    {
        "generated": "```python\ndef flatten_2darray(arr):\n    return [item for sublist in arr for item in sublist]\n\n# Example usage:\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(flatten_2darray(arr))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```",
        "target": "```python\ndef flatten(arr):\n  flat_list = []\n  for sublist in arr:\n    for item in sublist:\n      flat_list.append(item)\n  return flat_list\n\nflatten(array)\n```\n"
    },
    {
        "generated": "```python\n# Number of days in a month\nmonth_days = {\n    'January': 31,\n    'February': 28,\n    'March': 31,\n    'April': 30,\n    'May': 31,\n    'June': 30,\n    'July': 31,\n    'August': 31,\n    'September': 30,\n    'October': 31,\n    'November': 30,\n    'December': 31\n}\n\n# Get the month from user\nmonth = input(\"Enter a month (1-12): \")\n\n# Check if the month is valid\nif int(month) not in range(1, 13):\n    print(\"Invalid month. Please enter a month between 1 and 12.\")\nelse:\n    # Print the number of days in the month\n    print(f\"The number of days in {month} is {month_days[month]}\")\n```",
        "target": "```python\ndef num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nfrom datetime import datetime\n\ndef print_date_time():\n    now = datetime.now()\n    print(f\"Current Date and Time: {now.strftime('%Y-%m-%d %H:%M:%S')}\")\n    return now.strftime('%Y-%m-%d %H:%M:%S')\n\nprint_date_time()\n```",
        "target": "```python\nimport datetime\n\nnow = datetime.datetime.now()\nprint(now)\n```\n"
    },
    {
        "generated": "```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\n# Example usage\nnumbers = [5, 2, 9, 4, 7, 1, 3, 6]\nsorted_numbers = quicksort(numbers)\nprint(sorted_numbers)\n```",
        "target": "```python\ndef quickSort(arr): \n\tif len(arr) <= 1:\n\treturn arr \n\telse: \n\t\tpivot = arr[0] \n\t\tlessThanPivot = [number for number in arr[1:] if number <= pivot] \n\t\tmoreThanPivot = [number for number in arr[1:] if number > pivot] \n\t\treturn quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n\narr = [3, 8, 6, 10, 11, 4] \nprint(quickSort(arr))\n```\n"
    },
    {
        "generated": "```python\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef analyze_sentiment(sentence):\n    sia = SentimentIntensityAnalyzer()\n    sentiment = sia.polarity_scores(sentence)\n    return sentiment['compound']\n\ndef main():\n    sentence = input(\"Enter a sentence: \")\n    print(analyze_sentiment(sentence))\n\nmain()\n```",
        "target": "```python\nimport textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\"\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport json\n\ndef load_data():\n    with open('data.json') as f:\n        return json.load(f)\n\ndef generate_response(data, context):\n    response = []\n    for item in data:\n        if item['type'] == 'greeting':\n            response.append(f'Hello, {item[\"name\"]}!')\n        elif item['type'] == 'goodbye':\n            response.append(f'Goodbye, {item[\"name\"]}!')\n        else:\n            response.append(item['message'])\n    return response\n\ndef chatbot():\n    data = load_data()\n    while True:\n        context = input('You: ')\n        response = generate_response(data, context)\n        print('Chatbot:'+''.join(response))\n        choice = input('Type \"quit\" to stop: ')\n        if choice.lower() == 'quit':\n            break\n\nchatbot()\n```",
        "target": "```python\nimport re #importing library for regular expressions\n\nuser_input = \"\" #Initializing user_input\n\nwhile user_input != \"exit\": \n    user_input = input(\"Type your message: \")\n    if re.search(\"hi|hello\", user_input): #Using regural expressions to make the chatbot response to greetings\n        print(\"Hello, I am a chatbot. How can I help you?\")\n    else:\n        print(\"Sorry, I don't understand.\")\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef square_number(num):\n    return num ** 2\n```",
        "target": "```python\ndef square(number):\n \u00a0 \u00a0return number * number\n```\n"
    },
    {
        "generated": "```python\nimport json\n\n# Given dictionary\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Convert dictionary to JSON string\njson_string = json.dumps(data, indent=4)\nprint(json_string)\n```",
        "target": "```python\n{\n    \"Name\": \"John\",\n    \"Age\": 30,\n    \"Cities\": [\"New York\", \"London\", \"Paris\"]\n}\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\ni = 0 \nwhile i < 3: \n    print(i) \n    i += 1\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\nprint(fibonacci(15))\n```",
        "target": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\nfibonacci(15)\n```\n"
    },
    {
        "generated": "```python\nclass NumSum:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def calculate(self):\n        return self.num1 + self.num2\n\n# Create an instance of the class\nnum1 = 5\nnum2 = 7\ninstance = NumSum(num1, num2)\nprint(instance.calculate())  # Outputs: 12\n```",
        "target": "```python\nclass Summation:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def get_sum(self):\n        return self.num1 + self.num2\n\ntotal = Summation(5, 10).get_sum()\nprint(total)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nmax_value = max(list(map(int, input(\"Enter a list of integers: \"))))  # input a list of integers\nprint(\"Maximum value:\", max_value)\n```",
        "target": "```python\nmax_value = 0\n\nfor value in [1,5,2,3,8,9]:\n    if value > max_value:\n    max_value = value\n\nprint(max_value) # Output: 9\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef sort_numbers(numbers):\n    return sorted(numbers)\n\nnumbers = [5, 2, 8, 1, 9]\nprint(sort_numbers(numbers))\n```",
        "target": "```python\ndef sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([2, 4, 5, 1, 3])\nprint(result)\n```\n"
    },
    {
        "generated": "```python\nclass Car:\n    def __init__(self, color, model, year):\n        self.color = color\n        self.model = model\n        self.year = year\n\n    def __str__(self):\n        return f\"Car(color='{self.color}', model='{self.model}', year={self.year})\"\n\n    def details(self):\n        return f\"Color: {self.color}\\nModel: {self.model}\\nYear: {self.year}\"\n\n    def drive(self):\n        return f\"The car is driving and has {self.year} miles\"\n\ncar1 = Car(\"Red\", \"Toyota Camry\", 2020)\nprint(car1)\nprint(car1.details())\nprint(car1.drive())\n```",
        "target": "```python\nclass Car:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n        \n    def get_make(self):\n        return self.make\n    \n    def get_model(self):\n        return self.model\n    \n    def get_year(self):\n        return self.year\n    \n    def get_color(self):\n        return self.color\n    \n    def get_mileage(self):\n        return self.mileage\n    \n    def set_mileage(self, new_mileage):\n        self.mileage = new_mileage\n```\n"
    },
    {
        "generated": "```python\ndef extract_words(word_list, target_letter):\n    return [word for word in word_list if word.lower().startswith(target_letter.lower())]\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\ntarget_letter = \"a\"\nprint(extract_words(word_list, target_letter))\n```",
        "target": "```python\n\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))\n```\n"
    },
    {
        "generated": "```python\n# Calculate the average age of a group of people\ndef calculate_average_age(num_people, ages):\n    return sum(ages) / num_people\n\n# Example usage\nnum_people = 10\nages = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\naverage_age = calculate_average_age(num_people, ages)\nprint(f\"The average age of the group is: {average_age}\")\n```",
        "target": "```python\ntotal_age = 0\n\nfor person in people:\n    total_age += int(person[1])\n\naverage_age = total_age / len(people)\n\nprint(f\"The average age of the group is {average_age}\")\n\n# Optimized version\n\ntotal_age = sum([int(person[1]) for person in people])\naverage_age = total_age / len(people)\n\nprint(f\"The average age of the group is {average_age}\")\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value)\n\n# Example usage:\nprint(generate_random_number(1, 100))  # Generate a random number between 1 and 100\n```",
        "target": "```python\nimport random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(intersection(list1, list2))\n```",
        "target": "```python\nlist1 = [2, 3, 4] \nlist2 = [3, 5, 6, 4]\n\n# create a set of elements in list1\ns1 = set(list1)\n\n# create a set of elements in list2\ns2 = set(list2)\n\n# find the intersection \nintersection = s1.intersection(s2)\n\n# print the intersection \nprint(intersection) \n# prints {3, 4}\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nd = {}\nfor i in range(1, 11):\n    d[i] = f\"Key {i} - Value {i}\"\nprint(d)\n```",
        "target": "```python\nmy_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six',\n           7:'seven', 8:'eight', 9:'nine', 10:'ten'}\n\nfor key, value in my_dict.items():\n   print(key, '->', value)\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ndef replace_words(sentence):\n    words = re.findall(r'\\b\\w+\\b', sentence)\n    for word in words:\n        sentence = sentence.replace(word, word[0])\n    return sentence\n\nprint(replace_words(\"The quick brown fox jumped over the lazy dog.\"))\n```",
        "target": "```python\ndef replace_with_first_letter(sentence):\n    words = sentence.split()\n    result = [word[0] for word in words]\n    return ''.join(result)\n\nprint(replace_with_first_letter(\"Hello World\")) # Output: HW\n```\n"
    },
    {
        "generated": "```python\nimport collections\nimport re\n\ndef generate_word_dict(sentence):\n    # Remove punctuation and convert to lowercase\n    sentence = re.sub(r'[^\\w\\s]', '', sentence).lower()\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Count the frequency of each word\n    word_freq = collections.Counter(words)\n    \n    # Get the most frequently used words\n    word_dict = {word: freq for word, freq in word_freq.items() if freq > 1}\n    \n    return word_dict\n\n# Example usage:\nsentence = \"This is a test sentence. It is a sentence with multiple words.\"\nprint(generate_word_dict(sentence))\n```",
        "target": "```python\nfreq_words_dict = {\n    'python': 2,\n    'is': 1,\n    'an': 1,\n    'interpreted': 1,\n    'high-level': 1,\n    'general-purpose': 1,\n    'programming': 1,\n    'language': 1\n}\n```\n"
    },
    {
        "generated": "```python\ndef get_permutations(s):\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            remaining = s[:i] + s[i+1:]\n            get_permutations(remaining)\n\n# Test the function\nget_permutations('abc')\n```",
        "target": "```python\ndef permutations(string): \n    if string == \"\": \n        return [''] \n          \n    prev_list = permutations(string[1:]) \n    next_list = [] \n    char = string[0] \n    for word in prev_list: \n        for j in range(len(word) + 1): \n            next_list.append(word[:j] + char + word[j:]) \n    return next_list \n\nstring = \"abc\"\nperm_list = permutations(string) \nprint (perm_list)\n```\n"
    },
    {
        "generated": "```python\nimport spacy\nimport nltk\nnlp = spacy.load(\"en_core_web_sm\")\nnltk.download('punkt')\n\ndef search_engine(query):\n    doc = nlp(query)\n    top_results = []\n    for sentence in doc.sents:\n        scores = [sentence.score for sentence in doc.sents]\n        top_results.extend([sentence.text, score] for score in scores if score > 0.2)\n    return top_results\n\n# Example usage:\nquery = \"Python programming language\"\nprint(search_engine(query))\n```",
        "target": "```python\nimport json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http://search-engine.com/api/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming')\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\nlist_x = [1, 1, 2, 3, 4, 5, 5]\nunique_elements = set(list_x)\nprint(unique_elements) #output: {1, 2, 3, 4, 5}\n```\n"
    },
    {
        "generated": "```python\n# Read data from user\ndata = input(\"Enter a data set: \")\n\n# Extract values from data\nvalues = [float(x) for x in data.split()]\n\n# Sort values in descending order\nsorted_values = sorted(values, reverse=True)\n\n# Print top-5 highest values\nprint(sorted_values[:5])  # prints the top 5 highest values\n```",
        "target": "```python\ndata = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]\n\ndef get_top_five_values(data):\n    sorted_data = sorted(data, reverse=True)\n    top_five_values = sorted_data[:5]\n    return top_five_values\n\ntop_five_values = get_top_five_values(data)\nprint(top_five_values)\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_rmse(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    sum_squared_diff = 0\n    for num1, num2 in zip(list1, list2):\n        sum_squared_diff += (num1 - num2) ** 2\n    \n    return math.sqrt(sum_squared_diff / len(list1))\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1.1, 2.2, 3.3, 4.4, 5.5]\nprint(calculate_rmse(list1, list2))  # Output: 1.148\n```",
        "target": "```python\ndef rmse(A, B):\n   \"\"\" \n   Calculates the root mean square error between two given lists of numbers. \n   \"\"\"\n   RMSE = 0\n   for i,j in zip(A,B):\n       RMSE += (i-j)**2\n   return (RMSE/len(A))**(1/2)\n\n\nif __name__ == '__main__':\n   A = [2.2, 3.07, 3.68, 1.33] \n   B = [1.17, 2.47, 2.57, 0.0]\n   print(rmse(A, B))\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef kmeans_clustering(data, k):\n    # Initialize centroids randomly\n    centroids = np.random.rand(k, data.shape[1])\n    centroids = centroids / centroids.sum(axis=1, keepdims=True)\n\n    # Assign each data point to the closest centroid\n    assignments = np.zeros((data.shape[0],))\n    for i, data_point in enumerate(data):\n        dist = np.linalg.norm(data_point - centroids, axis=1)\n        idx = np.argmin(dist)\n        assignments[i] = idx\n\n    # Update centroids\n    for i in range(k):\n        points = data[assignments == i]\n        mean = np.mean(points, axis=0)\n        centroids[i] = mean\n\n    return centroids, assignments\n\n# Example usage:\ndata = np.random.rand(100, 2)\ncentroids, assignments = kmeans_clustering(data, 3)\nplt.scatter(data[:, 0], data[:, 1], c=assignments)\nplt.scatter(centroids[:, 0], centroids[:, 1], color='red', marker='*')\nplt.show()\n```",
        "target": "```python\n# Import KMeans\nfrom sklearn.cluster import KMeans\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=3, random_state=0)\n\n# Train the model\nkmeans.fit(X)\n\n# Get the labels\nlabels = kmeans.labels_\n\n# Get the cluster centroids\ncentroids = kmeans.cluster_centers_\n```\n"
    },
    {
        "generated": "```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\ndef contains(node, value):\n    current = node\n    while current:\n        if current.value == value:\n            return True\n        current = current.next\n    return False\n\n# Test the function\nnode = Node(1)\nnode.next = Node(2)\nnode.next.next = Node(3)\nprint(contains(node, 2))  # True\nprint(contains(node, 4))  # False\n```",
        "target": "```python\ndef contains(head, value):\n current = head\n while current is not None:\n if current.data == value:\n return True\n current = current.next\n return False\n\nhead = Node(4)\nhead.next = Node(8)\nhead.next.next = Node(15)\nhead.next.next.next = Node(16)\nhead.next.next.next.next = Node(23)\nhead.next.next.next.next.next = Node(42) \n\nval = 15\n\nprint(contains(head, val))\n# Output : True\n```\n"
    },
    {
        "generated": "```python\nimport random\nfrom tabulate import tabulate\n\n# Set the number of rows and columns\nrows = 3\ncols = 2\n\n# Generate random data\ndata = [[random.randint(1, 100) for _ in range(cols)] for _ in range(rows)]\n\n# Create the HTML table\ntable = tabulate(data, tablefmt=\"plain\")\n\n# Print the HTML table\nprint(table)\n```",
        "target": "```python\nimport random\n\nHTML = '<html>\\n<head>\\n<title>Random Table</title>\\n</head>\\n<body>\\n<table>\\n'\n\nfor row_num in range(0,3):\n    HTML += ' <tr>\\n'\n    for column_num in range(0,2):\n        HTML += '  <td>{}</td>\\n'.format(random.randint(0, 10))\n    HTML += ' </tr>\\n'\n\nHTML += '</table>\\n</body>\\n</html>'\n\nprint(HTML)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef fibonacci(n):\n    if n <= 0:\n        return \"Input should be positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function\nprint(fibonacci(10))\n```",
        "target": "```python\ndef fibonacci_series(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci_series(n-1)+fibonacci_series(n-2) \n\nprint(fibonacci_series(10))\n```\n"
    },
    {
        "generated": "```python\ndef caesar_cipher_encode(input_str, shift):\n    encoded_str = \"\"\n    for char in input_str:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            encoded_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            encoded_str += encoded_char\n        else:\n            encoded_str += char\n    return encoded_str\n```",
        "target": "```python\ndef caesar_cipher(input_string, shift):\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    output_string = ''\n\n    for char in input_string:\n        if char in alphabet:\n            char_index = alphabet.find(char)\n            new_char_index = char_index + shift\n            output_string += alphabet[new_char_index % len(alphabet)]\n        else:\n            output_string += char\n\n    return output_string\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef create_random_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\nprint(create_random_password(10))\n```",
        "target": "```python\nimport random\nimport string\n\ndef generate_pass(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\npassword = generate_pass()\nprint(password)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_reviews(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    reviews = soup.find_all('div', {'class':'review'})\n    for review in reviews:\n        review_text = review.get_text()\n        print(review_text)\n\nscrape_reviews('https://www.example.com/reviews')\n```",
        "target": "```python\n\"\"\"\nScrape the text content from all reviews on a web page \n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_reviews(url):\n    html = requests.get(url).text\n    soup = BeautifulSoup(html, 'lxml')\n    reviews = soup.find_all('div', class_='review')\n    for review in reviews:\n        text = review.find('p').string\n        author = review.find('h4').string\n        print(text, author)\n\nif __name__ == '__main__':\n    fetch_reviews('example.com/reviews')\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport operator\nimport numpy as np\n\n# Genetic Algorithm parameters\npopulation_size = 100\ngenerations = 100\nmutation_rate = 0.1\nmutation_step_size = 0.1\ncrossover_probability = 0.5\n\n# Fitness function\ndef fitness(individual):\n    return sum(individual[i] for i in range(len(individual))) / len(individual)\n\n# Genetic Algorithm class\nclass GeneticAlgorithm:\n    def __init__(self, population_size, generations, mutation_rate, mutation_step_size, crossover_probability):\n        self.population_size = population_size\n        self.generations = generations\n        self.mutation_rate = mutation_rate\n        self.mutation_step_size = mutation_step_size\n        self.crossover_probability = crossover_probability\n\n    def generate_individual(self):\n        return [random.uniform(0, 1) for _ in range(len(self.population_size))]\n\n    def selection(self):\n        return random.choices([True, False], p=self.crossover_probability)\n\n    def crossover(self, parent1, parent2):\n        return [x * y for x, y in zip(parent1, parent2)]\n\n    def mutation(self, individual):\n        for i in range(len(individual)):\n            if random.random() < self.mutation_rate:\n                individual[i] *= self.mutation_step_size\n        return individual\n\n    def next_generation(self, previous_generation):\n        new_generation = self.generate_individual()\n        for individual in new_generation:\n            individual = self.mutation(individual)\n        return new_generation\n\n    def run(self):\n        previous_generation = self.generate_individual()\n        for _ in range(self.generations):\n            selection = self.selection()\n            crossover = self.crossover(previous_generation, selection)\n            new_generation = self.next_generation(previous_generation)\n            previous_generation = new_generation\n        return previous_generation\n\n# Genetic Algorithm\nga = GeneticAlgorithm(population_size, generations, mutation_rate, mutation_step_size, crossover_probability)\n\n# Optimization task\noptimization_task = lambda x: x\nresult = ga.run(optimization_task)\nprint(result)\n```",
        "target": "```python\nimport random\nimport numpy as np\n\n# Define the cost function\ndef cost(x):\n return x**2\n \n# Initialize the population\npopulation_size = 20\npopulation = [random.randint(0, 100) for _ in range(population_size)]\n\n# Perform the optimization\nmax_generation = 100\nfor _ in range(max_generation):\n # Calculate the fitness\n fitness = [cost(x) for x in population]\n \n # Select the fittest individuals\n fittest_individuals = np.argsort(fitness)[::-1][:int(population_size/2)]\n \n # Generate the new population\n new_population = []\n for individual in fittest_individuals:\n  new_population.append(population[individual])\n  new_population.append(population[individual] + random.randint(-5, 5))\n population = new_population\n \n# Print the result\nprint(population)\n```\n"
    },
    {
        "generated": "```python\ndef has_unique_chars(s):\n    return len(s) == len(set(s))\n\n# Test the function\nprint(has_unique_chars('abcde'))  # True\nprint(has_unique_chars('abcdea'))  # False\n```",
        "target": "```python\ndef check_unique(s):\n    seen=set()\n    for c in s:\n        if c in seen:\n            return False\n        else:\n            seen.add(c)\n    return True\n```\n"
    },
    {
        "generated": "```python\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\nprint(fibonacci(10))\n```",
        "target": "```python\ndef generate_fibonacci_sequence(N):\n    '''\n    This program takes in an integer N and returns the first N elements of the Fibonacci sequence\n    '''\n    \n    fibonacci_sequence = []\n    \n    if N < 1:\n        return fibonacci_sequence\n    elif N == 1:\n        fibonacci_sequence = [1]\n        return fibonacci_sequence\n    else:\n        fibonacci_sequence = [1,1]\n        for i in range(2,N):\n            fibonacci_sequence.append(fibonacci_sequence[i-2]+fibonacci_sequence[i-1]) \n            \n    return fibonacci_sequence\n \nprint(generate_fibonacci_sequence(10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Database\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:///records.db'\n\n# Create a table\n@app.route('/create', methods=['POST'])\ndef create():\n    data = request.json\n    if 'name' in data:\n        app.db.session.add(data['name'])\n        app.db.session.commit()\n    else:\n        return jsonify({'error': 'Name is required'}), 400\n    return jsonify({'message': 'Created successfully'}), 201\n\n# Read\n@app.route('/read', methods=['GET'])\ndef read():\n    return jsonify({'records': app.db.session.query(Data).all()}), 200\n\n# Update\n@app.route('/update', methods=['POST'])\ndef update():\n    data = request.json\n    if 'name' in data:\n        app.db.session.add(data['name'])\n        app.db.session.commit()\n    else:\n        return jsonify({'error': 'Name is required'}), 400\n    return jsonify({'message': 'Updated successfully'}), 200\n\n# Delete\n@app.route('/delete', methods=['POST'])\ndef delete():\n    data = request.json\n    if 'name' in data:\n        app.db.session.add(data['name'])\n        app.db.session.commit()\n    else:\n        return jsonify({'error': 'Name is required'}), 400\n    return jsonify({'message': 'Deleted successfully'}), 200\n\n# Create a table\n@app.route('/records', methods=['GET'])\ndef get_records():\n    return jsonify({'records': app.db.session.query(Data).all()}), 200\n\n# Create a table\n@app.route('/name', methods=['POST'])\ndef create_name():\n    data = request.json\n    if 'name' in data:\n        app.db.session.add(Data(name=data['name']))\n        app.db.session.commit()\n    else:\n        return jsonify({'error': 'Name is required'}), 400\n    return jsonify({'message': 'Created successfully'}), 201\n\n# Create a table\n@app.route('/name/<name>', methods=['GET'])\ndef get_name(name):\n    return jsonify({'name': name}), 200\n\n# Create a table\n@app.route('/name/<name>', methods=['PUT'])\ndef update_name(name):\n    data = request.json\n    if 'name' in data:\n        app.db.session.add(Data(name=data['name']))\n        app.db.session.commit()\n    else:\n        return jsonify({'error': 'Name is required'}), 400\n    return jsonify({'message': 'Updated successfully'}), 200\n\n# Create a table\n@app.route('/name/<name>', methods=['DELETE'])\ndef delete_name(name):\n    data = request.json\n    if 'name' in data:\n        app.db.session.add(Data(name=data['name']))\n        app.db.session.commit()\n    else:\n        return jsonify({'error': 'Name is required'}), 400\n    return jsonify({'message': 'Deleted successfully'}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\n\n# Connect to the database\napp.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI'\ndb = SQLAlchemy(app)\n\n# Create a model class for table row\nclass TableRow(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(50), nullable=False)\n  description = db.Column(db.String(50), nullable=False)\n\n# Create a REST API using Flask-RESTful\napi = Api(app)\n\n# Create the API's endpoints\nclass CreateRecord(Resource):\n  def post(self):\n    # Get the request body\n    json_data = request.get_json()\n    # Create a new record\n    new_record = TableRow(name=json_data['name'], description=json_data['description'])\n    db.session.add(new_record)\n    db.session.commit()\n    return {'status': 'success'}, 201\n\nclass ReadRecord(Resource):\n  def get(self, id):\n    # Get a record by id\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        return {'name': record.name, 'description': record.description}, 200\n    return {'status': 'not found'}, 404\n\nclass UpdateRecord(Resource):\n  def put(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Get the request body\n        json_data = request.get_json()\n        # Update the record\n        record.name = json_data['name']\n        record.description = json_data['description']\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\nclass DeleteRecord(Resource):\n  def delete(self, id):\n    # Get the record\n    record = TableRow.query.filter_by(id=id).first()\n    # Check if record exists\n    if record:\n        # Delete the record\n        db.session.delete(record)\n        db.session.commit()\n        return {'status': 'success'}, 200\n    return {'status': 'not found'}, 404\n\n# Add the API's endpoints to the API\napi.add_resource(CreateRecord, '/create')\napi.add_resource(ReadRecord, '/read/<int:id>')\napi.add_resource(UpdateRecord, '/update/<int:id>')\napi.add_resource(DeleteRecord, '/delete/<int:id>')\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\nimport tkinter as tk\nfrom tkinter import messagebox\nimport sqlite3\n\ndef create_database():\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS users\n        (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT)\n    ''')\n    conn.commit()\n    conn.close()\n\ndef create_form():\n    root = tk.Tk()\n    root.title(\"User Input Form\")\n    tk.Label(root, text=\"Username:\").pack()\n    tk.Entry(root).pack()\n    tk.Label(root, text=\"Password:\").pack()\n    tk.Entry(root, show=\"*\").pack()\n    tk.Button(root, text=\"Submit\", command=lambda: submit_form(root)).pack()\n    root.mainloop()\n\ndef submit_form(root):\n    username = root.get(\"Username:\").strip()\n    password = root.get(\"Password:\").strip()\n    if username and password:\n        conn = sqlite3.connect('database.db')\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM users WHERE username =?\", (username,))\n        if cursor.fetchone():\n            messagebox.showerror(\"Error\", \"User already exists\")\n        else:\n            conn.close()\n            messagebox.showinfo(\"Success\", \"User created successfully\")\n    else:\n        messagebox.showerror(\"Error\", \"Please fill in both fields\")\n\ncreate_database()\ncreate_form()\n```",
        "target": "```python\n# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef randomize_array(n, size):\n    arr = [0] * size\n    random.shuffle(arr)\n    return arr\n\n# Example usage\nn = 5\nsize = 10\nprint(randomize_array(n, size))\n```",
        "target": "```python\nimport random\n \ndef randomize(arr, n): \n \n    # Start from the last element and \n    # swap one by one. We don't need to \n    # run for the first element \n    # that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index \n        j = random.randint(0,i+1) \n  \n        # Swap arr[i] with the element \n        # at random index \n        arr[i],arr[j] = arr[j],arr[i] \n    return arr\n```\n"
    },
    {
        "generated": "```python\ndef reverse_list(input_list):\n    output_list = []\n    for element in input_list:\n        output_list.append(element)\n    return output_list[::-1]\n\n# Test the function\ninput_list = [1, 2, 3, 4, 5]\nprint(reverse_list(input_list))\n```",
        "target": "```python\ndef reverse_list_without_function(list_):\n    result = []\n    for i in range(len(list_)-1,-1,-1):\n        result.append(list_[i])\n    return result\n\nlist_ = [1,2,3,4]\nprint(reverse_list_without_function(list_)) # => [4, 3, 2, 1]\n```\n"
    },
    {
        "generated": "```python\ndef calculate_average(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)\n```",
        "target": "```python\ndef calculateAverage(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)\n\nnumbers = [5, 10, 15, 20]\n\nprint(calculateAverage(numbers)) // 12.5\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\n\n# Get today's date\ntoday = np.datetime64('today')\n\n# Calculate dates 50 days from today\ndates = today + np.timedelta64(50, 'D')\n\n# Convert dates to numpy array\ndates_array = np.array(dates)\n\nprint(dates_array)\n```",
        "target": "```python\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# define start (today) and end (50 days from today) date\nstart_date = datetime.today()\nend_date = start_date + timedelta(days=50)\n\n# generate numpy array of dates between the dates defined above\ndates = np.arange(start_date, end_date).astype('datetime64[D]')\nprint(dates)\n# Output:\narray(['2021-05-17', '2021-05-18', '2021-05-19', '2021-05-20', '2021-05-21',\n       '2021-05-22', '2021-05-23', '2021-05-24', '2021-05-25', '2021-05-26',\n       '2021-05-27', '2021-05-28', '2021-05-29', '2021-05-30', '2021-05-31',\n       '2021-06-01', '2021-06-02', '2021-06-03', '2021-06-04', '2021-06-05',\n       '2021-06-06', '2021-06-07', '2021-06-08', '2021-06-09', '2021-06-10',\n       '2021-06-11', '2021-06-12', '2021-06-13', '2021-06-14', '2021-06-15',\n       '2021-06-16', '2021-06-17', '2021-06-18', '2021-06-19', '2021-06-20',\n       '2021-06-21', '2021-06-22', '2021-06-23', '2021-06-24', '2021-06-25',\n       '2021-06-26', '2021-06-27', '2021-06-28', '2021-06-29', '2021-06-30',\n       '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04', '2021-07-05',\n       '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10'],\n      dtype='datetime64[D]')\n```\n"
    },
    {
        "generated": "```python\ndef make_string_lowercase(input_string):\n    return input_string.lower()\n\ninput_string = \"Can you make the following string lowercase using Python?\"\nprint(make_string_lowercase(input_string))\n```",
        "target": "```python\n\"\"\"\nMake the given string lowercase using Python\n\"\"\"\n\ntest_string = \"This is a TEST string!\"\n\nlowercase_string = test_string.lower()\n\nprint(lowercase_string) # prints \"this is a test string!\"\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\n# Function to remove vowels\ndef removeVowels(str):\n  vowels = ('a', 'e', 'i', 'o', 'u')\n  for x in str.lower():\n    if x in vowels:\n      str = str.replace(x,\"\")\n  print(str)  \n\n# Driver program\nstr = \"Hello\"\nremoveVowels(str)\n\n# Output:\nHll\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef get_divisors(num):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    divisors = get_divisors(num)\n    print(\"Divisors of {} are:\".format(num), divisors)\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\ndivisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nwords = input(\"Enter a list of words (comma separated): \").split(',')\nif len(words) > 0:\n    poem =''.join(words)\n    print(poem)\nelse:\n    print(\"Please enter a list of words.\")\n```",
        "target": "```python\ndef create_poem(words):\n    poem = \"\"\n    for word in words:\n        poem += word + \"\\n\"\n\n    poem += \"\\nSleep, dream and beauty\\nReality shatters in life\\nWhere dreams forevermore dwell\"\n    return poem\n\nprint(create_poem([\"Sleep\", \"Dream\", \"Reality\", \"Beauty\", \"Life\"]))\n```\n"
    },
    {
        "generated": "```python\nclass Validator:\n    def __init__(self):\n        pass\n\n    def validate_input(self, input_type):\n        if not isinstance(input_type, type):\n            raise ValueError(\"Input type must be a type\")\n        if not input_type.__origin__ == type:\n            raise ValueError(\"Input type must be a subclass of type\")\n\n    def validate_input_value(self, value):\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Input must be a number\")\n\n    def validate_input_list(self, values):\n        if not isinstance(values, list):\n            raise ValueError(\"Input must be a list\")\n        for value in values:\n            if not isinstance(value, (int, float)):\n                raise ValueError(\"Input values must be numbers\")\n\n# Usage\nvalidator = Validator()\nvalidator.validate_input(1)  # int\nvalidator.validate_input(\"1\")  # str\nvalidator.validate_input(1.0)  # float\nvalidator.validate_input_list([1, 2, 3])  # list\n```",
        "target": "```python\nclass InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True\n```\n"
    },
    {
        "generated": "```python\ndef min_coins(amount):\n    coins = [float('inf')] * 10000\n    coins[0] = 0\n    for denomination in range(1, 10000):\n        for i in range(denomination, 10000):\n            if i - denomination < 0:\n                break\n            coins[i] = min(coins[i], coins[i - denomination] + 1)\n    return coins[amount]\n\nprint(min_coins(100))  # Example usage\n```",
        "target": "```python\ndef minimum_coins_needed(amount):\n    denominations = [1, 2, 5, 10]\n    result = [0 for _ in range(amount+1)]\n \n    # Compute the result for amount = 0\n    result[0] = 0 \n    \n    # Iterate over all amount from 1 to desired\n    for i in range(1, amount+1): \n        # Initialize an inner loop to maximum value (amount)\n        temp_min = float('Inf')\n        for j in range(0, len(denominations)): \n            # Check if coins are less than amount\n            if denominations[j] <= i:\n                temp_min = min(temp_min, result[i-denominations[j]])\n        # Store the final result in amount's index\n        result[i] = temp_min + 1\n        \n    return result[amount]\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef find_largest_number(array):\n    return max(array)\n\n# Example usage:\nnumbers = [10, 20, 30, 40, 50]\nprint(find_largest_number(numbers))  # Output: 50\n```",
        "target": "```python\narr = [1, 10, 5, 6, 9, 8, 20]\n\ndef largest_number(arr):\n  largest = arr[0]\n  for num in arr:\n    if num > largest:\n      largest = num\n\n  return largest\n\nlargest = largest_number(arr)\nprint(largest) # 20\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_articles(url):\n    try:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        article_titles = [soup.title.text]\n        article_authors = [soup.author.text]\n        article_contents = [soup.p.text for soup in soup.find_all('p')]\n\n        return {\n            'title': article_titles[0],\n            'author': article_authors[0],\n            'content': article_contents[0]\n        }\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\nurl = \"https://www.example.com\"\narticles = scrape_articles(url)\nif articles:\n    print(\"Title:\", articles['title'])\n    print(\"Author:\", articles['author'])\n    print(\"Content:\", articles['content'])\n```",
        "target": "```python\nimport requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content)\n```\n"
    },
    {
        "generated": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_url(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.content, 'html.parser')\n        return soup\n    except requests.exceptions.RequestException as err:\n        print(f\"Error: {err}\")\n        return None\n\ndef main():\n    url = input(\"Enter the URL: \")\n    if url:\n        soup = scrape_url(url)\n        if soup:\n            print(soup.prettify())\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport urllib.request\n\nurl = \"https://www.example.com/\"\n\nresponse = urllib.request.urlopen(url) \nwebContent = response.read()\n\nf = open(\"example.html\", \"w\")\nf.write(webContent.decode('utf-8'))\nf.close()\n```\n"
    },
    {
        "generated": "```python\ndef compare_integers(a, b):\n    return a == b\n```",
        "target": "```python\ndef compare_ints(num1, num2):\n  if num1 > num2:\n    return \"Integer1 is greater than Integer2\"\n  elif num1 < num2:\n    return \"Integer1 is lesser than Integer2\"\n  else:\n    return \"The integers are equal\"\n\nresult = compare_ints(6, 4)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef largest_number(lst):\n    return max(lst, key=int)\n\n# Example usage:\nnumbers = [5, 2, 9, 1, 7]\nprint(largest_number(numbers))  # Output: 9\n```",
        "target": "```python\nmax_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nimport math\ndef max_of_three_numbers(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n\n# Create a Lambda function\ndef create_lambdafunc():\n    return max_of_three_numbers\n\n# Create a Lambda function\ncreate_lambda_func = create_lambdafunc()\nlambda_function = create_lambda_func()\n\n# Test the Lambda function\nprint(lambda_function(1, 2, 3))  # Output: 3\n```",
        "target": "```python\nmax_func = lambda a, b, c : max(a,b,c)\nprint(max_func(3, 12, 7))\n```\n"
    },
    {
        "generated": "```python\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        if not self.items:\n            return None\n        return self.items.pop(0)\n\n    def is_empty(self):\n        return not self.items\n\n    def size(self):\n        return len(self.items)\n\n# Your code here\nq = Queue()\nq.enqueue(\"A\")\nq.enqueue(\"B\")\nq.enqueue(\"C\")\nprint(q.dequeue())  # prints \"B\"\nprint(q.is_empty())  # prints \"False\"\nprint(q.size())  # prints \"1\"\n```",
        "target": "```python\nclass Queue(): \n  \n    def __init__(self): \n        self.items = [] \n  \n    def isEmpty(self): \n        return self.items == []  \n  \n    def enqueue(self, item): \n        self.items.insert(0, item)\n        \n    def dequeue(self):\n        return self.items.pop() \n  \n    def size(self): \n        return len(self.items)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef sum_two_numbers(a, b):\n    return a + b\n```",
        "target": "```python\ndef sum_of_numbers(num1, num2):\n    return num1 + num2\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\npublic class RemoveWhitespace { \n\n    public static String removeWhitespace(String str) \n    { \n        str = str.replaceAll(\"\\\\s\", \"\"); \n        return str; \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Python Programming\"; \n        System.out.println(removeWhitespace(str)); \n    } \n}\n```\n"
    },
    {
        "generated": "```python\n# Base64 encoding program\nimport base64\n\ndef encode_string_to_base64(input_string):\n    encoded_string = base64.b64encode(input_string.encode('utf-8')).decode('utf-8')\n    return encoded_string\n\ninput_string = input(\"Enter a string: \")\nprint(encode_string_to_base64(input_string))\n```",
        "target": "```python\nimport base64\n\ndef encode_string(string):\n    # Encode the bytes of the given string\n    encoded_bytes = base64.b64encode(string.encode(\"utf-8\"))\n\n    # Get the string representation of the encoded bytes\n    encoded_string = str(encoded_bytes, \"utf-8\")\n\n    return encoded_string\n```\n"
    },
    {
        "generated": "```python\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\n# Example usage:\nv1 = Vector(1, 2)\nv2 = Vector(3, 4)\n\nv3 = v1 + v2\nv4 = v1 - v2\n\nprint(v3)  # Output: Vector(4, 0)\nprint(v4)  # Output: Vector(-2, -2)\n```",
        "target": "```python\nclass Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def add(self, other):\n    self.x += other.x\n    self.y += other.y\n\n  def subtract(self, other):\n    self.x -= other.x\n    self.y -= other.y\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\ndictionary = {\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'ten': 10\n}\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\ndef generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)\n```\n"
    },
    {
        "generated": "```python\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    name = request.form.get('name')\n    email = request.form.get('email')\n    return f'Name: {name}, Email: {email}'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```",
        "target": "```python\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request\n\n@app.route('/')\ndef form():\n    return render_template('form.html')\n\n@app.route('/', methods=['POST']\ndef save_data():\n   name = request.form['name']\n   age = request.form['age']\n   # Save user data to database \n   return render_template('success.html')\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\ndef sum_of_squares(myList):\n    result = 0\n    for num in myList:\n        result += num**2\n    return result\n\ntotal = sum_of_squares(myList)\nprint(\"Sum of Squares:\", total)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef delete_element(lst, element):\n    lst.remove(element)\n    return lst\n\n# Example usage\nprint(delete_element([1, 2, 3, 4, 5], 3))  # Output: [1, 2, 4, 5]\n```",
        "target": "```python\ndef delete_element(numbers, element):\n result = []\n for x in numbers:\n if x != element:\n result.append(x)\n return result\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\n\n# Load dataset\ndf = pd.read_csv('data.csv')\n\n# Preprocess data\nX = df.drop('label', axis=1)\ny = df['label']\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict spam and not spam\nspam_count = len(X_test[X_test['label'] == 1].reset_index().rename(columns={'label':'spam'}).drop('label', axis=1).values)\nnot_spam_count = len(X_test[X_test['label'] == 0].reset_index().rename(columns={'label': 'not spam'}).drop('label', axis=1).values)\n\n# Train classifier\nX_train_spam = X_train[X_train['label'] == 1].reset_index().rename(columns={'label':'spam'})\nX_train_not_spam = X_train[X_train['label'] == 0].reset_index().rename(columns={'label': 'not spam'})\nX_train = pd.concat([X_train_spam, X_train_not_spam], axis=0)\nX_train = X_train.drop('label', axis=1)\n\nmodel.fit(X_train, spam_count)\n\n# Predict spam and not spam\nspam_pred = model.predict(X_test)\nnot_spam_pred = model.predict(X_test)\n\n# Evaluate model\naccuracy = accuracy_score(y_test, spam_pred)\nprint(f'Accuracy: {accuracy:.2f}')\n\n# Use the model to predict spam and not spam\ndef predict_spam(doc):\n    return model.predict(pd.DataFrame({'text': [doc]}))[0]\n\ndef predict_not_spam(doc):\n    return model.predict(pd.DataFrame({'text': [doc]}))[1]\n```",
        "target": "```python\n# Importing the libraries\nimport numpy as np\nimport pandas as pd\n\n# Import the dataset\ndataset = pd.read_csv ('spam.csv')\n   \n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Fitting the model\n classifier.fit(X_train, y_train)\n```\n"
    },
    {
        "generated": "```python\ndef filter_list(lst):\n    return [i for i in lst if i % 3!= 0]\n\nprint(filter_list([1, 2, 3, 4, 5, 6, 9, 10]))  # Output: [1, 2, 4, 5, 6, 9, 10]\n```",
        "target": "```python\ndef filter_list(arr):\n    filtered_list = []\n    for num in arr:\n        if num % 3 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nprint(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))\n```\n"
    },
    {
        "generated": "```python\nimport nltk\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_text(text):\n    sia = SentimentIntensityAnalyzer()\n    sentiment_scores = sia.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.05:\n        return 'positive'\n    else:\n        return 'negative'\n\n# Example usage:\nprint(classify_text(\"I love this product!\"))  # Output: 'positive'\nprint(classify_text(\"I hate this product!\"))  # Output: 'negative'\n```",
        "target": "```python\nimport re\n\ndef classify_text(text):\n # Positive words\n positive_words = ['good', 'great', 'nice', 'love', 'happy', 'fun']\n # Negative words\n negative_words = ['bad', 'horrible', 'hate', 'sad']\n\n # Remove all punctuations\n text = re.sub(r'[^\\w\\s]','',text)\n\n # Split the text into words\n words = text.split()\n\n # Count the number of positive and negative words\n positive_count = 0\n negative_count = 0\n for word in words:\n     if word in positive_words:\n         positive_count += 1\n     if word in negative_words:\n         negative_count += 1\n\n# Classify the text\n if positive_count > negative_count:\n     return \"Positive\"\n elif positive_count < negative_count:\n     return \"Negative\"\n else:\n     return \"Neutral\"\n```\n"
    },
    {
        "generated": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    \"USA\": 10,\n    \"Canada\": 5,\n    \"China\": 20,\n    \"India\": 15,\n    \"UK\": 3,\n    \"Australia\": 2,\n    \"France\": 1,\n    \"Germany\": 1,\n    \"Italy\": 1,\n    \"Japan\": 1,\n    \"South Korea\": 1,\n    \"Brazil\": 1,\n    \"Mexico\": 1,\n    \"Russia\": 1,\n    \"Poland\": 1,\n    \"Sweden\": 1,\n    \"Switzerland\": 1,\n}\n\n# Data visualization\nplt.bar(data.keys(), data.values())\nplt.xlabel(\"Country\")\nplt.ylabel(\"Total Cases\")\nplt.title(\"Total Cases of Coronavirus in Different Countries\")\nplt.show()\n```",
        "target": "```python\nimport matplotlib.pyplot as plt\n\ncountry_data = [['United States', 212000], ['Russia', 180000], ['Italy', 105000], ['Spain', 90000], ['Germany', 70000]]\ncountry = [data[0] for data in country_data]\ncases = [data[1] for data in country_data]\n\nplt.barh(country, cases)\nplt.title(\"Total number of Coronavirus cases by country\")\nplt.xlabel('Number of cases')\nplt.ylabel('Country')\nplt.show()\n```\n"
    },
    {
        "generated": "```python\ndef calculate_factorial(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be a non-negative integer.\")\n    elif n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * calculate_factorial(n - 1)\n\nprint(calculate_factorial(int(input(\"Enter a non-negative integer: \")))))\n```",
        "target": "```python\ndef factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n  \nnum = 4\nprint(\"Factorial of\",num,\"is\",factorial(num))\n```\n"
    },
    {
        "generated": "```python\nfrom xml.etree import ElementTree as ET\n\n# Employee data\nemployees = [\n    {\"id\": 1, \"name\": \"John Doe\", \"email\": \"john@example.com\"},\n    {\"id\": 2, \"name\": \"Jane Doe\", \"email\": \"jane@example.com\"},\n    {\"id\": 3, \"name\": \"Bob Smith\", \"email\": \"bob@example.com\"}\n]\n\n# Create the root element\nroot = ET.Element(\"employee\")\n\n# Create the employee table\nfor employee in employees:\n    # Create the employee element\n    emp = ET.SubElement(root, \"employee\")\n    \n    # Create the employee data element\n    emp = ET.SubElement(emp, \"employee_data\")\n    \n    # Create the name element\n    name = ET.SubElement(emp, \"name\")\n    name.text = employee[\"name\"]\n    \n    # Create the email element\n    email = ET.SubElement(emp, \"email\")\n    email.text = employee[\"email\"]\n    \n    # Create the action element (optional)\n    action = ET.SubElement(emp, \"action\")\n    action.text = \"View Employee Details\"\n\n# Create the employee document\net = ET.Element(\"employee_details\")\net.set(\"xmlns\", \"http://www.w3.org/2001/XMLSchema-instance\")\net.set(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\net.set(\"xmlns:xs\", \"http://www.w3.org/2001/XMLSchema\")\net.set(\"target\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")\n\nET.register_namespace(\"xs\", \"http://www.w3.org/2001/XMLSchema\")\n\nET.register_namespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance",
        "target": "```python\nimport xml.etree.ElementTree as ET \n\nroot = ET.Element('employees') \n\nemployee1 = ET.SubElement(root, \"employee\") \nemployee1.set(\"employee_id\", \"1\") \nemployee1.set(\"employee_name\", \"John\") \nemployee1.set(\"department\", \"IT\") \nemployee1.set(\"salary\", \"50000\") \n\nemployee2 = ET.SubElement(root, \"employee\") \nemployee2.set(\"employee_id\", \"2\") \nemployee2.set(\"employee_name\", \"Jane\") \nemployee2.set(\"department\", \"Marketing\") \nemployee2.set(\"salary\", \"55000\") \n\ntree = ET.ElementTree(root) \ntree.write(\"employee_data.xml\")\n```\n"
    },
    {
        "generated": "```python\ndef search_substring(main_string, sub_string):\n    return main_string.find(sub_string)!= -1\n\nmain_string = input(\"Enter a larger string: \")\nsub_string = input(\"Enter a substring: \")\n\nif search_substring(main_string, sub_string):\n    print(f\"Substring '{sub_string}' found in main string.\")\nelse:\n    print(f\"Substring '{sub_string}' not found in main string.\")\n```",
        "target": "```python\ndef search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)\n```\n"
    },
    {
        "generated": "```python\ndef sum_list_elements(input_list):\n    return sum(input_list)\n```",
        "target": "```python\ndef list_sum(list):\n   sum = 0\n   for el in list:\n       sum += el\n   return sum\n```\n"
    },
    {
        "generated": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef optimize_linear_objective(x, c, b):\n    return -linprog(c, A_ub=b, b_ub=b, bounds=(None,) * len(b), maxiter=1000)\n\n# Example usage\nc = np.array([3, -4])  # linear objective function coefficients\nb = np.array([-10, 20])  # linear constraints coefficients\nx = np.array([1, 2])  # initial guess for the solution\n\nresult = optimize_linear_objective(x, c, b)\nprint(result)  # print the optimized solution\n```",
        "target": "```python\n# Importing packages \nimport scipy.optimize as opt \n\n# Objective function \nz = lambda x, y: 5*x + 6*y \n\n# Defining constraints \nc1 = lambda x, y: 22 - x - y \nc2 = lambda x, y: 15 - 2*x - 4*y \n\n# Bounds \nbnds = ((0, None), (0, None)) \n\n# Constraints\ncon1 = {'type': 'ineq', 'fun': c1} \ncon2 = {'type': 'ineq', 'fun': c2} \ncons = [con1, con2] \n\n#Optimization \nsol = opt.minimize(z, (0, 0), bounds = bnds, constraints = cons) \n\nprint(sol)\n```\n"
    },
    {
        "generated": "```python\ndef longest_word(lst):\n    return max(lst, key=len)\n\n# Test the function\nprint(longest_word([\"Hello\", \"World\", \"Python\", \"Programming\"]))  # Output: 'Python'\n```",
        "target": "```python\ndef longest_word(word_list):\n longest_word = word_list[0]\n for word in word_list:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word\n```\n"
    },
    {
        "generated": "```python\ndef word_to_number(word):\n    return len(word)\n\ndef main():\n    words = input(\"Enter a list of words separated by space: \")\n    numbers = [word_to_number(word) for word in words.split()]\n    print(numbers)\n\nmain()\n```",
        "target": "```python\ndef get_word_lengths(words):\n    # initialize empty list \n    lengths = [] \n  \n    # iterate over the list of words\n    for word in words: \n        # append the length of each word to lengths              \n        lengths.append(len(word)) \n  \n    # return the list of lengths\n    return lengths\n```\n"
    },
    {
        "generated": "```python\nimport re\n\ndef extract_numbers(text):\n    return re.findall(r'\\d+', text)\n\ntext = \"The sum of all numbers in this text is 1+2+3+4+5+6+7+8+9+10. \"\nprint(extract_numbers(text))\n```",
        "target": "```python\nimport re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))\n```\n"
    },
    {
        "generated": "```python\nclass SharedDataContext:\n    def __init__(self):\n        self.data = {}\n\n    def get_data(self):\n        return self.data\n\n    def set_data(self, key, value):\n        self.data[key] = value\n\n    def delete_data(self, key):\n        if key in self.data:\n            del self.data[key]\n        else:\n            print(f\"Data key '{key}' not found.\")\n\n    def clear_data(self):\n        self.data.clear()\n\n# Example usage\ncontext = SharedDataContext()\ncontext.set_data('key1', 'value1')\ncontext.set_data('key2', 'value2')\nprint(context.get_data())  # Output: {'key1': 'value1', 'key2': 'value2'}\n```",
        "target": "```python\nclass Context:\n def __init__(self):\n self.data = {}\n\n def set(self, key, value):\n self.data[key] = value\n\n def get(self, key):\n return self.data.get(key)\n \n def clear(self):\n self.data = {}\n \n \ncontext = Context()\n \ndef foo():\n context.set('name', 'John')\n \ndef bar():\n print(context.get('name'))\n \n foo()\n bar() # prints 'John'\n```\n"
    },
    {
        "generated": "```python\ndef is_armstrong(num):\n    digits = len(str(num))\n    return num == sum(int(digit) ** digits for digit in str(num))\n\n# Test the function\nprint(is_armstrong(153))  # True\nprint(is_armstrong(370))  # True\nprint(is_armstrong(123))  # False\n```",
        "target": "```python\ndef is_armstrong_number(num):\n  n = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit**n\n    temp //= 10\n  return sum == num\n```\n"
    },
    {
        "generated": "```python\n# Sort a list of strings by character length\nlist_of_strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\n# Use list comprehension to sort the list\nsorted_list = sorted(list_of_strings, key=len)\n\n# Print the sorted list\nprint(sorted_list)\n```",
        "target": "```python\ndef sort_by_char_length(strings):\n    return sorted(strings, key = len)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef fibonacci(n):\n    if n <= 0:\n        return \"Input should be positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```",
        "target": "```python\ndef computeFibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return computeFibonacci(n-1)+computeFibonacci(n-2)\n```\n"
    },
    {
        "generated": "```python\ndef find_avg(arr):\n    if not arr:\n        print(\"No numbers in the array.\")\n        return None\n    \n    max_num = max(arr)\n    min_num = min(arr)\n    \n    avg = sum(arr) / len(arr)\n    \n    print(f\"Largest number: {max_num}\")\n    print(f\"Smallest number: {min_num}\")\n    print(f\"Average of all numbers: {avg}\")\n    return avg\n\n# Test the function\nfind_avg([1, 2, 3, 4, 5])\n```",
        "target": "```python\ndef find_min_max_avg(arr):\n    # set the min, max numbers to the first item in the array\n    min_num = arr[0]\n    max_num = arr[0]\n\n    # keep track of the sum of all the numbers\n    sum_num = 0\n\n    # iterate through the array\n    for item in arr:\n        # find smallest number\n        if item < min_num:\n            min_num = item\n        # find largest number\n        elif item > max_num:\n            max_num = item\n        # add each number to the sum\n        sum_num += item\n\n    # calculate the average\n    avg_num = sum_num / len(arr)\n    print(\"Smallest Number: {}\\nLargest Number: {}\".format(min_num, max_num))\n    return avg_num\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\n# prompt the user for input\ndata = input('Enter a value: ')\n\n# print the user's input\nprint('You entered:', data)\n```\n"
    },
    {
        "generated": "```python\nimport csv\n\ndef convert_csv_to_dict(csv_file):\n    data = []\n    with open(csv_file, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            if row:  # Check if row is not empty\n                data.append(dict(zip(row, row))))\n    return data\n\ncsv_file = 'yourfile.csv'  # replace 'yourfile.csv' with your csv file\nresult = convert_csv_to_dict(csv_file)\nprint(result)\n```",
        "target": "```python\ncsv_data = [\n {'name': 'Albert', 'age': 22},\n {'name': 'Bob', 'age': 24},\n {'name': 'Charles', 'age': 20}\n]\n```\n"
    },
    {
        "generated": "```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"Name: {self.name}, Age: {self.age}\"\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n\n# Create an instance of the Person class\njohn = Person(\"John\", 30)\n\n# Call the greet method on the john instance\njohn.greet()\n```",
        "target": "```python\nclass Converter:\n    def __init__(self, base_currency):\n        self.base_currency = base_currency\n        self.rates = self.get_rates()\n \n    def get_rates(self):\n        # code to get the exchange rates from a web API\n \n    def convert(self, target_currency, amount):\n        return amount / self.rates[target_currency] * self.rates[self.base_currency]\n \nif __name__ == '__main__':\n    converter = Converter(\"USD\")\n    converted_amount = converter.convert(\"EUR\", 100)\n    print(converted_amount)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_numbers():\n    primes = []\n    for num in range(1, 101):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nprint(prime_numbers())\n```",
        "target": "```python\nfor num in range(2,101):\nfor i in range(2,num):\n if (num % i) == 0:\n break\n else:\n print(num)\n```\n"
    },
    {
        "generated": "```python\nimport json\n\ndef extract_data(json_obj):\n    data = json_obj\n    return [item for item in data if item.get('key', None) is not None]\n\ndef main():\n    json_obj = json.loads(input())\n    data = extract_data(json_obj)\n    print(json.dumps(data, indent=4))\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\ndata = [{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"occupation\": \"programmer\"\n}]\n\narr = []\n\nfor item in data:\n    arr.append(item)\n    \nprint(arr)\n```\n"
    },
    {
        "generated": "```python\nimport string\n\ndef clean_string(input_str):\n    translator = str.maketrans('', '', string.punctuation)\n    return input_str.translate(translator)\n\nprint(clean_string(\"Hello, world! @#$%^&*()\"))  # prints: \"Hello world\"\n```",
        "target": "```python\n# function to remove punctuations and special characters\ndef clean_string(str):\n # remove all punctuation\n no_punc = ''.join(c for c in str if c not in '!@#$%^&*()_+-={}[]:\"|;\\<>,./?')\n # remove all special characters\n final_string = ''.join(c for c in no_punc if ord(c) >= 32 and ord(c) <= 126)\n return final_string\n\n# sample input\ninput_str = \"this&is#some$sampletext\"\n\n# call the function to remove punctuations and special characters\nclean_str = clean_string(input_str)\n\n# print the clean string\nprint(clean_str)\n\n## Output:\nthisissomesampletext\n```\n"
    },
    {
        "generated": "```python\ndef can_partition(A):\n    N = len(A)\n    total_sum = sum(A)\n    if total_sum % 2!= 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [[False] * (target_sum + 1) for _ in range(N + 1)]\n    dp[0][0] = True\n    for i in range(1, N + 1):\n        for j in range(1, target_sum + 1):\n            if i - 1 >= 0 and j - A[i - 1] >= 0 and dp[i - 1][j - A[i - 1]]:\n                dp[i][j] = True\n            if i!= N and j >= A[i] and dp[i + 1][j - A[i]]:\n                dp[i][j] = True\n    return dp[N][target_sum]\n\nA = [1, 2, 3, 4, 5]\nprint(can_partition(A))  # Output: True\n```",
        "target": "```python\ndef partition_equal(arr):\n   total = sum(arr) \n   if total % 2 != 0: \n      return False \n   half = total//2 \n   n = len(arr) \n   dp = [[False for _ in range(half+1)] for _ in range(n+1)] \n   for i in range(n+1): \n      dp[i][0] = True \n   for j in range(1,half+1): \n      dp[0][j] = False \n   for i in range(1, n+1): \n      for j in range(1, half+1): \n         if arr[i-1] <= j:\n            dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \n         else:\n            dp[i][j] = dp[i-1][j] \n   return dp[n][half]\n```\n"
    },
    {
        "generated": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\nprint(prime_numbers(100))\n```",
        "target": "```python\ndef is_prime(num):\n     \n    # Return False if num is less than 2\n    if num < 2:\n        return False\n     \n    # Check if any number from 2 to (num - 1) divides num\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n             \n    else:\n        return True\n\nnums = []\nnum = 2\n\nwhile len(nums) < 100:\n    if is_prime(num):\n        nums.append(num)\n    num = num + 1\n\nprint(nums)\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_circumference(radius):\n    return math.pi * radius\n\n# Example usage:\nradius = float(input(\"Enter the radius: \"))\nprint(\"Circumference: \", calculate_circumference(radius))\n```",
        "target": "```python\ndef calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference)\n```\n"
    },
    {
        "generated": "```python\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))\n```",
        "target": "```python\nimport math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\nfor i in range(10):\n print(\"Hello World!\")\n```\n"
    },
    {
        "generated": "```python\ndef calculate_average_items(lst):\n    return sum(lst) / len(lst)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(calculate_average_items(numbers))  # Output: 3.0\n```",
        "target": "```python\ndef average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum/list_length\n  return average\n```\n"
    },
    {
        "generated": "```python\nimport dbus\n\nclass ExportDBUSMenuBars:\n    def __init__(self):\n        self.dbus_menu = dbus.SystemBus().get_object('org.freedesktop.DBusMenuBars', '/org/freedesktop/DBusMenuBars')\n\n    def export_menu_bar(self):\n        menu_bar = self.dbus_menu\n        menu_bar.publish_new_menu('org.freedesktop.DBusMenuBars', 'org.freedesktop.DBusMenuBars', 'org.freedesktop.DBusMenuBars', 'org.freedesktop.DBusMenuBars')\n\ndef main():\n    module = ExportDBUSMenuBars()\n    module.export_menu_bar()\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\n#!/usr/bin/env python\n# vim:fileencoding=utf-8\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\n\n__license__ = 'GPL v3'\n__copyright__ = '2014, Kovid Goyal <kovid at kovidgoyal.net>'\n\n# Support for excporting Qt's MenuBars/Menus over DBUS. The API is defined in\n# dbus-menu.xml from the libdbusmenu project https://launchpad.net/libdbusmenu\n\nimport dbus\nfrom PyQt5.Qt import (\n    QApplication, QMenu, QIcon, QKeySequence, QObject, QEvent, QTimer, pyqtSignal, Qt)\n\nfrom calibre.utils.dbus_service import Object, BusName, method as dbus_method, dbus_property, signal as dbus_signal\nfrom calibre.gui2.dbus_export.utils import (\n    setup_for_cli_run, swap_mnemonic_char, key_sequence_to_dbus_shortcut, icon_to_dbus_menu_icon)\n\nnull = object()\n\ndef PropDict(mapping=()):\n    return dbus.Dictionary(mapping, signature='sv')\n\ndef create_properties_for_action(ac, previous=None):\n    ans = PropDict()\n    if ac.isSeparator():\n        ans['type'] = 'separator'\n        if not ac.isVisible():\n            ans['visible'] = False\n        return ans\n    text = ac.text() or ac.iconText()\n    if text:\n        ans['label'] = swap_mnemonic_char(text)\n    if not ac.isEnabled():\n        ans['enabled'] = False\n    if not ac.isVisible() or ac.property('blocked') is True:\n        ans['visible'] = False\n    if ac.menu() is not None:\n        ans['children-display'] = 'submenu'\n    if ac.isCheckable():\n        exclusive = ac.actionGroup() is not None and ac.actionGroup().isExclusive()\n        ans['toggle-type'] = 'radio' if exclusive else 'checkmark'\n        ans['toggle-state'] = int(ac.isChecked())\n    shortcuts = ac.shortcuts()\n    if shortcuts:\n        sc = dbus.Array(signature='as')\n        for s in shortcuts:\n            if not s.isEmpty():\n                for x in key_sequence_to_dbus_shortcut(s):\n                    sc.append(dbus.Array(x, signature='s'))\n        if sc:\n            ans['shortcut'] = sc[:1]  # Unity fails to display the shortcuts at all if more than one is specified\n    if ac.isIconVisibleInMenu():\n        icon = ac.icon()\n        if previous and previous.get('x-qt-icon-cache-key') == icon.cacheKey():\n            for x in 'icon-data x-qt-icon-cache-key'.split():\n                ans[x] = previous[x]\n        else:\n            data = icon_to_dbus_menu_icon(ac.icon())\n            if data is not None:\n                ans['icon-data'] = data\n                ans['x-qt-icon-cache-key'] = icon.cacheKey()\n    return ans\n\ndef menu_actions(menu):\n    try:\n        return menu.actions()\n    except TypeError:\n        if isinstance(menu, QMenu):\n            return QMenu.actions(menu)\n        raise\n\nclass DBusMenu(QObject):\n\n    handle_event_signal = pyqtSignal(object, object, object, object)\n\n    def __init__(self, object_path, parent=None, bus=None):\n        QObject.__init__(self, parent)\n        # Unity barfs is the Event DBUS method does not return immediately, so\n        # handle it asynchronously\n        self.handle_event_signal.connect(self.handle_event, type=Qt.QueuedConnection)\n        self.dbus_api = DBusMenuAPI(self, object_path, bus=bus)\n        self.set_status = self.dbus_api.set_status\n        self._next_id = 0\n        self.action_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.actions_changed)\n        self.layout_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.layouts_changed)\n        self.init_maps()\n\n    @property\n    def object_path(self):\n        return self.dbus_api._object_path\n\n    def init_maps(self, qmenu=None):\n        self.action_changes = set()\n        self.layout_changes = set()\n        self.qmenu = qmenu\n        self._id_to_action, self._action_to_id = {}, {}\n        self._action_properties = {}\n\n    @property\n    def next_id(self):\n        self._next_id += 1\n        return self._next_id\n\n    def id_to_action(self, action_id):\n        if self.qmenu is None:\n            return None\n        return self._id_to_action.get(action_id)\n\n    def action_to_id(self, action):\n        if self.qmenu is None:\n            return None\n        return self._action_to_id.get(action)\n\n    def action_properties(self, action_id, restrict_to=None):\n        if self.qmenu is None:\n            return {}\n        ans = self._action_properties.get(action_id, PropDict())\n        if restrict_to:\n            ans = PropDict({k:v for k, v in ans.iteritems() if k in restrict_to})\n        return ans\n\n    def publish_new_menu(self, qmenu=None):\n        self.init_maps(qmenu)\n        if qmenu is not None:\n            qmenu.destroyed.connect(lambda obj=None:self.publish_new_menu())\n            ac = qmenu.menuAction()\n            self.add_action(ac)\n        self.dbus_api.LayoutUpdated(self.dbus_api.revision, 0)\n\n    def set_visible(self, visible):\n        ac = self.id_to_action(0)\n        if ac is not None and self.qmenu is not None:\n            changed = False\n            blocked = not visible\n            for ac in menu_actions(ac.menu()):\n                ac_id = self.action_to_id(ac)\n                if ac_id is not None:\n                    old = ac.property('blocked')\n                    if old is not blocked:\n                        ac.setProperty('blocked', blocked)\n                        self.action_changes.add(ac_id)\n                        changed = True\n            if changed:\n                self.action_changed_timer.start()\n\n    def add_action(self, ac):\n        ac_id = 0 if ac.menu() is self.qmenu else self.next_id\n        self._id_to_action[ac_id] = ac\n        self._action_to_id[ac] = ac_id\n        self._action_properties[ac_id] = create_properties_for_action(ac)\n        if ac.menu() is not None:\n            self.add_menu(ac.menu())\n\n    def add_menu(self, menu):\n        menu.installEventFilter(self)\n        for ac in menu_actions(menu):\n            self.add_action(ac)\n\n    def eventFilter(self, obj, ev):\n        ac = getattr(obj, 'menuAction', lambda : None)()\n        ac_id = self.action_to_id(ac)\n        if ac_id is not None:\n            etype = ev.type()\n            if etype == QEvent.ActionChanged:\n                ac_id = self.action_to_id(ev.action())\n                self.action_changes.add(ac_id)\n                self.action_changed_timer.start()\n            elif etype == QEvent.ActionAdded:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.add_action(ev.action())\n            elif etype == QEvent.ActionRemoved:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.action_removed(ev.action())\n        return False\n\n    def actions_changed(self):\n        updated_props = dbus.Array(signature='(ia{sv})')\n        removed_props = dbus.Array(signature='(ias)')\n        for ac_id in self.action_changes:\n            ac = self.id_to_action(ac_id)\n            if ac is None:\n                continue\n            old_props = self.action_properties(ac_id)\n            new_props = self._action_properties[ac_id] = create_properties_for_action(ac, old_props)\n            removed = set(old_props) - set(new_props)\n            if removed:\n                removed_props.append((ac_id, dbus.Array(removed, signature='as')))\n            updated = PropDict({k:v for k, v in new_props.iteritems() if v != old_props.get(k, null)})\n            if updated:\n                updated_props.append((ac_id, updated))\n        self.action_changes = set()\n        if updated_props or removed_props:\n            self.dbus_api.ItemsPropertiesUpdated(updated_props, removed_props)\n        return updated_props, removed_props\n\n    def layouts_changed(self):\n        changes = set()\n        for ac_id in self.layout_changes:\n            if ac_id in self._id_to_action:\n                changes.add(ac_id)\n        self.layout_changes = set()\n        if changes:\n            self.dbus_api.revision += 1\n            for change in changes:\n                self.dbus_api.LayoutUpdated(self.dbus_api.revision, change)\n        return changes\n\n    def action_is_in_a_menu(self, ac):\n        all_menus = {ac.menu() for ac in self._action_to_id}\n        all_menus.discard(None)\n        return bool(set(ac.associatedWidgets()).intersection(all_menus))\n\n    def action_removed(self, ac):\n        if not self.action_is_in_a_menu(ac):\n            ac_id = self._action_to_id.pop(ac, None)\n            self._id_to_action.pop(ac_id, None)\n            self._action_properties.pop(ac_id, None)\n\n    def get_layout(self, parent_id, depth, property_names):\n        # Ensure any pending updates are done, as they are needed now\n        self.actions_changed()\n        self.layouts_changed()\n        property_names = property_names or None\n        props = self.action_properties(parent_id, property_names)\n        return parent_id, props, self.get_layout_children(parent_id, depth, property_names)\n\n    def get_layout_children(self, parent_id, depth, property_names):\n        ans = dbus.Array(signature='(ia{sv}av)')\n        ac = self.id_to_action(parent_id)\n        if ac is not None and depth != 0 and ac.menu() is not None:\n            for child in menu_actions(ac.menu()):\n                child_id = self.action_to_id(child)\n                if child_id is not None:\n                    props = self.action_properties(child_id, property_names)\n                    ans.append((child_id, props, self.get_layout_children(child_id, depth - 1, property_names)))\n        return ans\n\n    def get_properties(self, ids=None, property_names=None):\n        property_names = property_names or None\n        ans = dbus.Array(signature='(ia{sv})')\n        for action_id in (ids or self._id_to_action):\n            ans.append((action_id, self.action_properties(action_id, property_names)))\n        return ans\n\n    def handle_event(self, action_id, event, data, timestamp):\n        ac = self.id_to_action(action_id)\n        if event == 'clicked':\n            if ac.isCheckable():\n                ac.toggle()\n            ac.triggered.emit(ac.isCheckable() and ac.isChecked())\n\n    def handle_about_to_show(self, ac):\n        child_ids = {self.action_to_id(x) for x in menu_actions(ac.menu())}\n        child_ids.discard(None)\n        ac_id = self.action_to_id(ac)\n        ac.menu().aboutToShow.emit()\n        if ac_id in self.layout_changes or child_ids.intersection(self.action_changes):\n            return True\n        return False\n\nclass DBusMenuAPI(Object):\n\n    IFACE = 'com.canonical.dbusmenu'\n\n    def __init__(self, menu, object_path, bus=None):\n        if bus is None:\n            bus = dbus.SessionBus()\n        Object.__init__(self, bus, object_path)\n        self.status = 'normal'\n        self.menu = menu\n        self.revision = 0\n\n    @dbus_property(IFACE, signature='u')\n    def Version(self):\n        return 3  # GTK 3 uses 3, KDE 4 uses 2\n\n    @dbus_property(IFACE, signature='s', emits_changed_signal=True)\n    def Status(self):\n        return self.status\n\n    def set_status(self, normal=True):\n        self.status = 'normal' if normal else 'notice'\n        self.PropertiesChanged(self.IFACE, {'Status': self.status}, [])\n\n    @dbus_property(IFACE, signature='s')\n    def TextDirection(self):\n        return 'ltr' if QApplication.instance().isLeftToRight() else 'rtl'\n\n    @dbus_property(IFACE, signature='as')\n    def IconThemePath(self):\n        return dbus.Array(signature='s')\n\n    @dbus_method(IFACE, in_signature='iias', out_signature='u(ia{sv}av)')\n    def GetLayout(self, parentId, recursionDepth, propertyNames):\n        layout = self.menu.get_layout(parentId, recursionDepth, propertyNames)\n        return self.revision, layout\n\n    @dbus_method(IFACE, in_signature='aias', out_signature='a(ia{sv})')\n    def GetGroupProperties(self, ids, propertyNames):\n        return self.menu.get_properties(ids, propertyNames)\n\n    @dbus_method(IFACE, in_signature='is', out_signature='v')\n    def GetProperty(self, id, name):\n        return self.menu.action_properties(id).get(name, '')\n\n    @dbus_method(IFACE, in_signature='isvu', out_signature='')\n    def Event(self, id, eventId, data, timestamp):\n        ''' This is called by the applet to notify the application an event happened on a\n        menu item. eventId can be one of the following::\n            * \"clicked\"\n            * \"hovered\"\n            * \"opened\"\n            * \"closed\"\n        Vendor specific events can be added by prefixing them with \"x-<vendor>-\"'''\n        if self.menu.id_to_action(id) is not None:\n            self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n\n    @dbus_method(IFACE, in_signature='a(isvu)', out_signature='ai')\n    def EventGroup(self, events):\n        ''' Used to pass a set of events as a single message for possibily\n        several different menuitems.  This is done to optimize DBus traffic.\n        Should return a list of ids that are not found. events is a list of\n        events in the same format as used for the Event method.'''\n        missing = dbus.Array(signature='u')\n        for id, eventId, data, timestamp in events:\n            if self.menu.id_to_action(id) is not None:\n                self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n            else:\n                missing.append(id)\n        return missing\n\n    @dbus_method(IFACE, in_signature='i', out_signature='b')\n    def AboutToShow(self, id):\n        ac = self.menu.id_to_action(id)\n        if ac is not None and ac.menu() is not None:\n            return self.menu.handle_about_to_show(ac)\n        return False\n\n    @dbus_method(IFACE, in_signature='ai', out_signature='aiai')\n    def AboutToShowGroup(self, ids):\n        updates_needed = dbus.Array(signature='i')\n        id_errors = dbus.Array(signature='i')\n        for ac_id in ids:\n            ac = self.menu.id_to_action(id)\n            if ac is not None and ac.menu() is not None:\n                if self.menu.handle_about_to_show(ac):\n                    updates_needed.append(ac_id)\n            else:\n                id_errors.append(ac_id)\n        return updates_needed, id_errors\n\n    @dbus_signal(IFACE, 'a(ia{sv})a(ias)')\n    def ItemsPropertiesUpdated(self, updatedProps, removedProps):\n        pass\n\n    @dbus_signal(IFACE, 'ui')\n    def LayoutUpdated(self, revision, parent):\n        pass\n\n    @dbus_signal(IFACE, 'iu')\n    def ItemActivationRequested(self, id, timestamp):\n        pass\n\ndef test():\n    setup_for_cli_run()\n    app = QApplication([])\n    bus = dbus.SessionBus()\n    dbus_name = BusName('com.calibre-ebook.TestDBusMenu', bus=bus, do_not_queue=True)\n    m = QMenu()\n    ac = m.addAction(QIcon(I('window-close.png')), 'Quit', app.quit)\n    ac.setShortcut(QKeySequence('Ctrl+Q'))\n    menu = DBusMenu('/Menu', bus=bus)\n    menu.publish_new_menu(m)\n    app.exec_()\n    del dbus_name\n\nif __name__ == '__main__':\n    test()\n\n```\n"
    },
    {
        "generated": "```python\n# Python Regular Expression to match any number greater than 5 and even\nimport re\n\npattern = re.compile(r'^(?:(\\d+)(?:\\.\\d+)?(?:\\d*|)(?:\\d{0,2})?)*\\d+$')\n\n# Test the pattern\nprint(pattern.match('56.7'))  # Match 56.7\nprint(pattern.match('56.7.2'))  # Match 56.7.2\nprint(pattern.match('56.7.2.3'))  # Match 56.7.2.3\nprint(pattern.match('56.7.2.3.4'))  # Match 56.7.2.3.4\nprint(pattern.match('56.7.2.3.4.5'))  # Match 56.7.2.3.4.5\n```",
        "target": "```python\nimport re\npattern = re.compile(r'[6-9]|[2-4][0-9]')\n```\n"
    },
    {
        "generated": "```python\nimport requests\n\ndef get_latest_posts():\n    url = \"https://www.reddit.com/r/news/.rss\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()[\"data\"][\"children\"]\n    else:\n        print(\"Failed to retrieve latest posts.\")\n        return []\n\nlatest_posts = get_latest_posts()\nfor post in latest_posts:\n    print(post[\"title\"])\n```",
        "target": "```python\nimport praw\n\nreddit = praw.Reddit('bot1')\n\nlatest_posts = [] \nfor submission in reddit.subreddit('all').new(limit=10):\n latest_posts.append(submission.title)\n \nprint(latest_posts)\n```\n"
    },
    {
        "generated": "```python\n# QuickSort Algorithm in Python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\n# Test the function\narr = [5, 2, 8, 1, 9]\nprint(quicksort(arr))\n```",
        "target": "```python\ndef quicksort(arr):\n    # base case for recursion\n    if len(arr) <= 1:\n        return arr\n    # pick pivot element and get its index\n    pivot = arr[0]\n    index = 0\n    # create left and right lists\n    left = []\n    right = []\n    # loop over the array from index 1\n    for i in range(1, len(arr)):\n        # if element is less than pivot, append to left list\n        if arr[i] < pivot:\n            left.append(arr[i])\n        # else, append to right list\n        else:\n            right.append(arr[i])\n    # recursively call function on left and right lists\n    sorted_arr = quicksort(left) + [pivot] + quicksort(right)\n    return sorted_arr\n\nresult = quicksort(arr)\nprint(result)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nclass Node:\n    def __init__(self, value, children=None):\n        self.value = value\n        self.children = children if children else []\n\ndef parse_tree(root, children=None):\n    if children:\n        root.children = [parse_tree(child) for child in children]\n    return root\n\nroot = Node(\"root\")\nchildren = [Node(\"child1\"), Node(\"child2\")]\nroot = parse_tree(root, children)\nprint(root.value)  # Output: \"root\"\n```",
        "target": "```python\nimport collections\n\n# Create a tree using a Python dictionary\nParseTree = collections.defaultdict(dict)\n\n# Function to add a node to the tree\ndef add_node(parent, child):\n    ParseTree[parent][child] = {}\n\n# Function to traverse the tree\ndef traverse_tree(node):\n    # Base case\n    if len(ParseTree[node]) == 0:\n        return\n    \n    for key, value in ParseTree[node].items():\n        print(\"{}-->{}\".format(node, key))\n        traverse_tree(key)\n```\n"
    },
    {
        "generated": "```python\ndef intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nprint(intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\n```",
        "target": "```python\ndef intersection(list1, list2): \n    return list(set(list1) & set(list2)) \n\n# Output: [3, 6]\n```\n"
    },
    {
        "generated": "```python\ndef verify_ipv4_address(ip_address):\n    parts = ip_address.split(\".\")\n    if len(parts)!= 4:\n        return False\n    for part in parts:\n        if not part.isdigit() or not 0 <= int(part) <= 255:\n            return False\n    return True\n\nprint(verify_ipv4_address(\"192.168.1.1\"))\n```",
        "target": "```python\ndef check_valid_ip(ip_addr): \n    ip = ip_addr.split(\".\") \n    if(len(ip) == 4 and \n        int(ip[0]) <= 255 and \n        int(ip[1]) <= 255 and \n        int(ip[2]) <= 255 and \n        int(ip[3]) <= 255): \n        return True\n    else: \n        return False\n```\n"
    },
    {
        "generated": "```python\n# SEO Optimizer for Web Pages\nfrom bs4 import BeautifulSoup\nimport requests\nfrom urllib.parse import urljoin, urlparse\n\ndef optimize_web_page(url, title, meta_description, keywords):\n    # Parse HTML content\n    soup = BeautifulSoup(url, 'html.parser')\n\n    # Extract title and meta description\n    title_element = soup.find('title')\n    meta_description_element = soup.find('meta', attrs={'name': 'description'})\n    meta_description = meta_description_element.get('content') if meta_description_element else ''\n    title = title_element.get('content') if title_element else ''\n\n    # Extract keywords\n    keywords_element = soup.find('meta', attrs={'name': 'keywords'})\n    keywords = keywords_element.get('content') if keywords_element else ''\n\n    # Optimize title\n    title = title.strip() +'-'+ title\n\n    # Optimize meta description\n    meta_description = meta_description.strip() +'-'+ meta_description\n\n    # Optimize keywords\n    keywords =''.join(keywords.split()) +'-'+ keywords\n\n    # Create optimized HTML content\n    optimized_html = '<html><head><title>' + title + '</title><meta name=\"description\" content=\"' + meta_description + '\"><meta name=\"keywords\" content=\"' + keywords + '\"/></head><body>' + soup.get_text() + '</body></html>'\n\n    return optimized_html\n\ndef main():\n    url = 'https://example.com'\n    title = 'Example Website'\n    meta_description = 'This is an example website. You can search for it online.'\n    keywords = 'example website, search engine optimization, seo, web page optimization'\n\n    optimized_html = optimize_web_page(url, title, meta_description, keywords)\n    print(optimized_html)\n\nif __name__ == '__main__':\n    main()\n```",
        "target": "```python\nimport re\nimport requests\n\ndef optimize_webpage(url):\n    r = requests.get(url, timeout=5)\n    content = r.text\n    content = content.lower()\n    title = re.search('<title>(.*)</title>', content)\n    title_text = title.group(1).strip()\n    content = content.replace(title_text, title_text.lower())\n    keywords = re.findall('<meta name=\"keywords\" content=\"(.*)\">', content)\n    for word in keywords:\n        if word.strip():\n            content = content.replace(word, word.lower())\n\n    description = re.findall('<meta name=\"description\" content=\"(.*)\">', content)\n    for desc in description:\n        if desc.strip():\n            content = content.replace(desc, desc.lower())\n    return content\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nimport numpy as np\nimport re\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense\nfrom keras.utils import to_categorical\nfrom nltk.corium import wordnet\nfrom nltk.stem import WordNetLemmatizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import truncate_sequences\n\n# Load the dataset\ndata = pd.read_csv(\"sentiment_data.csv\")\n\n# Define the features and target\nX = data['text']\ny = data['sentiment']\n\n# Preprocess the text data\nlemmatizer = WordNetLemmatizer()\nX = pad_sequences(X, max_length=200, padding='post')\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the RNN model\nmodel = Sequential()\nmodel.add(Embedding(10000, 100, input_length=200))\nmodel.add(LSTM(64, activation='relu', input_length=200))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)\n\n# Evaluate the model\nloss, accuracy = model.evaluate(X_test, y_test, batch_size=32)\nprint(f\"Loss: {loss}, Accuracy: {accuracy:.2f}\")\n```",
        "target": "```python\n# Load the required libraries\nimport numpy as np\nimport tensorflow\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n\n# Load the training dataset\nsentences = ['This is a good sentiment', 'This is a bad sentiment']\nlabels = [1, 0]\n\n# Create the tokenizer\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(sentences)\n\n# Encode  the sentences\nencoded_sentences = tokenizer.texts_to_sequences(sentences)\npadded_sentences = pad_sequences(encoded_sentences, maxlen=10)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=32, input_length=10))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile and fit the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(padded_sentences, labels, epochs=10) \n\n# Evaluate the model\nscores = model.evaluate(padded_sentences, labels) \nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))\n```\n"
    },
    {
        "generated": "```python\nimport math\n\ndef calculate_roots(a, b, c):\n    d = math.sqrt(b**2 - 4*a*c)\n    root1 = (-b + d) / (2*a)\n    root2 = (-b - d) / (2*a)\n    return root1, root2\n\ndef main():\n    a = float(input(\"Enter the coefficient of x^2 (a): \"))\n    b = float(input(\"Enter the coefficient of x (b): \"))\n    c = float(input(\"Enter the constant term (c): \"))\n\n    root1, root2 = calculate_roots(a, b, c)\n\n    print(f\"The roots are: {root1}, {root2}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
        "target": "```python\nimport math\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3))\n```\n"
    },
    {
        "generated": "```python\ndef sum_numbers(a, b):\n    return a + b\n```",
        "target": "```python\ndef add(a, b):\n    return a + b\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport operator\n\ndef generate_population(size, problem, bounds):\n    population = []\n    for _ in range(size):\n        individual = list(random.sample(problem, len(problem)))\n        if all(bounds[1] <= value <= bounds[0] for value in individual):\n            population.append(individual)\n    return population\n\ndef fitness(individual, problem):\n    return sum(1 for value in individual if value in problem) / len(individual)\n\ndef selection(population, size):\n    fitness_values = [fitness(individual, problem) for individual in population]\n    probabilities = [fitness_value / fitness_values[-1] for fitness_value in fitness_values]\n    return random.choices(population, weights=probabilities, k=size)[0]\n\ndef crossover(parent1, parent2):\n    crossover_point = random.randint(1, len(parent1) - 1)\n    child1 = parent1[:crossover_point]\n    child2 = parent2[crossover_point:]\n    return child1 + child2\n\ndef mutation(individual):\n    mutation_point = random.randint(0, len(individual) - 1)\n    individual[mutation_point] = random.choice(['A', 'B', 'C', 'D'])\n    return individual\n\ndef genetic_algorithm(problem, bounds, size, iterations):\n    population = generate_population(size, problem, bounds)\n    for _ in range(iterations):\n        parents = selection(population, size)\n        child1 = crossover(parents[0], parents[1])\n        child2 = crossover(parents[1], parents[0])\n        population.append(mutation(child1) + mutation(child2))\n    return population\n\nproblem = {\n    'A': 1,\n    'B': 2,\n    'C': 3,\n    'D': 4\n}\n\nbounds = {'A': (0, 10), 'B': (0, 10), 'C': (0, 10), 'D': (0, 10)}\n\nbest_solution = genetic_algorithm(problem, bounds, size=100, iterations=1000)\nprint(best_solution)\n```",
        "target": "```python\nimport random\nimport numpy as np\n\n# Define the function\ndef f(x, y):\n    return (x**2) + (2*y**2)\n\n# Define parameters for genetic algorithm\npop_size = 25 \nnum_generations = 100\n\n# Create initial random starting population\npop = np.random.rand(pop_size, 2) \nscores = np.array([f(*member) for member in pop])\n\n# Iterate over the generations\nfor i in range(num_generations):\n    # Create mating pool\n    mating_pool=np.random.choice(np.arange(pop_size), replace=False, size=(round(pop_size/2), 2)) \n    offspring = np.empty_like(mating_pool) \n    # Create offspring\n    for parent_idx, child_idx in enumerate(mating_pool):\n        parent_1 = pop[child_idx[0]]\n        parent_2 = pop[child_idx[1]]\n\n        # Generate offspring\n        child_1 = np.random.uniform(low=min(parent_1, parent_2),high=max(parent_1, parent_2)) \n        child_2 = np.random.choice([child_1[0],child_1[1]])\n        offspring[parent_idx] = [child_1[0], child_2]\n\n    # Evaluate offspring\n    scores_offspring = np.array([f(*member) for member in offspring])\n    # Generate mating pool for next iteration\n    mating_pool = np.concatenate((pop,offspring))\n    scores = np.concatenate((scores,scores_offspring))\n    pop = mating_pool\n    # Select best individuals\n    best_idx = np.argsort(scores)[:pop_size] \n    pop = mating_pool[best_idx]\n\n# Find global minimum\nglobal_minimum = np.min(scores) \n\nprint('Global minimum is ',global_minimum)\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef print_string_times():\n    num = int(input(\"Enter a number: \"))\n    string = input(\"Enter a string: \")\n    for _ in range(num):\n        print(string)\n\n# Run the function\nprint_string_times()\n```",
        "target": "```python\nnum = int(input(\"Enter a number: \"))\nstring = input(\"Enter a string: \")\n\nfor i in range(num):\n print(string)\n```\n"
    },
    {
        "generated": "```python\ndef find_largest_number(lst):\n    return max(lst)\n\n# Example usage\nnumbers = [12, 45, 7, 23, 56, 89]\nprint(find_largest_number(numbers))\n```",
        "target": "```python\ndef largestNumber(list): \n    max_num = 0\n    for i in list:  \n        if i > max_num: \n            max_num = i \n    return max_num \n  \n\nlist = [3, 6, 4, 8, 1]\nlargestNumber = largestNumber(list) \nprint(\"Largest element in the list is: \", largestNumber);\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\nmy_list = [1, 5, 10, 20, 8]\n\nlargest = max(my_list)\nprint(\"The largest number from the given list is: \" + str(largest))\n```\n"
    },
    {
        "generated": "```python\ndef calculate_factorial(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return reduce(lambda x, y: x * y, range(1, n + 1), 1)\n\nprint(calculate_factorial(5))  # Output: 120\n```",
        "target": "```python\ndef factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)\n```\n"
    },
    {
        "generated": "```python\n# Import required libraries\nimport tkinter as tk\nfrom tkinter import messagebox\n\n# Function to personalize the user experience\ndef personalize_user_experience():\n    # Get the user's name\n    name = name_entry.get()\n    \n    # Check if the user's name is provided\n    if name:\n        # Clear the previous window\n        root.destroy()\n        \n        # Create a new window with the personalized user experience\n        root = tk.Tk()\n        root.title(f\"Hello, {name}!\")\n        \n        # Add a label with the user's name\n        tk.Label(root, text=f\"Hello, {name}!\", font=(\"Arial\", 24)).pack()\n        \n        # Add a button to exit the window\n        tk.Button(root, text=\"Exit\", command=root.destroy).pack()\n        \n        # Run the application\n        root.mainloop()\n\n# Create a new window with the personalized user experience\npersonalize_user_experience()\n```",
        "target": "```python\nname = input(\"Please enter your name: \")\n\nif name == \"Alice\":\n    print(\"Welcome, Alice! Here are some personalized recommendations:\")\n    print(\"1. Movie recommendations\")\n    print(\"2. Restaurant recommendations\")\n    print(\"3. Shopping recommendations\")\nelse:\n    print(\"Welcome! Please check out our general recommendations:\")\n    print(\"1. Popular movies\")\n    print(\"2. Popular restaurants\")\n    print(\"3. Popular shopping stores\")\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\n\n# Function to generate sales report\ndef generate_sales_report(data):\n    # Create a DataFrame from the input data\n    df = pd.DataFrame(data)\n\n    # Calculate total sales\n    total_sales = df['Sales'].sum()\n\n    # Calculate average sales\n    average_sales = df['Sales'].mean()\n\n    # Create a report\n    report = f\"Sales Report:\\n\"\n    report += f\"Total Sales: {total_sales}\\n\"\n    report += f\"Average Sales: {average_sales:.2f}\"\n\n    return report\n\n# Example usage\ndata = {'Date': ['2022-01-01', '2022-01-02', '2022-01-03'],\n        'Sales': [100, 200, 300]}\n\nprint(generate_sales_report(data))\n```",
        "target": "```python\nimport csv\n\n# A list of dictionaries containing sales data\nsales_data = [\n { 'name': 'John', 'quantity': 2, 'price': 10.0 },\n { 'name': 'Jane', 'quantity': 3, 'price': 15.0 },\n { 'name': 'Mike', 'quantity': 4, 'price':\n```\n"
    },
    {
        "generated": "```python\ndef celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\nprint(celsius_to_fahrenheit(0))  # Output: 32.0\nprint(celsius_to_fahrenheit(100))  # Output: 212.0\n```",
        "target": "```python\ndef convert_celsius(celsius):\n # Convert celsius to Fahrenheit\n fahrenheit = celsius * 9/5 + 32\n\n # Return fahrenheit value\n return fahrenheit\n\n# Test\ncelsius = 32\nprint(convert_celsius(celsius))\n```\n"
    },
    {
        "generated": "```python\nclass JobOffer:\n    def __init__(self, name, company, salary, benefits):\n        self.name = name\n        self.company = company\n        self.salary = salary\n        self.benefits = benefits\n\n    def __str__(self):\n        return f\"Job Offer: {self.name}\\nCompany: {self.company}\\nSalary: {self.salary}\\nBenefits: {self.benefits}\"\n\n# Example usage\njob_offer = JobOffer(\"Apple\", \"Google\", 100000, {\"health insurance\": \"monthly\", \"401(k) matching\": \"yearly\", \"paid time off\": \"vacation\"})\nprint(job_offer)\n```",
        "target": "```python\nclass JobOffer:\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    \n    def get_title(self):\n        return self.title\n    \n    def get_salary(self):\n        return self.salary\n```\n"
    },
    {
        "generated": "```python\n# Import required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ndata = pd.read_csv('dataset.csv')\n\n# Define features and target\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Split dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the neural network\nmlp = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000, solver='saga', random_state=42)\nmlp.fit(X_train, y_train)\n\n# Evaluate the neural network\ny_pred = mlp.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy:.2f}')\n\n# Plot the predicted vs actual values\nplt.scatter(X_test, y_test, color='blue', label='Actual')\nplt.scatter(X_test, mlp.predict(X_test), color='red', label='Predicted')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Binary Classification')\nplt.legend()\nplt.show()\n```",
        "target": "```python\n# import libraries\nimport numpy as np\nimport tensorflow as tf\n\n# define inputs\nX = tf.placeholder(tf.float32, shape=[None, input_dim])\ny = tf.placeholder(tf.float32, shape=[None, classes])\n\n# define weights & biases\nW = tf.Variable(tf.random_normal([input_dim, classes]))\nb = tf.Variable(tf.random_normal([classes]))\n\n# define prediction\npred = tf.nn.softmax(tf.matmul(X,W) + b)\n\n# define loss\ncost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))\n\n# define optimizer\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\n# start session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # train model\n    for epoch in range(training_epochs):\n        _, c = sess.run([optimizer, cost], feed_dict={X: x_train,\n                        y: y_train})\n        \n    # test model\n    output = tf.argmax(pred, 1)\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32))\n    result = sess.run(accuracy, feed_dict={X: x_test, y: y_test})\n    print('The accuracy of the model on the test set is: {}'.format(result))\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\nfor i in range(1,6):\n    for j in range(1,i+1):\n        print(\"*\", end=\" \")\n    print()\n```\n"
    },
    {
        "generated": "```python\ndef check_substring(s1, s2):\n    return s2 in s1\n```",
        "target": "```python\ndef is_substring(string1, string2): \n    if string1 in string2:\n        return True\n    else:\n        return False\n```\n"
    },
    {
        "generated": "```python\n# Your code here\nmy_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]\nprint(my_list)\n```",
        "target": "```python\nmy_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]\n```\n"
    },
    {
        "generated": "```python\nimport statistics\n\ndef calculate_stats(numbers):\n    mean = statistics.mean(numbers)\n    median = statistics.median(numbers)\n    mode = statistics.mode(numbers)\n\n    print(f\"Mean: {mean:.2f}\")\n    print(f\"Median: {median:.2f}\")\n    print(f\"Mode: {mode}\")\n\nnumbers = [1, 2, 3, 4, 5]\ncalculate_stats(numbers)\n```",
        "target": "```python\ndef mean(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total / len(arr)\n\ndef median(arr):\n  arr.sort()\n  if len(arr) % 2 != 0:\n    median_index = int(len(arr) / 2)\n    return arr[median_index]\n  else:\n    lower_index = int(len(arr) / 2) - 1\n    upper_index = int(len(arr) / 2)\n    return (arr[lower_index] + arr[upper_index]) / 2\n\ndef mode(arr):\n  counts = {}\n  for num in arr:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n\n  max_frequency = 0\n  max_value = None\n  for num, frequency in counts.items():\n    if frequency > max_frequency:\n      max_frequency = frequency\n      max_value = num\n\n  return max_value\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nmean = mean(nums)\nmedian = median(nums)\nmode = mode(nums)\n\nprint(f'Mean: {mean}, Median: {median}, Mode: {mode}')\n```\n"
    },
    {
        "generated": "```python\ndef get_odd_numbers_descending(arr):\n    return sorted([x for x in arr if x % 2!= 0], reverse=True)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(get_odd_numbers_descending(numbers))\n```",
        "target": "```python\ndef extract_odd(arr):\n    odd = [x for x in arr if x % 2 != 0]\n    return sorted(odd, reverse = True)\n\narr = [1, 8, 5, 9, 12, 17]\nprint(extract_odd(arr)) # Output: [17, 9, 5, 1]\n```\n"
    },
    {
        "generated": "```python\n# Fetch the last element from a list in Python\ndef fetch_last_element(lst):\n    return lst[-1]\n\n# Example usage\nlst = [1, 2, 3, 4, 5]\nprint(fetch_last_element(lst))  # Output: 5\n```",
        "target": "```python\nmy_list = [3, 5, 7, 9, 2]\n\nlast_element = my_list[-1]\nprint('Last element in the list is %d' % (last_element))\n```\n"
    },
    {
        "generated": "```python\ndef calculate_average_age():\n    total_age = 0\n    count = 0\n    names = []\n\n    while True:\n        name = input(\"Enter your name (or 'done' to finish): \")\n        if name.lower() == 'done':\n            break\n        age = int(input(\"Enter your age: \"))\n        total_age += age\n        count += 1\n        names.append(name)\n\n    if count == 0:\n        print(\"No one has entered their age. Please enter a name and try again.\")\n        return\n\n    average_age = total_age / count\n    print(f\"Average age: {average_age:.2f}\")\n\ncalculate_average_age()\n```",
        "target": "```python\ndef calculate_average_age(names, ages):\n    result = 0\n    for i in range(len(names)):\n        result += ages[i]\n    return round(result / len(names), 2)\n\nnames = ['Bob', 'Jack', 'John', 'David']\nages = [12, 27, 45, 16]\n\nprint(calculate_average_age(names, ages))\n```\n"
    },
    {
        "generated": "```python\ndef parse_string(s):\n    return s.split()\n```",
        "target": "```python\ndef parse_str(str, separator):\n    strList = str.split(separator) \n    return strList\n```\n"
    },
    {
        "generated": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Create a sample DataFrame\ndata = {'Name': ['Tom', 'Nick', 'John', 'Peter', 'Tom'],\n        'Age': [20, 21, 19, 18, 20],\n        'Score': [90, 85, 92, 88, 95]}\n\ndf = pd.DataFrame(data)\n\n# Visualize the DataFrame\ndf.plot(kind='bar', figsize=(10, 6))\nplt.show()\n```",
        "target": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],\n    'Age': [18, 25, 35, 45]\n})\n\nax = df.plot.bar(x='Name', y='Age', rot=0)\n\nplt.show()\n```\n"
    },
    {
        "generated": "```python\ndef print_factors(n):\n    for i in range(1, n + 1):\n        if n % i == 0:\n            print(i)\n\n# Test the function\nprint_factors(12)\n```",
        "target": "```python\ndef factor_of(n):\n    result = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result.append(i)\n    return result\n```\n"
    },
    {
        "generated": "```python\n# Your code here\n```",
        "target": "```python\nprint(\"Hello World\")\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef find_median(num_list):\n    num_list.sort()\n    n = len(num_list)\n    if n % 2 == 0:\n        return (num_list[n // 2 - 1] + num_list[n // 2]) / 2\n    else:\n        return num_list[n // 2]\n\n# Get 5 numbers from the user\nnum_list = list(map(int, input(\"Enter 5 numbers separated by spaces: \").split()))\n\n# Find and print the median\nprint(find_median(num_list))\n```",
        "target": "```python\nnums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2\nelse:\n ans = nums[len(nums) // 2]\n \nprint(\"Median of the given numbers is: \" + str(ans))\n```\n"
    },
    {
        "generated": "```python\n# Your code here\ndef pig_latin_converter(input_string):\n    words = input_string.split()\n    pig_latin_words = []\n    for word in words:\n        if word[-3].lower() in 'aeiou':\n            pig_latin_word = word[:-3] + 'ay'\n        else:\n            pig_latin_word = word + 'o'\n        pig_latin_words.append(pig_latin_word)\n    return''.join(pig_latin_words)\n\n# Test the function\nprint(pig_latin_converter(\"hello world\"))  # Output: \"ellohay orldway\"\n```",
        "target": "```python\ndef pig_latin(string):\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  words = string.split()\n            \n  #loop through the words\n  for index, word in enumerate(words):\n    new_word = \"\"\n    #check if the first letter one of the vowels \n    if word[0].lower() in vowels:\n      #add the suffix \n      new_word = word + \"ay\"\n    #otherwise move first letter to the end\n    else:\n      #move the first letter\n      new_word = word[1:] + word[0]\n      #add the suffix \n      new_word += \"ay\"\n      \n    #add the new word to list\n    words[index] = new_word\n            \n  #return modified list\n  return \" \".join(words)\n```\n"
    },
    {
        "generated": "```python\nimport sympy\n\ndef get_first_100_primes():\n    primes = sympy.primer(1000)\n    while len(primes) < 100:\n        primes = list(sympy.primer(primes)) + primes\n    return primes\n\nprint(get_first_100_primes())\n```",
        "target": "```python\ndef get_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n+1): \n        for i in range(2, num): \n            if num % i == 0:\n                break\n        else:\n            prime_numbers.append(num) \n    return prime_numbers\n\nprint(get_prime_numbers(100))\n```\n"
    },
    {
        "generated": "```python\nimport re\nimport string\n\ndef clean_text(text):\n    # Remove punctuation\n    text = re.sub('[' + string.punctuation + ']', '', text)\n    \n    # Remove white space\n    text = re.sub(' +','', text)\n    \n    # Convert to lower case\n    text = text.lower()\n    \n    return text\n\n# Test the function\ntext = \"Hello, World! This is a test. Testing 1, 2, 3...\"\nprint(clean_text(text))\n```",
        "target": "```python\nimport re\n\ndef clean_text(text):\n cleaned_text = re.sub(r'[^\\w\\s]','', text)\n cleaned_text = cleaned_text.lower().strip()\n return cleaned_text\n \n text = 'This is a sample sentence.'\n cleaned_text = clean_text(text)\n print(cleaned_text)\n\n# Output: thisisasamplesentence\n```\n"
    },
    {
        "generated": "```python\nimport random\n\ndef generate_random_list():\n    random_list = [random.randint(1, 20) for _ in range(20)]\n    return random_list\n\nrandom_list = generate_random_list()\nprint(random_list)\n```",
        "target": "```python\nimport random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator())\n```\n"
    },
    {
        "generated": "```python\nimport random\n\n# Given list\nmy_list = ['A', 'B', 'C', 'D', 'E']\n\n# Shuffling the list\nrandom.shuffle(my_list)\n\n# Printing the shuffled list\nprint(my_list)\n```",
        "target": "```python\nimport random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis)\n```\n"
    },
    {
        "generated": "```python\nimport random\nimport string\n\ndef generate_password(length):\n    all_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(all_characters) for _ in range(length))\n    return password\n\n# Generate a random password with length 10\npassword = generate_password(10)\nprint(password)\n```",
        "target": "```python\nimport string\nimport random\n\ndef generatePassword():\n    # Generate list of lowercase and uppercase letters\n    letters = string.ascii_letters\n    # Generate a random string with length 10 \n    password = ''.join(random.choice(letters) for i in range(10)) \n    return password\n\nprint(generatePassword())\n```\n"
    },
    {
        "generated": "```python\ndef find_duplicates(nums):\n    num_set = set()\n    duplicates = set()\n    for num in nums:\n        if num in num_set:\n            duplicates.add(num)\n        num_set.add(num)\n    return list(duplicates)\n\nnums = [1, 2, 3, 4, 2, 1]\nprint(find_duplicates(nums))\n```",
        "target": "```python\ndef extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result\n```\n"
    },
    {
        "generated": "```python\ndef print_front_of_queues(*queues):\n    for queue in queues:\n        print(queue[0])\n```",
        "target": "```python\ndef print_front_elements_from_queues(queue_list):\n    for queue in queue_list:\n        print(queue[0])\n\nqueue_list = [queue1, queue2]\n\nprint_front_elements_from_queues(queue_list) # This should print 5 and 7\n```\n"
    },
    {
        "generated": "```python\ndef largest_element(lst):\n    return max(lst)\n```",
        "target": "```python\ndef maximum(list):\n    return max(list)\n\nlist = [8, 5, 2, 4, 9]\nresult = maximum(list)\nprint(result)\n```\n"
    }
]